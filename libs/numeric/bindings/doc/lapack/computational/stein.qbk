[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section stein]

[heading Prototype]
There is one prototype of `stein` available, please see below.
``
stein( const int_t n, const VectorD& d, const VectorE& e,
        const int_t m, const VectorW& w,
        const VectorIBLOCK& iblock, const VectorISPLIT& isplit, MatrixZ& z,
        VectorIFAIL& ifail );
``


[heading Description]

`stein` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines SSTEIN, DSTEIN, CSTEIN, and ZSTEIN. 
`stein` computes the eigenvectors of a real symmetric tridiagonal
matrix T corresponding to specified eigenvalues, using inverse
iteration.

The maximum number of iterations allowed for each eigenvector is
specified by an internal parameter MAXITS (currently set to 5).

Although the eigenvectors are real, they are stored in a complex
array, which may be passed to ZUNMTR or ZUPMTR for back
transformation to the eigenvectors of a complex Hermitian matrix
which was reduced to tridiagonal form.

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `VectorD`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<VectorD>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of stein
[  [ Value type of VectorD ] [LAPACK routine] ]
[  [`float`][SSTEIN] ]
[  [`double`][DSTEIN] ]
[  [`complex<float>`][CSTEIN] ]
[  [`complex<double>`][ZSTEIN] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/computational/stein.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/computational/stein.hpp>
using namespace boost::numeric::bindings;

lapack::stein( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/single/sstein.f sstein.f], [@http://www.netlib.org/lapack/double/dstein.f dstein.f], [@http://www.netlib.org/lapack/complex/cstein.f cstein.f], and [@http://www.netlib.org/lapack/complex16/zstein.f zstein.f] at Netlib.

[endsect]
