[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section pptrs]

[heading Prototype]
There is one prototype of `pptrs` available, please see below.
``
pptrs( const MatrixAP& ap, MatrixB& b );
``


[heading Description]

`pptrs` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines SPPTRS, DPPTRS, CPPTRS, and ZPPTRS. 
`pptrs` solves a system of linear equations A*X = B with a Hermitian
positive definite matrix A in packed storage using the Cholesky
factorization A = U**H*U or A = L*L**H computed by ZPPTRF.

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixAP`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixAP>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of pptrs
[  [ Value type of MatrixAP ] [LAPACK routine] ]
[  [`float`][SPPTRS] ]
[  [`double`][DPPTRS] ]
[  [`complex<float>`][CPPTRS] ]
[  [`complex<double>`][ZPPTRS] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/computational/pptrs.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/computational/pptrs.hpp>
using namespace boost::numeric::bindings;

lapack::pptrs( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/single/spptrs.f spptrs.f], [@http://www.netlib.org/lapack/double/dpptrs.f dpptrs.f], [@http://www.netlib.org/lapack/complex/cpptrs.f cpptrs.f], and [@http://www.netlib.org/lapack/complex16/zpptrs.f zpptrs.f] at Netlib.

[endsect]
