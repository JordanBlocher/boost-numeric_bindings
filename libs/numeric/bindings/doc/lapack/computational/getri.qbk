[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section getri]

[heading Prototype]
There is one prototype of `getri` available, please see below.
``
getri( MatrixA& a, const VectorIPIV& ipiv );
``


[heading Description]

`getri` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines SGETRI, DGETRI, CGETRI, and ZGETRI. 
`getri` computes the inverse of a matrix using the LU factorization
computed by ZGETRF.

This method inverts U and then computes inv(A) by solving the system
inv(A)*L = inv(U) for inv(A).

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of getri
[  [ Value type of MatrixA ] [LAPACK routine] ]
[  [`float`][SGETRI] ]
[  [`double`][DGETRI] ]
[  [`complex<float>`][CGETRI] ]
[  [`complex<double>`][ZGETRI] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/computational/getri.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/computational/getri.hpp>
using namespace boost::numeric::bindings;

lapack::getri( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/single/sgetri.f sgetri.f], [@http://www.netlib.org/lapack/double/dgetri.f dgetri.f], [@http://www.netlib.org/lapack/complex/cgetri.f cgetri.f], and [@http://www.netlib.org/lapack/complex16/zgetri.f zgetri.f] at Netlib.

[endsect]
