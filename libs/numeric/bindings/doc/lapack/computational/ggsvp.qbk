[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section ggsvp]

[heading Prototype]
There is one prototype of `ggsvp` available, please see below.
``
ggsvp( const char jobu, const char jobv, const char jobq, MatrixA& a,
        MatrixB& b, const Scalar >, const Scalar >, int_t& k,
        int_t& l, MatrixU& u, MatrixV& v, MatrixQ& q );
``


[heading Description]

`ggsvp` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines SGGSVP, DGGSVP, CGGSVP, and ZGGSVP. 
`ggsvp` computes unitary matrices U, V and Q such that

N-K-L K L
U'*A*Q = K ( 0 A12 A13 ) if M-K-L >= 0;
L ( 0 0 A23 )
M-K-L ( 0 0 0 )

N-K-L K L
= K ( 0 A12 A13 ) if M-K-L < 0;
M-K ( 0 0 A23 )

N-K-L K L
V'*B*Q = L ( 0 0 B13 )
P-L ( 0 0 0 )

where the K-by-K matrix A12 and L-by-L matrix B13 are nonsingular
upper triangular; A23 is L-by-L upper triangular if M-K-L >= 0,
otherwise A23 is (M-K)-by-L upper trapezoidal. K+L = the effective
numerical rank of the (M+P)-by-N matrix (A',B')'. Z' denotes the
conjugate transpose of Z.

This decomposition is the preprocessing step for computing the
Generalized Singular Value Decomposition (GSVD), see subroutine
ZGGSVD.

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of ggsvp
[  [ Value type of MatrixA ] [LAPACK routine] ]
[  [`float`][SGGSVP] ]
[  [`double`][DGGSVP] ]
[  [`complex<float>`][CGGSVP] ]
[  [`complex<double>`][ZGGSVP] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/computational/ggsvp.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/computational/ggsvp.hpp>
using namespace boost::numeric::bindings;

lapack::ggsvp( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/single/sggsvp.f sggsvp.f], [@http://www.netlib.org/lapack/double/dggsvp.f dggsvp.f], [@http://www.netlib.org/lapack/complex/cggsvp.f cggsvp.f], and [@http://www.netlib.org/lapack/complex16/zggsvp.f zggsvp.f] at Netlib.

[endsect]
