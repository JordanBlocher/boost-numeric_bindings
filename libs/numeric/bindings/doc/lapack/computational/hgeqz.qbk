[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section hgeqz]

[heading Prototype]
There are two prototypes of `hgeqz` available, please see below.
``
hgeqz( const char job, const char compq, const char compz,
        const int_t ilo, MatrixH& h, MatrixT& t,
        VectorALPHAR& alphar, VectorALPHAI& alphai, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z );
``

``
hgeqz( const char job, const char compq, const char compz,
        const int_t ilo, MatrixH& h, MatrixT& t,
        VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q, MatrixZ& z );
``


[heading Description]

`hgeqz` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines SHGEQZ, DHGEQZ, CHGEQZ, and ZHGEQZ. 
`hgeqz` computes the eigenvalues of a complex matrix pair (H,T),
where H is an upper Hessenberg matrix and T is upper triangular,
using the single-shift QZ method.
Matrix pairs of this type are produced by the reduction to
generalized upper Hessenberg form of a complex matrix pair (A,B):

A = Q1*H*Z1**H, B = Q1*T*Z1**H,

as computed by ZGGHRD.

If JOB='S', then the Hessenberg-triangular pair (H,T) is
also reduced to generalized Schur form,

H = Q*S*Z**H, T = Q*P*Z**H,

where Q and Z are unitary matrices and S and P are upper triangular.

Optionally, the unitary matrix Q from the generalized Schur
factorization may be postmultiplied into an input matrix Q1, and the
unitary matrix Z may be postmultiplied into an input matrix Z1.
If Q1 and Z1 are the unitary matrices from ZGGHRD that reduced
the matrix pair (A,B) to generalized Hessenberg form, then the output
matrices Q1*Q and Z1*Z are the unitary factors from the generalized
Schur factorization of (A,B):

A = (Q1*Q)*S*(Z1*Z)**H, B = (Q1*Q)*P*(Z1*Z)**H.

To avoid overflow, eigenvalues of the matrix pair (H,T)
(equivalently, of (A,B)) are computed as a pair of complex values
(alpha,beta). If beta is nonzero, lambda = alpha / beta is an
eigenvalue of the generalized nonsymmetric eigenvalue problem (GNEP)
A*x = lambda*B*x
and if alpha is nonzero, mu = beta / alpha is an eigenvalue of the
alternate form of the GNEP
mu*A*y = B*y.
The values of alpha and beta for the i-th eigenvalue can be read
directly from the generalized Schur form: alpha = S(i,i),
beta = P(i,i).

Ref: C.B. Moler & G.W. Stewart, "An Algorithm for Generalized Matrix
Eigenvalue Problems", SIAM J. Numer. Anal., 10(1973),
pp. 241--256.

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixH`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixH>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of hgeqz
[  [ Value type of MatrixH ] [LAPACK routine] ]
[  [`float`][SHGEQZ] ]
[  [`double`][DHGEQZ] ]
[  [`complex<float>`][CHGEQZ] ]
[  [`complex<double>`][ZHGEQZ] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/computational/hgeqz.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/computational/hgeqz.hpp>
using namespace boost::numeric::bindings;

lapack::hgeqz( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/single/shgeqz.f shgeqz.f], [@http://www.netlib.org/lapack/double/dhgeqz.f dhgeqz.f], [@http://www.netlib.org/lapack/complex/chgeqz.f chgeqz.f], and [@http://www.netlib.org/lapack/complex16/zhgeqz.f zhgeqz.f] at Netlib.

[endsect]
