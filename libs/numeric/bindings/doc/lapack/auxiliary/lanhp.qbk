[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section lanhp]

[heading Prototype]
There is one prototype of `lanhp` available, please see below.
``
lanhp( const char norm, const MatrixAP& ap );
``


[heading Description]

`lanhp` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines CLANHP and ZLANHP. 
`lanhp` returns the value of the one norm, or the Frobenius norm, or
the infinity norm, or the element of largest absolute value of a
complex hermitian matrix A, supplied in packed form.

Description
===========

`lanhp` returns the value

`lanhp` = ( max(abs(A(i,j))), NORM = 'M' or 'm'
(
( norm1(A),  NORM = '1', 'O' or 'o'
(
( normI(A),  NORM = 'I' or 'i'
(
( normF(A),  NORM = 'F', 'f', 'E' or 'e'

where norm1 denotes the one norm of a matrix (maximum column sum),
normI denotes the infinity norm of a matrix (maximum row sum) and
normF denotes the Frobenius norm of a matrix (square root of sum of
squares). Note that max(abs(A(i,j))) is not a consistent matrix norm.

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixAP`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixAP>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of lanhp
[  [ Value type of MatrixAP ] [LAPACK routine] ]
[  [`complex<float>`][CLANHP] ]
[  [`complex<double>`][ZLANHP] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/auxiliary/lanhp.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/auxiliary/lanhp.hpp>
using namespace boost::numeric::bindings;

lapack::lanhp( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/complex/clanhp.f clanhp.f] and [@http://www.netlib.org/lapack/complex16/zlanhp.f zlanhp.f] at Netlib.

[endsect]
