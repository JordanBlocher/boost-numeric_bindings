[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section gegv]

[heading Prototype]
There are two prototypes of `gegv` available, please see below.
``
gegv( const char jobvl, const char jobvr, MatrixA& a, MatrixB& b,
        VectorALPHAR& alphar, VectorALPHAI& alphai, VectorBETA& beta,
        MatrixVL& vl, MatrixVR& vr );
``

``
gegv( const char jobvl, const char jobvr, MatrixA& a, MatrixB& b,
        VectorALPHA& alpha, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr );
``


[heading Description]

`gegv` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines SGEGV, DGEGV, CGEGV, and ZGEGV. 
This routine is deprecated and has been replaced by routine ZGGEV.

`gegv` computes the eigenvalues and, optionally, the left and/or right
eigenvectors of a complex matrix pair (A,B).
Given two square matrices A and B,
the generalized nonsymmetric eigenvalue problem (GNEP) is to find the
eigenvalues lambda and corresponding (non-zero) eigenvectors x such
that
A*x = lambda*B*x.

An alternate form is to find the eigenvalues mu and corresponding
eigenvectors y such that
mu*A*y = B*y.

These two forms are equivalent with mu = 1/lambda and x = y if
neither lambda nor mu is zero. In order to deal with the case that
lambda or mu is zero or small, two values alpha and beta are returned
for each eigenvalue, such that lambda = alpha/beta and
mu = beta/alpha.

The vectors x and y in the above equations are right eigenvectors of
the matrix pair (A,B). Vectors u and v satisfying
u**H*A = lambda*u**H*B or mu*v**H*A = v**H*B
are left eigenvectors of (A,B).

Note: this routine performs "full balancing" on A and B -- see
"Further Details", below.

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of gegv
[  [ Value type of MatrixA ] [LAPACK routine] ]
[  [`float`][SGEGV] ]
[  [`double`][DGEGV] ]
[  [`complex<float>`][CGEGV] ]
[  [`complex<double>`][ZGEGV] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/driver/gegv.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/driver/gegv.hpp>
using namespace boost::numeric::bindings;

lapack::gegv( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/single/sgegv.f sgegv.f], [@http://www.netlib.org/lapack/double/dgegv.f dgegv.f], [@http://www.netlib.org/lapack/complex/cgegv.f cgegv.f], and [@http://www.netlib.org/lapack/complex16/zgegv.f zgegv.f] at Netlib.

[endsect]
