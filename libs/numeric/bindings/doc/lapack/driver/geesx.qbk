[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section geesx]

[heading Prototype]
There are two prototypes of `geesx` available, please see below.
``
geesx( const char jobvs, const char sort, external_fp select,
        const char sense, MatrixA& a, int_t& sdim, VectorWR& wr,
        VectorWI& wi, MatrixVS& vs, Scalar >, Scalar > );
``

``
geesx( const char jobvs, const char sort, external_fp select,
        const char sense, MatrixA& a, int_t& sdim, VectorW& w,
        MatrixVS& vs, Scalar >, Scalar > );
``


[heading Description]

`geesx` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines SGEESX, DGEESX, CGEESX, and ZGEESX. 
`geesx` computes for an N-by-N complex nonsymmetric matrix A, the
eigenvalues, the Schur form T, and, optionally, the matrix of Schur
vectors Z. This gives the Schur factorization A = Z*T*(Z**H).

Optionally, it also orders the eigenvalues on the diagonal of the
Schur form so that selected eigenvalues are at the top left;
computes a reciprocal condition number for the average of the
selected eigenvalues (RCONDE); and computes a reciprocal condition
number for the right invariant subspace corresponding to the
selected eigenvalues (RCONDV). The leading columns of Z form an
orthonormal basis for this invariant subspace.

For further explanation of the reciprocal condition numbers RCONDE
and RCONDV, see Section 4.10 of the LAPACK Users' Guide (where
these quantities are called s and sep respectively).

A complex matrix is in Schur form if it is upper triangular.

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of geesx
[  [ Value type of MatrixA ] [LAPACK routine] ]
[  [`float`][SGEESX] ]
[  [`double`][DGEESX] ]
[  [`complex<float>`][CGEESX] ]
[  [`complex<double>`][ZGEESX] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/driver/geesx.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/driver/geesx.hpp>
using namespace boost::numeric::bindings;

lapack::geesx( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/single/sgeesx.f sgeesx.f], [@http://www.netlib.org/lapack/double/dgeesx.f dgeesx.f], [@http://www.netlib.org/lapack/complex/cgeesx.f cgeesx.f], and [@http://www.netlib.org/lapack/complex16/zgeesx.f zgeesx.f] at Netlib.

[endsect]
