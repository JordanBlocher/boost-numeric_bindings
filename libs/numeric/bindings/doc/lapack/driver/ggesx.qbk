[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section ggesx]

[heading Prototype]
There are two prototypes of `ggesx` available, please see below.
``
ggesx( const char jobvsl, const char jobvsr, const char sort,
        external_fp selctg, const char sense, MatrixA& a, MatrixB& b,
        int_t& sdim, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixVSL& vsl, MatrixVSR& vsr,
        VectorRCONDE& rconde, VectorRCONDV& rcondv );
``

``
ggesx( const char jobvsl, const char jobvsr, const char sort,
        external_fp selctg, const char sense, MatrixA& a, MatrixB& b,
        int_t& sdim, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVSL& vsl, MatrixVSR& vsr, VectorRCONDE& rconde,
        VectorRCONDV& rcondv );
``


[heading Description]

`ggesx` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines SGGESX, DGGESX, CGGESX, and ZGGESX. 
`ggesx` computes for a pair of N-by-N complex nonsymmetric matrices
(A,B), the generalized eigenvalues, the complex Schur form (S,T),
and, optionally, the left and/or right matrices of Schur vectors (VSL
and VSR). This gives the generalized Schur factorization

(A,B) = ( (VSL) S (VSR)**H, (VSL) T (VSR)**H )

where (VSR)**H is the conjugate-transpose of VSR.

Optionally, it also orders the eigenvalues so that a selected cluster
of eigenvalues appears in the leading diagonal blocks of the upper
triangular matrix S and the upper triangular matrix T; computes
a reciprocal condition number for the average of the selected
eigenvalues (RCONDE); and computes a reciprocal condition number for
the right and left deflating subspaces corresponding to the selected
eigenvalues (RCONDV). The leading columns of VSL and VSR then form
an orthonormal basis for the corresponding left and right eigenspaces
(deflating subspaces).

A generalized eigenvalue for a pair of matrices (A,B) is a scalar w
or a ratio alpha/beta = w, such that A - w*B is singular. It is
usually represented as the pair (alpha,beta), as there is a
reasonable interpretation for beta=0 or for both being zero.

A pair of matrices (S,T) is in generalized complex Schur form if T is
upper triangular with non-negative diagonal and S is upper
triangular.

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of ggesx
[  [ Value type of MatrixA ] [LAPACK routine] ]
[  [`float`][SGGESX] ]
[  [`double`][DGGESX] ]
[  [`complex<float>`][CGGESX] ]
[  [`complex<double>`][ZGGESX] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/driver/ggesx.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/driver/ggesx.hpp>
using namespace boost::numeric::bindings;

lapack::ggesx( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/single/sggesx.f sggesx.f], [@http://www.netlib.org/lapack/double/dggesx.f dggesx.f], [@http://www.netlib.org/lapack/complex/cggesx.f cggesx.f], and [@http://www.netlib.org/lapack/complex16/zggesx.f zggesx.f] at Netlib.

[endsect]
