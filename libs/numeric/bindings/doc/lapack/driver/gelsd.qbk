[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section gelsd]

[heading Prototype]
There are two prototypes of `gelsd` available, please see below.
``
gelsd( MatrixA& a, MatrixB& b, VectorS& s, const Scalar >,
        int_t& rank );
``

``
gelsd( const MatrixA& a, MatrixB& b, VectorS& s, const Scalar >,
        int_t& rank );
``


[heading Description]

`gelsd` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines SGELSD, DGELSD, CGELSD, and ZGELSD. 
`gelsd` computes the minimum-norm solution to a real linear least
squares problem:
minimize 2-norm(| b - A*x |)
using the singular value decomposition (SVD) of A. A is an M-by-N
matrix which may be rank-deficient.

Several right hand side vectors b and solution vectors x can be
handled in a single call; they are stored as the columns of the
M-by-NRHS right hand side matrix B and the N-by-NRHS solution
matrix X.

The problem is solved in three steps:
(1) Reduce the coefficient matrix A to bidiagonal form with
Householder tranformations, reducing the original problem
into a "bidiagonal least squares problem" (BLS)
(2) Solve the BLS using a divide and conquer approach.
(3) Apply back all the Householder tranformations to solve
the original least squares problem.

The effective rank of A is determined by treating as zero those
singular values which are less than RCOND times the largest singular
value.

The divide and conquer algorithm makes very mild assumptions about
floating point arithmetic. It will work on machines with a guard
digit in add/subtract, or on those binary machines without guard
digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or
Cray-2. It could conceivably fail on hexadecimal or decimal machines
without guard digits, but we know of none.

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of gelsd
[  [ Value type of MatrixA ] [LAPACK routine] ]
[  [`float`][SGELSD] ]
[  [`double`][DGELSD] ]
[  [`complex<float>`][CGELSD] ]
[  [`complex<double>`][ZGELSD] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/driver/gelsd.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/driver/gelsd.hpp>
using namespace boost::numeric::bindings;

lapack::gelsd( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/single/sgelsd.f sgelsd.f], [@http://www.netlib.org/lapack/double/dgelsd.f dgelsd.f], [@http://www.netlib.org/lapack/complex/cgelsd.f cgelsd.f], and [@http://www.netlib.org/lapack/complex16/zgelsd.f zgelsd.f] at Netlib.

[endsect]
