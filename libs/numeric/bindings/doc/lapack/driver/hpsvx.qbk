[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section hpsvx]

[heading Prototype]
There is one prototype of `hpsvx` available, please see below.
``
hpsvx( const char fact, const MatrixAP& ap, MatrixAFP& afp,
        VectorIPIV& ipiv, const MatrixB& b, MatrixX& x, Scalar >,
        VectorFERR& ferr, VectorBERR& berr );
``


[heading Description]

`hpsvx` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines SSPSVX, DSPSVX, CHPSVX, and ZHPSVX. 
`hpsvx` uses the diagonal pivoting factorization A = U*D*U**H or
A = L*D*L**H to compute the solution to a complex system of linear
equations A * X = B, where A is an N-by-N Hermitian matrix stored
in packed format and X and B are N-by-NRHS matrices.

Error bounds on the solution and a condition estimate are also
provided.

Description
===========

The following steps are performed:

1. If FACT = 'N', the diagonal pivoting method is used to factor A as
A = U * D * U**H, if UPLO = 'U', or
A = L * D * L**H, if UPLO = 'L',
where U (or L) is a product of permutation and unit upper (lower)
triangular matrices and D is Hermitian and block diagonal with
1-by-1 and 2-by-2 diagonal blocks.

2. If some D(i,i)=0, so that D is exactly singular, then the routine
returns with INFO = i. Otherwise, the factored form of A is used
to estimate the condition number of the matrix A. If the
reciprocal of the condition number is less than machine precision,
INFO = N+1 is returned as a warning, but the routine still goes on
to solve for X and compute error bounds as described below.

3. The system of equations is solved for X using the factored form
of A.

4. Iterative refinement is applied to improve the computed solution
matrix and calculate error bounds and backward error estimates
for it.

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixAP`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixAP>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of hpsvx
[  [ Value type of MatrixAP ] [LAPACK routine] ]
[  [`float`][SSPSVX] ]
[  [`double`][DSPSVX] ]
[  [`complex<float>`][CHPSVX] ]
[  [`complex<double>`][ZHPSVX] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/driver/hpsvx.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/driver/hpsvx.hpp>
using namespace boost::numeric::bindings;

lapack::hpsvx( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/single/sspsvx.f sspsvx.f], [@http://www.netlib.org/lapack/double/dspsvx.f dspsvx.f], [@http://www.netlib.org/lapack/complex/chpsvx.f chpsvx.f], and [@http://www.netlib.org/lapack/complex16/zhpsvx.f zhpsvx.f] at Netlib.

[endsect]
