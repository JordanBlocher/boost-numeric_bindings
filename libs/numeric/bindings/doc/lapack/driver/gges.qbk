[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section gges]

[heading Prototype]
There are two prototypes of `gges` available, please see below.
``
gges( const char jobvsl, const char jobvsr, const char sort,
        external_fp selctg, MatrixA& a, MatrixB& b, int_t& sdim,
        VectorALPHAR& alphar, VectorALPHAI& alphai, VectorBETA& beta,
        MatrixVSL& vsl, MatrixVSR& vsr );
``

``
gges( const char jobvsl, const char jobvsr, const char sort,
        external_fp selctg, MatrixA& a, MatrixB& b, int_t& sdim,
        VectorALPHA& alpha, VectorBETA& beta, MatrixVSL& vsl, MatrixVSR& vsr );
``


[heading Description]

`gges` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines SGGES, DGGES, CGGES, and ZGGES. 
`gges` computes for a pair of N-by-N complex nonsymmetric matrices
(A,B), the generalized eigenvalues, the generalized complex Schur
form (S, T), and optionally left and/or right Schur vectors (VSL
and VSR). This gives the generalized Schur factorization

(A,B) = ( (VSL)*S*(VSR)**H, (VSL)*T*(VSR)**H )

where (VSR)**H is the conjugate-transpose of VSR.

Optionally, it also orders the eigenvalues so that a selected cluster
of eigenvalues appears in the leading diagonal blocks of the upper
triangular matrix S and the upper triangular matrix T. The leading
columns of VSL and VSR then form an unitary basis for the
corresponding left and right eigenspaces (deflating subspaces).

(If only the generalized eigenvalues are needed, use the driver
ZGGEV instead, which is faster.)

A generalized eigenvalue for a pair of matrices (A,B) is a scalar w
or a ratio alpha/beta = w, such that A - w*B is singular. It is
usually represented as the pair (alpha,beta), as there is a
reasonable interpretation for beta=0, and even for both being zero.

A pair of matrices (S,T) is in generalized complex Schur form if S
and T are upper triangular and, in addition, the diagonal elements
of T are non-negative real numbers.

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of gges
[  [ Value type of MatrixA ] [LAPACK routine] ]
[  [`float`][SGGES] ]
[  [`double`][DGGES] ]
[  [`complex<float>`][CGGES] ]
[  [`complex<double>`][ZGGES] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/driver/gges.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/driver/gges.hpp>
using namespace boost::numeric::bindings;

lapack::gges( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/single/sgges.f sgges.f], [@http://www.netlib.org/lapack/double/dgges.f dgges.f], [@http://www.netlib.org/lapack/complex/cgges.f cgges.f], and [@http://www.netlib.org/lapack/complex16/zgges.f zgges.f] at Netlib.

[endsect]
