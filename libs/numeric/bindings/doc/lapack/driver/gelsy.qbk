[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section gelsy]

[heading Prototype]
There is one prototype of `gelsy` available, please see below.
``
gelsy( MatrixA& a, MatrixB& b, VectorJPVT& jpvt, const Scalar >,
        int_t& rank );
``


[heading Description]

`gelsy` (short for $FRIENDLY_NAME) provides a C++
interface to LAPACK routines SGELSY, DGELSY, CGELSY, and ZGELSY. 
`gelsy` computes the minimum-norm solution to a complex linear least
squares problem:
minimize || A * X - B ||
using a complete orthogonal factorization of A. A is an M-by-N
matrix which may be rank-deficient.

Several right hand side vectors b and solution vectors x can be
handled in a single call; they are stored as the columns of the
M-by-NRHS right hand side matrix B and the N-by-NRHS solution
matrix X.

The routine first computes a QR factorization with column pivoting:
A * P = Q * [ R11 R12 ]
[ 0 R22 ]
with R11 defined as the largest leading submatrix whose estimated
condition number is less than 1/RCOND. The order of R11, RANK,
is the effective rank of A.

Then, R22 is considered to be negligible, and R12 is annihilated
by unitary transformations from the right, arriving at the
complete orthogonal factorization:
A * P = Q * [ T11 0 ] * Z
[ 0 0 ]
The minimum-norm solution is then
X = P * Z' [ inv(T11)*Q1'*B ]
[ 0 ]
where Q1 consists of the first RANK columns of Q.

This routine is basically identical to the original xGELSX except
three differences:
o The permutation of matrix B (the right hand side) is faster and
more simple.
o The call to the subroutine xGEQPF has been substituted by the
the call to the subroutine xGEQP3. This subroutine is a Blas-3
version of the QR factorization with column pivoting.
o Matrix B (the right hand side) is updated with Blas-3.

The selection of the LAPACK routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
The dispatching table below illustrates to which specific routine 
the code path will be generated. 

[table Dispatching of gelsy
[  [ Value type of MatrixA ] [LAPACK routine] ]
[  [`float`][SGELSY] ]
[  [`double`][DGELSY] ]
[  [`complex<float>`][CGELSY] ]
[  [`complex<double>`][ZGELSY] ]

]


[heading Definition]
Defined in header [headerref boost/numeric/bindings/lapack/driver/gelsy.hpp].


[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]


[heading Complexity]


[heading Example]
``
#include <boost/numeric/bindings/lapack/driver/gelsy.hpp>
using namespace boost::numeric::bindings;

lapack::gelsy( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``



[heading Notes]


[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/lapack/single/sgelsy.f sgelsy.f], [@http://www.netlib.org/lapack/double/dgelsy.f dgelsy.f], [@http://www.netlib.org/lapack/complex/cgelsy.f cgelsy.f], and [@http://www.netlib.org/lapack/complex16/zgelsy.f zgelsy.f] at Netlib.

[endsect]
