[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section tpsv]

[heading Prototype]
There is one prototype of `tpsv` available, please see below.
``
tpsv( const MatrixAP& ap, VectorX& x );
``


[heading Description]

`tpsv` (short for triangular, packed,  solve system of equations) provides a C++
interface to BLAS routines STPSV, DTPSV, CTPSV, and ZTPSV. 
`tpsv` solves one of the systems of equations

A*x = b, or A**T*x = b, or A**H*x = b,

where b and x are n element vectors and A is an n by n unit, or
non-unit, upper or lower triangular matrix, supplied in packed form.

No test for singularity or near-singularity is included in this
routine. Such tests must be performed before calling this routine.

The selection of the BLAS routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixAP`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixAP>::type`.
Table X below illustrates to which specific routine this dispatching will take place. 

[table Dispatching of tpsv.
[  [ Value type of MatrixAP ] [BLAS routine] [CBLAS routine] [CUBLAS routine] ]
[  [`float`][STPSV][cblas_stpsv][cublasStpsv] ]
[  [`double`][DTPSV][cblas_dtpsv][cublasDtpsv] ]
[  [`complex<float>`][CTPSV][cblas_ctpsv][cublasCtpsv] ]
[  [`complex<double>`][ZTPSV][cblas_ztpsv][cublasZtpsv] ]

]

The original routines STPSV, DTPSV, CTPSV, and ZTPSV have seven arguments,
whereas `tpsv` requires two arguments.

[table Deduction of arguments of tpsv.
]

[heading Definition]
Defined in header [headerref boost/numeric/bindings/blas/level2/tpsv.hpp].

[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]

[heading Complexity]

[heading Example]
``
#include <boost/numeric/bindings/blas/level2/tpsv.hpp>
using namespace boost::numeric::bindings;

blas::tpsv( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``

[heading Notes]

[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/blas/stpsv.f stpsv.f], [@http://www.netlib.org/blas/dtpsv.f dtpsv.f], [@http://www.netlib.org/blas/ctpsv.f ctpsv.f], and [@http://www.netlib.org/blas/ztpsv.f ztpsv.f] at Netlib.

[endsect]
