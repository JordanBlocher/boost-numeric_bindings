[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section gbmv]

[heading Prototype]
There are two prototypes of `gbmv` available, please see below.
``
gbmv( const Scalar >, const MatrixA& a, const VectorX& x,
        const Scalar >, VectorY& y );
``

``
gbmv( const Scalar alpha, const MatrixA& a, const VectorX& x,
        const Scalar beta, VectorY& y );
``


[heading Description]

`gbmv` (short for generic, banded,  matrix-vector operation) provides a C++
interface to BLAS routines SGBMV, DGBMV, CGBMV, and ZGBMV. 
`gbmv` performs one of the matrix-vector operations

y := alpha*A*x + beta*y, or y := alpha*A**T*x + beta*y, or

y := alpha*A**H*x + beta*y,

where alpha and beta are scalars, x and y are vectors and A is an
m by n band matrix, with kl sub-diagonals and ku super-diagonals.

The selection of the BLAS routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
Table X below illustrates to which specific routine this dispatching will take place. 

[table Dispatching of gbmv.
[  [ Value type of MatrixA ] [BLAS routine] [CBLAS routine] [CUBLAS routine] ]
[  [`float`][SGBMV][cblas_sgbmv][cublasSgbmv] ]
[  [`double`][DGBMV][cblas_dgbmv][cublasDgbmv] ]
[  [`complex<float>`][CGBMV][cblas_cgbmv][cublasCgbmv] ]
[  [`complex<double>`][ZGBMV][cblas_zgbmv][cublasZgbmv] ]

]

The original routines SGBMV, DGBMV, CGBMV, and ZGBMV have thirteen arguments,
whereas `gbmv` requires five arguments.

[table Deduction of arguments of gbmv.
]

[heading Definition]
Defined in header [headerref boost/numeric/bindings/blas/level2/gbmv.hpp].

[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]

[heading Complexity]

[heading Example]
``
#include <boost/numeric/bindings/blas/level2/gbmv.hpp>
using namespace boost::numeric::bindings;

blas::gbmv( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``

[heading Notes]

[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/blas/sgbmv.f sgbmv.f], [@http://www.netlib.org/blas/dgbmv.f dgbmv.f], [@http://www.netlib.org/blas/cgbmv.f cgbmv.f], and [@http://www.netlib.org/blas/zgbmv.f zgbmv.f] at Netlib.

[endsect]
