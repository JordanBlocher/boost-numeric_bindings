[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section tbsv]

[heading Prototype]
There is one prototype of `tbsv` available, please see below.
``
tbsv( const int_t k, const MatrixA& a, VectorX& x );
``


[heading Description]

`tbsv` (short for triangular, banded,  solve system of equations) provides a C++
interface to BLAS routines STBSV, DTBSV, CTBSV, and ZTBSV. 
`tbsv` solves one of the systems of equations

A*x = b, or A**T*x = b, or A**H*x = b,

where b and x are n element vectors and A is an n by n unit, or
non-unit, upper or lower triangular band matrix, with ( k + 1 )
diagonals.

No test for singularity or near-singularity is included in this
routine. Such tests must be performed before calling this routine.

The selection of the BLAS routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
Table X below illustrates to which specific routine this dispatching will take place. 

[table Dispatching of tbsv.
[  [ Value type of MatrixA ] [BLAS routine] [CBLAS routine] [CUBLAS routine] ]
[  [`float`][STBSV][cblas_stbsv][cublasStbsv] ]
[  [`double`][DTBSV][cblas_dtbsv][cublasDtbsv] ]
[  [`complex<float>`][CTBSV][cblas_ctbsv][cublasCtbsv] ]
[  [`complex<double>`][ZTBSV][cblas_ztbsv][cublasZtbsv] ]

]

The original routines STBSV, DTBSV, CTBSV, and ZTBSV have nine arguments,
whereas `tbsv` requires three arguments.

[table Deduction of arguments of tbsv.
]

[heading Definition]
Defined in header [headerref boost/numeric/bindings/blas/level2/tbsv.hpp].

[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]

[heading Complexity]

[heading Example]
``
#include <boost/numeric/bindings/blas/level2/tbsv.hpp>
using namespace boost::numeric::bindings;

blas::tbsv( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``

[heading Notes]

[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/blas/stbsv.f stbsv.f], [@http://www.netlib.org/blas/dtbsv.f dtbsv.f], [@http://www.netlib.org/blas/ctbsv.f ctbsv.f], and [@http://www.netlib.org/blas/ztbsv.f ztbsv.f] at Netlib.

[endsect]
