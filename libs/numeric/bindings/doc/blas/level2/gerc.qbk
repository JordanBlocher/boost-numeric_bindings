[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section gerc]

[heading Prototype]
There is one prototype of `gerc` available, please see below.
``
gerc( const Scalar alpha, const VectorX& x, const VectorY& y,
        MatrixA& a );
``


[heading Description]

`gerc` (short for TODO) provides a C++
interface to BLAS routines CGERC and ZGERC. 
`gerc` performs the rank 1 operation

A := alpha*x*y**H + A,

where alpha is a scalar, x is an m element vector, y is an n element
vector and A is an m by n matrix.

The selection of the BLAS routine is done during compile-time, 
and is determined by the type of values contained in type `VectorX`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<VectorX>::type`.
Table X below illustrates to which specific routine this dispatching will take place. 

[table Dispatching of gerc.
[  [ Value type of VectorX ] [BLAS routine] [CBLAS routine] [CUBLAS routine] ]
[  [`complex<float>`][CGERC][cblas_cgerc][cublasCgerc] ]
[  [`complex<double>`][ZGERC][cblas_zgerc][cublasZgerc] ]

]

The original routines CGERC and ZGERC have nine arguments,
whereas `gerc` requires four arguments.

[table Deduction of arguments of gerc.
]

[heading Definition]
Defined in header [headerref boost/numeric/bindings/blas/level2/gerc.hpp].

[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]

[heading Complexity]

[heading Example]
``
#include <boost/numeric/bindings/blas/level2/gerc.hpp>
using namespace boost::numeric::bindings;

blas::gerc( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``

[heading Notes]

[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/blas/cgerc.f cgerc.f] and [@http://www.netlib.org/blas/zgerc.f zgerc.f] at Netlib.

[endsect]
