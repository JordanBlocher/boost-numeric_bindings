[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section sbmv]

[heading Prototype]
There is one prototype of `sbmv` available, please see below.
``
sbmv( const Scalar >, const MatrixA& a, const VectorX& x,
        const Scalar >, VectorY& y );
``


[heading Description]

`sbmv` (short for symmetric, banded,  matrix-vector operation) provides a C++
interface to BLAS routines SSBMV and DSBMV. 
`sbmv` performs the matrix-vector operation

y := alpha*A*x + beta*y,

where alpha and beta are scalars, x and y are n element vectors and
A is an n by n symmetric band matrix, with k super-diagonals.

The selection of the BLAS routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
Table X below illustrates to which specific routine this dispatching will take place. 

[table Dispatching of sbmv.
[  [ Value type of MatrixA ] [BLAS routine] [CBLAS routine] [CUBLAS routine] ]
[  [`float`][SSBMV][cblas_ssbmv][cublasSsbmv] ]
[  [`double`][DSBMV][cblas_dsbmv][cublasDsbmv] ]

]

The original routines SSBMV and DSBMV have eleven arguments,
whereas `sbmv` requires five arguments.

[table Deduction of arguments of sbmv.
]

[heading Definition]
Defined in header [headerref boost/numeric/bindings/blas/level2/sbmv.hpp].

[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]

[heading Complexity]

[heading Example]
``
#include <boost/numeric/bindings/blas/level2/sbmv.hpp>
using namespace boost::numeric::bindings;

blas::sbmv( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``

[heading Notes]

[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/blas/ssbmv.f ssbmv.f] and [@http://www.netlib.org/blas/dsbmv.f dsbmv.f] at Netlib.

[endsect]
