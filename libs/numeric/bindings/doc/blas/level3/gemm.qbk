[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section gemm]

[heading Prototype]
There are two prototypes of `gemm` available, please see below.
``
gemm( const Scalar >, const MatrixA& a, const MatrixB& b,
        const Scalar >, MatrixC& c );
``

``
gemm( const Scalar alpha, const MatrixA& a, const MatrixB& b,
        const Scalar beta, MatrixC& c );
``


[heading Description]

`gemm` (short for generic matrix-matrix operation) provides a C++
interface to BLAS routines SGEMM, DGEMM, CGEMM, and ZGEMM. 
`gemm` performs one of the matrix-matrix operations

C := alpha*op( A )*op( B ) + beta*C,

where op( X ) is one of

op( X ) = X or op( X ) = X**T or op( X ) = X**H,

alpha and beta are scalars, and A, B and C are matrices, with op( A )
an m by k matrix, op( B ) a k by n matrix and C an m by n matrix.

The selection of the BLAS routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
Table X below illustrates to which specific routine this dispatching will take place. 

[table Dispatching of gemm.
[  [ Value type of MatrixA ] [BLAS routine] [CBLAS routine] [CUBLAS routine] ]
[  [`float`][SGEMM][cblas_sgemm][cublasSgemm] ]
[  [`double`][DGEMM][cblas_dgemm][cublasDgemm] ]
[  [`complex<float>`][CGEMM][cblas_cgemm][cublasCgemm] ]
[  [`complex<double>`][ZGEMM][cblas_zgemm][cublasZgemm] ]

]

The original routines SGEMM, DGEMM, CGEMM, and ZGEMM have thirteen arguments,
whereas `gemm` requires five arguments.

[table Deduction of arguments of gemm.
]

[heading Definition]
Defined in header [headerref boost/numeric/bindings/blas/level3/gemm.hpp].

[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]

[heading Complexity]

[heading Example]
``
#include <boost/numeric/bindings/blas/level3/gemm.hpp>
using namespace boost::numeric::bindings;

blas::gemm( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``

[heading Notes]

[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/blas/sgemm.f sgemm.f], [@http://www.netlib.org/blas/dgemm.f dgemm.f], [@http://www.netlib.org/blas/cgemm.f cgemm.f], and [@http://www.netlib.org/blas/zgemm.f zgemm.f] at Netlib.

[endsect]
