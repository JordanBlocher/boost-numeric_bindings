[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section hemm]

[heading Prototype]
There are two prototypes of `hemm` available, please see below.
``
hemm( const Side side, const Scalar >, const MatrixA& a,
        const MatrixB& b, const Scalar >, MatrixC& c );
``

``
hemm( const Side side, const Scalar alpha, const MatrixA& a,
        const MatrixB& b, const Scalar beta, MatrixC& c );
``


[heading Description]

`hemm` (short for hermitian matrix-matrix operation) provides a C++
interface to BLAS routines SSYMM, DSYMM, CHEMM, and ZHEMM. 
`hemm` performs one of the matrix-matrix operations

C := alpha*A*B + beta*C,

or

C := alpha*B*A + beta*C,

where alpha and beta are scalars, A is an hermitian matrix and B and
C are m by n matrices.

The selection of the BLAS routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
Table X below illustrates to which specific routine this dispatching will take place. 

[table Dispatching of hemm.
[  [ Value type of MatrixA ] [BLAS routine] [CBLAS routine] [CUBLAS routine] ]
[  [`float`][SSYMM][cblas_ssymm][cublasSsymm] ]
[  [`double`][DSYMM][cblas_dsymm][cublasDsymm] ]
[  [`complex<float>`][CHEMM][cblas_chemm][cublasChemm] ]
[  [`complex<double>`][ZHEMM][cblas_zhemm][cublasZhemm] ]

]

The original routines SSYMM, DSYMM, CHEMM, and ZHEMM have twelve arguments,
whereas `hemm` requires six arguments.

[table Deduction of arguments of hemm.
]

[heading Definition]
Defined in header [headerref boost/numeric/bindings/blas/level3/hemm.hpp].

[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]

[heading Complexity]

[heading Example]
``
#include <boost/numeric/bindings/blas/level3/hemm.hpp>
using namespace boost::numeric::bindings;

blas::hemm( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``

[heading Notes]

[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/blas/ssymm.f ssymm.f], [@http://www.netlib.org/blas/dsymm.f dsymm.f], [@http://www.netlib.org/blas/chemm.f chemm.f], and [@http://www.netlib.org/blas/zhemm.f zhemm.f] at Netlib.

[endsect]
