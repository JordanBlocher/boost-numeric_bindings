[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section trmm]

[heading Prototype]
There are two prototypes of `trmm` available, please see below.
``
trmm( const Side side, const Scalar >, const MatrixA& a, MatrixB& b );
``

``
trmm( const Side side, const Scalar alpha, const MatrixA& a,
        MatrixB& b );
``


[heading Description]

`trmm` (short for triangular matrix-matrix operation) provides a C++
interface to BLAS routines STRMM, DTRMM, CTRMM, and ZTRMM. 
`trmm` performs one of the matrix-matrix operations

B := alpha*op( A )*B, or B := alpha*B*op( A )

where alpha is a scalar, B is an m by n matrix, A is a unit, or
non-unit, upper or lower triangular matrix and op( A ) is one of

op( A ) = A or op( A ) = A**T or op( A ) = A**H.

The selection of the BLAS routine is done during compile-time, 
and is determined by the type of values contained in type `MatrixA`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<MatrixA>::type`.
Table X below illustrates to which specific routine this dispatching will take place. 

[table Dispatching of trmm.
[  [ Value type of MatrixA ] [BLAS routine] [CBLAS routine] [CUBLAS routine] ]
[  [`float`][STRMM][cblas_strmm][cublasStrmm] ]
[  [`double`][DTRMM][cblas_dtrmm][cublasDtrmm] ]
[  [`complex<float>`][CTRMM][cblas_ctrmm][cublasCtrmm] ]
[  [`complex<double>`][ZTRMM][cblas_ztrmm][cublasZtrmm] ]

]

The original routines STRMM, DTRMM, CTRMM, and ZTRMM have eleven arguments,
whereas `trmm` requires four arguments.

[table Deduction of arguments of trmm.
]

[heading Definition]
Defined in header [headerref boost/numeric/bindings/blas/level3/trmm.hpp].

[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]

[heading Complexity]

[heading Example]
``
#include <boost/numeric/bindings/blas/level3/trmm.hpp>
using namespace boost::numeric::bindings;

blas::trmm( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``

[heading Notes]

[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/blas/strmm.f strmm.f], [@http://www.netlib.org/blas/dtrmm.f dtrmm.f], [@http://www.netlib.org/blas/ctrmm.f ctrmm.f], and [@http://www.netlib.org/blas/ztrmm.f ztrmm.f] at Netlib.

[endsect]
