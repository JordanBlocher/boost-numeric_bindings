[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section asum]

[heading Prototype]
There is one prototype of `asum` available, please see below.
``
asum( const VectorX& x );
``


[heading Description]

`asum` (short for absolute sum) provides a C++
interface to BLAS routines SASUM, DASUM, SCASUM, and DZASUM. 


The selection of the BLAS routine is done during compile-time, 
and is determined by the type of values contained in type `VectorX`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<VectorX>::type`.
Table X below illustrates to which specific routine this dispatching will take place. 

[table Dispatching of asum.
[  [ Value type of VectorX ] [BLAS routine] [CBLAS routine] [CUBLAS routine] ]
[  [`float`][SASUM][cblas_sasum][cublasSasum] ]
[  [`double`][DASUM][cblas_dasum][cublasDasum] ]
[  [`complex<float>`][SCASUM][cblas_scasum][cublasScasum] ]
[  [`complex<double>`][DZASUM][cblas_dzasum][cublasDzasum] ]

]

The original routines SASUM, DASUM, SCASUM, and DZASUM have three arguments,
whereas `asum` requires one arguments.

[table Deduction of arguments of asum.
]

[heading Definition]
Defined in header [headerref boost/numeric/bindings/blas/level1/asum.hpp].

[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]

[heading Complexity]

[heading Example]
``
#include <boost/numeric/bindings/blas/level1/asum.hpp>
using namespace boost::numeric::bindings;

blas::asum( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``

[heading Notes]

[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/blas/sasum.f sasum.f], [@http://www.netlib.org/blas/dasum.f dasum.f], [@http://www.netlib.org/blas/scasum.f scasum.f], and [@http://www.netlib.org/blas/dzasum.f dzasum.f] at Netlib.

[endsect]
