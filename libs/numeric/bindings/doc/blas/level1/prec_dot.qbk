[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section prec_dot]

[heading Prototype]
There is one prototype of `prec_dot` available, please see below.
``
prec_dot( const VectorX& x, const VectorY& y );
``


[heading Description]

`prec_dot` (short for TODO) provides a C++
interface to BLAS routines DSDOT. 
precision accumulation and result.

Returns D.P. dot product accumulated in D.P., for S.P. SX and SY
`prec_dot` = sum for I = 0 to N-1 of SX(LX+I*INCX) * SY(LY+I*INCY),
where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is
defined in a similar way using INCY.

The selection of the BLAS routine is done during compile-time, 
and is determined by the type of values contained in type `VectorX`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<VectorX>::type`.
Table X below illustrates to which specific routine this dispatching will take place. 

[table Dispatching of prec_dot.
[  [ Value type of VectorX ] [BLAS routine] [CBLAS routine] [CUBLAS routine] ]
[  [`double`][DSDOT][cblas_dsdot][Unavailable] ]

]

The original routines DSDOT have five arguments,
whereas `prec_dot` requires two arguments.

[table Deduction of arguments of prec_dot.
]

[heading Definition]
Defined in header [headerref boost/numeric/bindings/blas/level1/prec_dot.hpp].

[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]

[heading Complexity]

[heading Example]
``
#include <boost/numeric/bindings/blas/level1/prec_dot.hpp>
using namespace boost::numeric::bindings;

blas::prec_dot( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``

[heading Notes]

[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/blas/dsdot.f dsdot.f] at Netlib.

[endsect]
