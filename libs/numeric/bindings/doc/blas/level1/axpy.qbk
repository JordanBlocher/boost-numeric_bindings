[/ 

THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DO NOT EDIT!

]

[section axpy]

[heading Prototype]
There are two prototypes of `axpy` available, please see below.
``
axpy( const Scalar >, const VectorX& x, VectorY& y );
``

``
axpy( const Scalar a, const VectorX& x, VectorY& y );
``


[heading Description]

`axpy` (short for a times x plus y) provides a C++
interface to BLAS routines SAXPY, DAXPY, CAXPY, and ZAXPY. 


The selection of the BLAS routine is done during compile-time, 
and is determined by the type of values contained in type `VectorX`.
The type of values is obtained through the `value_type` meta-function
 `typename value_type<VectorX>::type`.
Table X below illustrates to which specific routine this dispatching will take place. 

[table Dispatching of axpy.
[  [ Value type of VectorX ] [BLAS routine] [CBLAS routine] [CUBLAS routine] ]
[  [`float`][SAXPY][cblas_saxpy][cublasSaxpy] ]
[  [`double`][DAXPY][cblas_daxpy][cublasDaxpy] ]
[  [`complex<float>`][CAXPY][cblas_caxpy][cublasCaxpy] ]
[  [`complex<double>`][ZAXPY][cblas_zaxpy][cublasZaxpy] ]

]

The original routines SAXPY, DAXPY, CAXPY, and ZAXPY have six arguments,
whereas `axpy` requires three arguments.

[table Deduction of arguments of axpy.
]

[heading Definition]
Defined in header [headerref boost/numeric/bindings/blas/level1/axpy.hpp].

[heading Parameters or Requirements on Types]

[variablelist Parameters
    [[MatrixA] [The definition of term 1]]
    [[MatrixB] [The definition of term 2]]
    [[MatrixC] [
    The definition of term 3.

    Definitions may contain paragraphs.
    ]]
]

[heading Complexity]

[heading Example]
``
#include <boost/numeric/bindings/blas/level1/axpy.hpp>
using namespace boost::numeric::bindings;

blas::axpy( x, y, z );

``

this will output

``
[5] 0 1 2 3 4 5
``

[heading Notes]

[heading See Also]

* Originating Fortran source files [@http://www.netlib.org/blas/saxpy.f saxpy.f], [@http://www.netlib.org/blas/daxpy.f daxpy.f], [@http://www.netlib.org/blas/caxpy.f caxpy.f], and [@http://www.netlib.org/blas/zaxpy.f zaxpy.f] at Netlib.

[endsect]
