$TEMPLATE[blas.hpp]
//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_$GROUPNAME_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_$GROUPNAME_HPP

$INCLUDES

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

//$DESCRIPTION

// overloaded functions to call blas
namespace detail {
$OVERLOADS}

$LEVEL1

}}}} // namespace boost::numeric::bindings::blas

#endif
$TEMPLATE[blas_overloads]
    inline void $groupname( $LEVEL0 ) {
        BLAS_$SUBROUTINE( $CALL_C_HEADER );
    }
$TEMPLATE[blas_level1]
// value-type based template
template< typename ValueType >
struct $groupname_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // templated specialization
    template< $TYPES >
    static void compute( $LEVEL1 ) {
#ifndef NDEBUG
        $ASSERTS
#endif
        detail::$groupname( $CALL_LEVEL0 );
    }
};
$TEMPLATE[end]
