$TEMPLATE[lapack.hpp]
//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_$DIRNAME_$GROUPNAME_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_$DIRNAME_$GROUPNAME_HPP

$INCLUDES

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//$DESCRIPTION

// overloaded functions to call lapack
namespace detail {
$OVERLOADS}

$LEVEL1
$LEVEL2
}}}} // namespace boost::numeric::bindings::lapack

#endif
$TEMPLATE[lapack_overloads]
    inline void $groupname( $LEVEL0 ) {
        LAPACK_$SUBROUTINE( $CALL_C_HEADER );
    }
$TEMPLATE[level1_pre_header]
// value-type based template
template< typename ValueType, typename Enable = void >
struct $groupname_impl{};

$TEMPLATE[level1_header1]
// value-type based template
template< typename ValueType >
struct $groupname_impl {

$TEMPLATE[level1_header2]
// $SPECIALIZATION specialization
template< typename ValueType >
struct $groupname_impl< ValueType, typename boost::enable_if< traits::is_$SPECIALIZATION<ValueType> >::type > {

$TEMPLATE[level1_workspace]
    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;
    typedef typename mpl::vector< $KEYWORDS > valid_keywords;

    // user-defined workspace specialization
    template< $TYPES, $WORKSPACE_TYPENAMES >
    static void compute( $LEVEL1, detail::workspace$WORKSPACE_SIZE< $WORKSPACE_TYPES > work ) {
        $STATIC_ASSERTS
        $INIT_USER_DEFINED_VARIABLES
        $ASSERTS
        detail::$groupname( $CALL_LEVEL0 );
    }

    // minimal workspace specialization
    template< $TYPES >
    static void compute( $LEVEL1, minimal_workspace work ) {
        $INIT_USER_DEFINED_VARIABLES
$SETUP_MIN_WORKARRAYS_POST
        compute( $CALL_LEVEL1, workspace( $TMP_WORKARRAYS ) );
    }

    // optimal workspace specialization
    template< $TYPES >
    static void compute( $LEVEL1, optimal_workspace work ) {
$OPT_WORKSPACE_FUNC
    }

$MIN_SIZE_FUNCS
};

$TEMPLATE[level1_opt_workspace]
        $INIT_USER_DEFINED_OPT_VARIABLES
        $SETUP_OPT_WORKARRAYS_PRE
        detail::$groupname( $WORKSPACE_QUERY );
        $SETUP_OPT_WORKARRAYS_POST
        compute( $CALL_LEVEL1, workspace( $TMP_WORKARRAYS ) );
$TEMPLATE[level1_opt_workspace_is_min]
        compute( $CALL_LEVEL1, minimal_workspace() );
$TEMPLATE[level2_workspace]
// template function to call $groupname
template< $TYPES, typename Workspace >
inline integer_t $groupname( $LEVEL2, Workspace work = optimal_workspace() ) {
    typedef typename traits::$TYPEOF_FIRST_TYPENAME_traits< $FIRST_TYPENAME >::value_type value_type;
    integer_t info(0);
    $groupname_impl< value_type >::compute( $CALL_LEVEL1, work );
    return info;
}
$TEMPLATE[setup_min_workspace]
        traits::detail::array< $WORKSPACE_TYPE > tmp_$NAME( min_size_$NAME( $CALL_MIN_SIZE ) );
$TEMPLATE[setup_opt_workspace]
        traits::detail::array< $WORKSPACE_TYPE > tmp_$NAME( $TMP_SIZE );
$TEMPLATE[min_size_func]
    static integer_t min_size_$NAME( $ARGUMENTS ) {
        $MIN_SIZE
    }

$TEMPLATE[level1_noworkspace]
    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;
    typedef typename mpl::vector< $KEYWORDS > valid_keywords;

    // templated specialization
    template< $TYPES >
    static void compute( $LEVEL1 ) {
        $STATIC_ASSERTS
        $ASSERTS
        detail::$groupname( $CALL_LEVEL0 );
    }
};

$TEMPLATE[level2_noworkspace]
// template function to call $groupname
template< $TYPES >
inline integer_t $groupname( $LEVEL2 ) {
    typedef typename traits::$TYPEOF_FIRST_TYPENAME_traits< $FIRST_TYPENAME >::value_type value_type;
    integer_t info(0);
    $groupname_impl< value_type >::compute( $CALL_LEVEL1 );
    return info;
}
$TEMPLATE[end]
