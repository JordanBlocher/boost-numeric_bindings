//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_SYRK_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_SYRK_HPP

#include <boost/numeric/bindings/blas/blas.h>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <cassert>

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

//$DESCRIPTION

// overloaded functions to call blas
namespace detail {
    inline void syrk( char const uplo, char const trans, integer_t const n,
            integer_t const k, float const alpha, float* a,
            integer_t const lda, float const beta, float* c,
            integer_t const ldc ) {
        BLAS_SSYRK( &uplo, &trans, &n, &k, &alpha, a, &lda, &beta, c, &ldc );
    }
    inline void syrk( char const uplo, char const trans, integer_t const n,
            integer_t const k, double const alpha, double* a,
            integer_t const lda, double const beta, double* c,
            integer_t const ldc ) {
        BLAS_DSYRK( &uplo, &trans, &n, &k, &alpha, a, &lda, &beta, c, &ldc );
    }
    inline void syrk( char const uplo, char const trans, integer_t const n,
            integer_t const k, traits::complex_f const alpha,
            traits::complex_f* a, integer_t const lda,
            traits::complex_f const beta, traits::complex_f* c,
            integer_t const ldc ) {
        BLAS_CSYRK( &uplo, &trans, &n, &k, traits::complex_ptr(&alpha),
                traits::complex_ptr(a), &lda, traits::complex_ptr(&beta),
                traits::complex_ptr(c), &ldc );
    }
    inline void syrk( char const uplo, char const trans, integer_t const n,
            integer_t const k, traits::complex_d const alpha,
            traits::complex_d* a, integer_t const lda,
            traits::complex_d const beta, traits::complex_d* c,
            integer_t const ldc ) {
        BLAS_ZSYRK( &uplo, &trans, &n, &k, traits::complex_ptr(&alpha),
                traits::complex_ptr(a), &lda, traits::complex_ptr(&beta),
                traits::complex_ptr(c), &ldc );
    }
}

// value-type based template
template< typename ValueType >
struct syrk_impl {

    typedef ValueType value_type;
    typedef void return_type;

    // templated specialization
    template< typename MatrixA, typename MatrixC >
    static return_type compute( char const trans, integer_t const k,
            value_type const alpha, MatrixA& a, value_type const beta,
            MatrixC& c ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::matrix_traits<
                MatrixC >::value_type >::value) );
        detail::syrk( traits::matrix_uplo_tag(c), trans,
                traits::matrix_num_columns(c), k, alpha,
                traits::matrix_storage(a), traits::leading_dimension(a), beta,
                traits::matrix_storage(c), traits::leading_dimension(c) );
    }
};

// template function to call syrk
template< typename MatrixA, typename MatrixC >
inline typename syrk_impl< typename traits::matrix_traits<
        MatrixA >::value_type >::return_type
syrk( char const trans, integer_t const k,
        typename traits::matrix_traits< MatrixA >::value_type const alpha,
        MatrixA& a, typename traits::matrix_traits<
        MatrixA >::value_type const beta, MatrixC& c ) {
    typedef typename traits::matrix_traits< MatrixA >::value_type value_type;
    syrk_impl< value_type >::compute( trans, k, alpha, a, beta, c );
}

}}}} // namespace boost::numeric::bindings::blas

#endif
