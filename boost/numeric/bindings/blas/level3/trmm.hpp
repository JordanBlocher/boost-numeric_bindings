//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_LEVEL3_TRMM_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_LEVEL3_TRMM_HPP

// Include header of configured BLAS interface
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
#include <boost/numeric/bindings/blas/detail/cblas.h>
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
#include <boost/numeric/bindings/blas/detail/cublas.h>
#else
#include <boost/numeric/bindings/blas/detail/blas.h>
#endif

#include <boost/mpl/bool.hpp>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

// The detail namespace is used for overloads on value type,
// and to dispatch to the right routine

namespace detail {

inline void trmm( const char side, const char uplo, const char transa,
        const char diag, const integer_t m, const integer_t n,
        const float alpha, const float* a, const integer_t lda, float* b,
        const integer_t ldb ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_strmm( CblasColMajor, ( uplo == 'L' ? CblasLeft : CblasRight ),
            ( uplo == 'U' ? CblasUpper : CblasLower ),
            ( transa == 'N' ? CblasNoTrans : ( transa == 'T' ? CblasTrans : CblasConjTrans ) ),
            ( uplo == 'N' ? CblasNonUnit : CblasUnit ), m, n, alpha, a, lda,
            b, ldb );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    cublasStrmm( side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb );
#else
    BLAS_STRMM( &side, &uplo, &transa, &diag, &m, &n, &alpha, a, &lda, b,
            &ldb );
#endif
}

inline void trmm( const char side, const char uplo, const char transa,
        const char diag, const integer_t m, const integer_t n,
        const double alpha, const double* a, const integer_t lda, double* b,
        const integer_t ldb ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_dtrmm( CblasColMajor, ( uplo == 'L' ? CblasLeft : CblasRight ),
            ( uplo == 'U' ? CblasUpper : CblasLower ),
            ( transa == 'N' ? CblasNoTrans : ( transa == 'T' ? CblasTrans : CblasConjTrans ) ),
            ( uplo == 'N' ? CblasNonUnit : CblasUnit ), m, n, alpha, a, lda,
            b, ldb );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    cublasDtrmm( side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb );
#else
    BLAS_DTRMM( &side, &uplo, &transa, &diag, &m, &n, &alpha, a, &lda, b,
            &ldb );
#endif
}

inline void trmm( const char side, const char uplo, const char transa,
        const char diag, const integer_t m, const integer_t n,
        const traits::complex_f alpha, const traits::complex_f* a,
        const integer_t lda, traits::complex_f* b, const integer_t ldb ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_ctrmm( CblasColMajor, ( uplo == 'L' ? CblasLeft : CblasRight ),
            ( uplo == 'U' ? CblasUpper : CblasLower ),
            ( transa == 'N' ? CblasNoTrans : ( transa == 'T' ? CblasTrans : CblasConjTrans ) ),
            ( uplo == 'N' ? CblasNonUnit : CblasUnit ), m, n,
            traits::void_ptr(&alpha), traits::void_ptr(a), lda,
            traits::void_ptr(b), ldb );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    cublasCtrmm( side, uplo, transa, diag, m, n, traits::void_ptr(alpha),
            traits::void_ptr(a), lda, traits::void_ptr(b), ldb );
#else
    BLAS_CTRMM( &side, &uplo, &transa, &diag, &m, &n,
            traits::complex_ptr(&alpha), traits::complex_ptr(a), &lda,
            traits::complex_ptr(b), &ldb );
#endif
}

inline void trmm( const char side, const char uplo, const char transa,
        const char diag, const integer_t m, const integer_t n,
        const traits::complex_d alpha, const traits::complex_d* a,
        const integer_t lda, traits::complex_d* b, const integer_t ldb ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_ztrmm( CblasColMajor, ( uplo == 'L' ? CblasLeft : CblasRight ),
            ( uplo == 'U' ? CblasUpper : CblasLower ),
            ( transa == 'N' ? CblasNoTrans : ( transa == 'T' ? CblasTrans : CblasConjTrans ) ),
            ( uplo == 'N' ? CblasNonUnit : CblasUnit ), m, n,
            traits::void_ptr(&alpha), traits::void_ptr(a), lda,
            traits::void_ptr(b), ldb );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    // NOT FOUND();
#else
    BLAS_ZTRMM( &side, &uplo, &transa, &diag, &m, &n,
            traits::complex_ptr(&alpha), traits::complex_ptr(a), &lda,
            traits::complex_ptr(b), &ldb );
#endif
}


} // namespace detail

// value-type based template
template< typename ValueType >
struct trmm_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;
    typedef void return_type;

    // static template member function
    template< typename MatrixA, typename MatrixB >
    static return_type invoke( const char side, const char transa,
            const char diag, const value_type alpha, const MatrixA& a,
            MatrixB& b ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::matrix_traits<
                MatrixB >::value_type >::value) );
        detail::trmm( side, traits::matrix_uplo_tag(a), transa, diag,
                traits::matrix_num_rows(b), traits::matrix_num_columns(b),
                alpha, traits::matrix_storage(a),
                traits::leading_dimension(a), traits::matrix_storage(b),
                traits::leading_dimension(b) );
    }
};

// generic template function to call trmm
template< typename MatrixA, typename MatrixB >
inline typename trmm_impl< typename traits::matrix_traits<
        MatrixA >::value_type >::return_type
trmm( const char side, const char transa, const char diag,
        const typename traits::matrix_traits< MatrixA >::value_type alpha,
        const MatrixA& a, MatrixB& b ) {
    typedef typename traits::matrix_traits< MatrixA >::value_type value_type;
    trmm_impl< value_type >::invoke( side, transa, diag, alpha, a, b );
}

} // namespace blas
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
