//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_LEVEL2_TPMV_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_LEVEL2_TPMV_HPP

// Include header of configured BLAS interface
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
#include <boost/numeric/bindings/blas/detail/cblas.h>
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
#include <boost/numeric/bindings/blas/detail/cublas.h>
#else
#include <boost/numeric/bindings/blas/detail/blas.h>
#endif

#include <boost/mpl/bool.hpp>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

// The detail namespace is used for overloads on value type,
// and to dispatch to the right routine

namespace detail {

inline void tpmv( const char uplo, const char trans, const char diag,
        const integer_t n, const float* ap, float* x, const integer_t incx ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_stpmv( CblasColMajor, ( uplo == 'U' ? CblasUpper : CblasLower ),
            ( trans == 'N' ? CblasNoTrans : ( trans == 'T' ? CblasTrans : CblasConjTrans ) ),
            ( uplo == 'N' ? CblasNonUnit : CblasUnit ), n, ap, x, incx );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    cublasStpmv( uplo, trans, diag, n, ap, x, incx );
#else
    BLAS_STPMV( &uplo, &trans, &diag, &n, ap, x, &incx );
#endif
}

inline void tpmv( const char uplo, const char trans, const char diag,
        const integer_t n, const double* ap, double* x,
        const integer_t incx ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_dtpmv( CblasColMajor, ( uplo == 'U' ? CblasUpper : CblasLower ),
            ( trans == 'N' ? CblasNoTrans : ( trans == 'T' ? CblasTrans : CblasConjTrans ) ),
            ( uplo == 'N' ? CblasNonUnit : CblasUnit ), n, ap, x, incx );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    // NOT FOUND();
#else
    BLAS_DTPMV( &uplo, &trans, &diag, &n, ap, x, &incx );
#endif
}

inline void tpmv( const char uplo, const char trans, const char diag,
        const integer_t n, const traits::complex_f* ap, traits::complex_f* x,
        const integer_t incx ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_ctpmv( CblasColMajor, ( uplo == 'U' ? CblasUpper : CblasLower ),
            ( trans == 'N' ? CblasNoTrans : ( trans == 'T' ? CblasTrans : CblasConjTrans ) ),
            ( uplo == 'N' ? CblasNonUnit : CblasUnit ), n,
            traits::void_ptr(ap), traits::void_ptr(x), incx );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    cublasCtpmv( uplo, trans, diag, n, traits::void_ptr(ap),
            traits::void_ptr(x), incx );
#else
    BLAS_CTPMV( &uplo, &trans, &diag, &n, traits::complex_ptr(ap),
            traits::complex_ptr(x), &incx );
#endif
}

inline void tpmv( const char uplo, const char trans, const char diag,
        const integer_t n, const traits::complex_d* ap, traits::complex_d* x,
        const integer_t incx ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_ztpmv( CblasColMajor, ( uplo == 'U' ? CblasUpper : CblasLower ),
            ( trans == 'N' ? CblasNoTrans : ( trans == 'T' ? CblasTrans : CblasConjTrans ) ),
            ( uplo == 'N' ? CblasNonUnit : CblasUnit ), n,
            traits::void_ptr(ap), traits::void_ptr(x), incx );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    // NOT FOUND();
#else
    BLAS_ZTPMV( &uplo, &trans, &diag, &n, traits::complex_ptr(ap),
            traits::complex_ptr(x), &incx );
#endif
}


} // namespace detail

// value-type based template
template< typename ValueType >
struct tpmv_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;
    typedef void return_type;

    // static template member function
    template< typename MatrixAP, typename VectorX >
    static return_type invoke( const char trans, const char diag,
            const MatrixAP& ap, VectorX& x ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixAP >::value_type, typename traits::vector_traits<
                VectorX >::value_type >::value) );
        detail::tpmv( traits::matrix_uplo_tag(ap), trans, diag,
                traits::matrix_num_columns(ap), traits::matrix_storage(ap),
                traits::vector_storage(x), traits::vector_stride(x) );
    }
};

// generic template function to call tpmv
template< typename MatrixAP, typename VectorX >
inline typename tpmv_impl< typename traits::matrix_traits<
        MatrixAP >::value_type >::return_type
tpmv( const char trans, const char diag, const MatrixAP& ap,
        VectorX& x ) {
    typedef typename traits::matrix_traits< MatrixAP >::value_type value_type;
    tpmv_impl< value_type >::invoke( trans, diag, ap, x );
}

} // namespace blas
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
