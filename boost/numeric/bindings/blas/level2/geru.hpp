//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_LEVEL2_GERU_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_LEVEL2_GERU_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/data_order.hpp>
#include <boost/numeric/bindings/is_column_major.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>

//
// The BLAS-backend is selected by defining a pre-processor variable,
//  which can be one of
// * for CBLAS, define BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
// * for CUBLAS, define BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
// * netlib-compatible BLAS is the default
//
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
#include <boost/numeric/bindings/blas/detail/cblas.h>
#include <boost/numeric/bindings/blas/detail/cblas_option.hpp>
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
#include <boost/numeric/bindings/blas/detail/cublas.h>
#include <boost/numeric/bindings/blas/detail/blas_option.hpp>
#else
#include <boost/numeric/bindings/blas/detail/blas.h>
#include <boost/numeric/bindings/blas/detail/blas_option.hpp>
#endif

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end BLAS-routine.
//
namespace detail {

#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
//
// Overloaded function for dispatching to
// * CBLAS backend
// * complex<float> value-type
//
template< typename Order >
inline void geru( Order, const std::ptrdiff_t m, const std::ptrdiff_t n,
        const std::complex<float> alpha, const std::complex<float>* x,
        const std::ptrdiff_t incx, const std::complex<float>* y,
        const std::ptrdiff_t incy, std::complex<float>* a,
        const std::ptrdiff_t lda ) {
    cblas_cgeru( cblas_option< Order >::value, m, n, &alpha, x, incx, y, incy,
            a, lda );
}

//
// Overloaded function for dispatching to
// * CBLAS backend
// * complex<double> value-type
//
template< typename Order >
inline void geru( Order, const std::ptrdiff_t m, const std::ptrdiff_t n,
        const std::complex<double> alpha, const std::complex<double>* x,
        const std::ptrdiff_t incx, const std::complex<double>* y,
        const std::ptrdiff_t incy, std::complex<double>* a,
        const std::ptrdiff_t lda ) {
    cblas_zgeru( cblas_option< Order >::value, m, n, &alpha, x, incx, y, incy,
            a, lda );
}

#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
//
// Overloaded function for dispatching to
// * CUBLAS backend
// * complex<float> value-type
//
template< typename Order >
inline void geru( Order, const std::ptrdiff_t m, const std::ptrdiff_t n,
        const std::complex<float> alpha, const std::complex<float>* x,
        const std::ptrdiff_t incx, const std::complex<float>* y,
        const std::ptrdiff_t incy, std::complex<float>* a,
        const std::ptrdiff_t lda ) {
    BOOST_STATIC_ASSERT( (is_column_major<Order>::value) );
    cublasCgeru( m, n, alpha, x, incx, y, incy, a, lda );
}

//
// Overloaded function for dispatching to
// * CUBLAS backend
// * complex<double> value-type
//
template< typename Order >
inline void geru( Order, const std::ptrdiff_t m, const std::ptrdiff_t n,
        const std::complex<double> alpha, const std::complex<double>* x,
        const std::ptrdiff_t incx, const std::complex<double>* y,
        const std::ptrdiff_t incy, std::complex<double>* a,
        const std::ptrdiff_t lda ) {
    BOOST_STATIC_ASSERT( (is_column_major<Order>::value) );
    // NOT FOUND();
}

#else
//
// Overloaded function for dispatching to
// * netlib-compatible BLAS backend (the default)
// * complex<float> value-type
//
template< typename Order >
inline void geru( Order, const std::ptrdiff_t m, const std::ptrdiff_t n,
        const std::complex<float> alpha, const std::complex<float>* x,
        const std::ptrdiff_t incx, const std::complex<float>* y,
        const std::ptrdiff_t incy, std::complex<float>* a,
        const std::ptrdiff_t lda ) {
    BOOST_STATIC_ASSERT( (is_column_major<Order>::value) );
    BLAS_CGERU( &m, &n, &alpha, x, &incx, y, &incy, a, &lda );
}

//
// Overloaded function for dispatching to
// * netlib-compatible BLAS backend (the default)
// * complex<double> value-type
//
template< typename Order >
inline void geru( Order, const std::ptrdiff_t m, const std::ptrdiff_t n,
        const std::complex<double> alpha, const std::complex<double>* x,
        const std::ptrdiff_t incx, const std::complex<double>* y,
        const std::ptrdiff_t incy, std::complex<double>* a,
        const std::ptrdiff_t lda ) {
    BOOST_STATIC_ASSERT( (is_column_major<Order>::value) );
    BLAS_ZGERU( &m, &n, &alpha, x, &incx, y, &incy, a, &lda );
}

#endif

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to geru.
//
template< typename Value >
struct geru_impl {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef void return_type;

    //
    // Static member function that
    // * Deduces the required arguments for dispatching to BLAS, and
    // * Asserts that most arguments make sense.
    //
    template< typename VectorX, typename VectorY, typename MatrixA >
    static return_type invoke( const value_type alpha, const VectorX& x,
            const VectorY& y, MatrixA& a ) {
        BOOST_STATIC_ASSERT( (is_same< typename remove_const< typename value<
                VectorX >::type >::type, typename remove_const<
                typename value< VectorY >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_same< typename remove_const< typename value<
                VectorX >::type >::type, typename remove_const<
                typename value< MatrixA >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value ) );
        typedef typename result_of::data_order< MatrixA >::type order;
        detail::geru( order(), size_row(a), size_column(a), alpha,
                begin_value(x), stride(x), begin_value(y), stride(y),
                begin_value(a), stride_major(a) );
    }
};

//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. Calls
// to these functions are passed to the geru_impl classes. In the 
// documentation, the const-overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for geru. Its overload differs for
// * MatrixA&
//
template< typename VectorX, typename VectorY, typename MatrixA >
inline typename geru_impl< typename value< VectorX >::type >::return_type
geru( const typename value< VectorX >::type alpha, const VectorX& x,
        const VectorY& y, MatrixA& a ) {
    geru_impl< typename value< VectorX >::type >::invoke( alpha, x, y,
            a );
}

//
// Overloaded function for geru. Its overload differs for
// * const MatrixA&
//
template< typename VectorX, typename VectorY, typename MatrixA >
inline typename geru_impl< typename value< VectorX >::type >::return_type
geru( const typename value< VectorX >::type alpha, const VectorX& x,
        const VectorY& y, const MatrixA& a ) {
    geru_impl< typename value< VectorX >::type >::invoke( alpha, x, y,
            a );
}

} // namespace blas
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
