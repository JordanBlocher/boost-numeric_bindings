//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_LEVEL2_SBMV_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_LEVEL2_SBMV_HPP

#include <boost/mpl/bool.hpp>
#include <boost/numeric/bindings/blas/detail/blas.h>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

// overloaded functions to call blas
namespace detail {

inline void sbmv( const char uplo, const integer_t n, const integer_t k,
        const float alpha, const float* a, const integer_t lda,
        const float* x, const integer_t incx, const float beta, float* y,
        const integer_t incy ) {
    BLAS_SSBMV( &uplo, &n, &k, &alpha, a, &lda, x, &incx, &beta, y, &incy );
}

inline void sbmv( const char uplo, const integer_t n, const integer_t k,
        const double alpha, const double* a, const integer_t lda,
        const double* x, const integer_t incx, const double beta, double* y,
        const integer_t incy ) {
    BLAS_DSBMV( &uplo, &n, &k, &alpha, a, &lda, x, &incx, &beta, y, &incy );
}

} // namespace detail

// value-type based template
template< typename ValueType >
struct sbmv_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;
    typedef void return_type;

    // templated specialization
    template< typename MatrixA, typename VectorX, typename VectorY >
    static return_type invoke( const integer_t k, const real_type alpha,
            const MatrixA& a, const VectorX& x, const real_type beta,
            VectorY& y ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::vector_traits<
                VectorX >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::vector_traits<
                VectorY >::value_type >::value) );
        detail::sbmv( traits::matrix_uplo_tag(a),
                traits::matrix_num_columns(a), k, alpha,
                traits::matrix_storage(a), traits::leading_dimension(a),
                traits::vector_storage(x), traits::vector_stride(x), beta,
                traits::vector_storage(y), traits::vector_stride(y) );
    }
};

// generic template function for calling to sbmv
template< typename MatrixA, typename VectorX, typename VectorY >
inline typename sbmv_impl< typename traits::matrix_traits<
        MatrixA >::value_type >::return_type
sbmv( const integer_t k, const typename traits::type_traits<
        typename traits::matrix_traits<
        MatrixA >::value_type >::real_type alpha, const MatrixA& a,
        const VectorX& x, const typename traits::type_traits<
        typename traits::matrix_traits<
        MatrixA >::value_type >::real_type beta, VectorY& y ) {
    typedef typename traits::matrix_traits< MatrixA >::value_type value_type;
    sbmv_impl< value_type >::invoke( k, alpha, a, x, beta, y );
}

} // namespace blas
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
