//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_LEVEL1_SWAP_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_LEVEL1_SWAP_HPP

// Include header of configured BLAS interface
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
#include <boost/numeric/bindings/blas/detail/cblas.h>
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
#include <boost/numeric/bindings/blas/detail/cublas.h>
#else
#include <boost/numeric/bindings/blas/detail/blas.h>
#endif

#include <boost/mpl/bool.hpp>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

// The detail namespace is used for overloads on value type,
// and to dispatch to the right routine

namespace detail {

inline void swap( const integer_t n, float* x, const integer_t incx, float* y,
        const integer_t incy ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_sswap( n, x, incx, y, incy );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    cublasSswap( n, x, incx, y, incy );
#else
    BLAS_SSWAP( &n, x, &incx, y, &incy );
#endif
}

inline void swap( const integer_t n, double* x, const integer_t incx,
        double* y, const integer_t incy ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_dswap( n, x, incx, y, incy );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    cublasDswap( n, x, incx, y, incy );
#else
    BLAS_DSWAP( &n, x, &incx, y, &incy );
#endif
}

inline void swap( const integer_t n, traits::complex_f* x,
        const integer_t incx, traits::complex_f* y, const integer_t incy ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_cswap( n, traits::void_ptr(x), incx, traits::void_ptr(y), incy );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    cublasCswap( n, traits::void_ptr(x), incx, traits::void_ptr(y), incy );
#else
    BLAS_CSWAP( &n, traits::complex_ptr(x), &incx, traits::complex_ptr(y),
            &incy );
#endif
}

inline void swap( const integer_t n, traits::complex_d* x,
        const integer_t incx, traits::complex_d* y, const integer_t incy ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_zswap( n, traits::void_ptr(x), incx, traits::void_ptr(y), incy );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    // NOT FOUND();
#else
    BLAS_ZSWAP( &n, traits::complex_ptr(x), &incx, traits::complex_ptr(y),
            &incy );
#endif
}


} // namespace detail

// value-type based template
template< typename ValueType >
struct swap_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;
    typedef void return_type;

    // static template member function
    template< typename VectorX, typename VectorY >
    static return_type invoke( VectorX& x, VectorY& y ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorX >::value_type, typename traits::vector_traits<
                VectorY >::value_type >::value) );
        detail::swap( traits::vector_size(x), traits::vector_storage(x),
                traits::vector_stride(x), traits::vector_storage(y),
                traits::vector_stride(y) );
    }
};

// generic template function to call swap
template< typename VectorX, typename VectorY >
inline typename swap_impl< typename traits::vector_traits<
        VectorX >::value_type >::return_type
swap( VectorX& x, VectorY& y ) {
    typedef typename traits::vector_traits< VectorX >::value_type value_type;
    swap_impl< value_type >::invoke( x, y );
}

} // namespace blas
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
