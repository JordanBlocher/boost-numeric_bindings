//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_SROT_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_SROT_HPP

#include <boost/numeric/bindings/blas/blas.h>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <cassert>

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

//$DESCRIPTION

// overloaded functions to call blas
namespace detail {
    inline void srot( integer_t const n, traits::complex_f* cx,
            integer_t const incx, traits::complex_f* cy, integer_t const incy,
            float const c, float const s ) {
        BLAS_CSROT( &n, traits::complex_ptr(cx), &incx,
                traits::complex_ptr(cy), &incy, &c, &s );
    }
}

// value-type based template
template< typename ValueType >
struct srot_impl {

    typedef ValueType value_type;
    typedef void return_type;

    // templated specialization
    template< typename VectorCX, typename VectorCY >
    static return_type compute( integer_t const n, VectorCX& cx, VectorCY& cy,
            real_type const c, real_type const s ) {
        detail::srot( n, traits::vector_storage(cx),
                traits::vector_stride(cx), traits::vector_storage(cy),
                traits::vector_stride(cy), c, s );
    }
};

// template function to call srot
template< typename VectorCX, typename VectorCY >
inline integer_t srot( integer_t const n, VectorCX& cx, VectorCY& cy,
        typename traits::vector_traits< VectorCX >::value_type const c,
        typename traits::vector_traits< VectorCX >::value_type const s ) {
    typedef typename traits::vector_traits< VectorCX >::value_type value_type;
    srot_impl< value_type >::compute( n, cx, cy, c, s );
}


}}}} // namespace boost::numeric::bindings::blas

#endif
