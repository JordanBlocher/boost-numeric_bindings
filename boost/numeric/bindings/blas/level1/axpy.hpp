//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_LEVEL1_AXPY_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_LEVEL1_AXPY_HPP

#include <boost/mpl/bool.hpp>
#include <boost/numeric/bindings/blas/detail/blas.h>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

// overloaded functions to call blas
namespace detail {

inline void axpy( const integer_t n, const float a, const float* x,
        const integer_t incx, float* y, const integer_t incy ) {
    BLAS_SAXPY( &n, &a, x, &incx, y, &incy );
}

inline void axpy( const integer_t n, const double a, const double* x,
        const integer_t incx, double* y, const integer_t incy ) {
    BLAS_DAXPY( &n, &a, x, &incx, y, &incy );
}

inline void axpy( const integer_t n, const traits::complex_f a,
        const traits::complex_f* x, const integer_t incx,
        traits::complex_f* y, const integer_t incy ) {
    BLAS_CAXPY( &n, traits::complex_ptr(&a), traits::complex_ptr(x), &incx,
            traits::complex_ptr(y), &incy );
}

inline void axpy( const integer_t n, const traits::complex_d a,
        const traits::complex_d* x, const integer_t incx,
        traits::complex_d* y, const integer_t incy ) {
    BLAS_ZAXPY( &n, traits::complex_ptr(&a), traits::complex_ptr(x), &incx,
            traits::complex_ptr(y), &incy );
}

} // namespace detail

// value-type based template
template< typename ValueType >
struct axpy_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;
    typedef void return_type;

    // templated specialization
    template< typename VectorX, typename VectorY >
    static return_type invoke( const value_type a, const VectorX& x,
            VectorY& y ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorX >::value_type, typename traits::vector_traits<
                VectorY >::value_type >::value) );
        detail::axpy( traits::vector_size(x), a,
                traits::vector_storage(x), traits::vector_stride(x),
                traits::vector_storage(y), traits::vector_stride(y) );
    }
};

// generic template function for calling to axpy
template< typename VectorX, typename VectorY >
inline typename axpy_impl< typename traits::vector_traits<
        VectorX >::value_type >::return_type
axpy( const typename traits::vector_traits< VectorX >::value_type a,
        const VectorX& x, VectorY& y ) {
    typedef typename traits::vector_traits< VectorX >::value_type value_type;
    axpy_impl< value_type >::invoke( a, x, y );
}

} // namespace blas
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
