//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_LEVEL1_ROTG_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_LEVEL1_ROTG_HPP

// Include header of configured BLAS interface
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
#include <boost/numeric/bindings/blas/detail/cblas.h>
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
#include <boost/numeric/bindings/blas/detail/cublas.h>
#else
#include <boost/numeric/bindings/blas/detail/blas.h>
#endif

#include <boost/mpl/bool.hpp>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

// The detail namespace is used for overloads on value type,
// and to dispatch to the right routine

namespace detail {

inline void rotg( float& a, float& b, float& c, float& s ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_srotg( &a, &b, &c, &s );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    cublasSrotg( &a, &b, &c, &s );
#else
    BLAS_SROTG( &a, &b, &c, &s );
#endif
}

inline void rotg( double& a, double& b, double& c, double& s ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_drotg( &a, &b, &c, &s );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    cublasDrotg( &a, &b, &c, &s );
#else
    BLAS_DROTG( &a, &b, &c, &s );
#endif
}


} // namespace detail

// value-type based template
template< typename ValueType >
struct rotg_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;
    typedef void return_type;

    // static template member function
    template<  >
    static return_type invoke( real_type& a, real_type& b, real_type& c,
            real_type& s ) {
        detail::rotg( a, b, c, s );
    }
};

// generic template function to call rotg
template<  >
inline typename rotg_impl< typename traits::TODO_traits<
        TODO >::value_type >::return_type
rotg( typename traits::type_traits< typename traits::TODO_traits<
        TODO >::value_type >::real_type& a, typename traits::type_traits<
        typename traits::TODO_traits< TODO >::value_type >::real_type& b,
        typename traits::type_traits< typename traits::TODO_traits<
        TODO >::value_type >::real_type& c, typename traits::type_traits<
        typename traits::TODO_traits< TODO >::value_type >::real_type& s ) {
    typedef typename traits::TODO_traits< TODO >::value_type value_type;
    rotg_impl< value_type >::invoke( a, b, c, s );
}

} // namespace blas
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
