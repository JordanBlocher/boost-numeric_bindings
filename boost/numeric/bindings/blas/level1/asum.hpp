//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_LEVEL1_ASUM_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_LEVEL1_ASUM_HPP

#include <boost/mpl/bool.hpp>
#include <boost/numeric/bindings/blas/detail/blas.h>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

// overloaded functions to call blas
namespace detail {

inline float asum( const integer_t n, const float* x, const integer_t incx ) {
    return BLAS_SASUM( &n, x, &incx );
}

inline double asum( const integer_t n, const double* x,
        const integer_t incx ) {
    return BLAS_DASUM( &n, x, &incx );
}

} // namespace detail

// value-type based template
template< typename ValueType >
struct asum_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;
    typedef value_type return_type;

    // templated specialization
    template< typename VectorX >
    static return_type invoke( const VectorX& x ) {
        return detail::asum( traits::vector_size(x),
                traits::vector_storage(x), traits::vector_stride(x) );
    }
};

// generic template function for calling to asum
template< typename VectorX >
inline typename asum_impl< typename traits::vector_traits<
        VectorX >::value_type >::return_type
asum( const VectorX& x ) {
    typedef typename traits::vector_traits< VectorX >::value_type value_type;
    return asum_impl< value_type >::invoke( x );
}

} // namespace blas
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
