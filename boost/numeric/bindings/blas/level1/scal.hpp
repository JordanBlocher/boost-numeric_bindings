//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_LEVEL1_SCAL_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_LEVEL1_SCAL_HPP

#include <boost/mpl/bool.hpp>
#include <boost/numeric/bindings/blas/detail/blas.h>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

// overloaded functions to call blas
namespace detail {

inline void scal( const integer_t n, const float a, const float* x,
        const integer_t incx ) {
    BLAS_SSCAL( &n, &a, x, &incx );
}

inline void scal( const integer_t n, const double a, const double* x,
        const integer_t incx ) {
    BLAS_DSCAL( &n, &a, x, &incx );
}

inline void scal( const integer_t n, const traits::complex_f a,
        const traits::complex_f* x, const integer_t incx ) {
    BLAS_CSCAL( &n, traits::complex_ptr(&a), traits::complex_ptr(x), &incx );
}

inline void scal( const integer_t n, const traits::complex_d a,
        const traits::complex_d* x, const integer_t incx ) {
    BLAS_ZSCAL( &n, traits::complex_ptr(&a), traits::complex_ptr(x), &incx );
}

} // namespace detail

// value-type based template
template< typename ValueType >
struct scal_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;
    typedef void return_type;

    // templated specialization
    template< typename VectorX >
    static return_type invoke( const value_type a, const VectorX& x ) {
        detail::scal( traits::vector_size(x), a,
                traits::vector_storage(x), traits::vector_stride(x) );
    }
};

// generic template function for calling to scal
template< typename VectorX >
inline typename scal_impl< typename traits::vector_traits<
        VectorX >::value_type >::return_type
scal( const typename traits::vector_traits< VectorX >::value_type a,
        const VectorX& x ) {
    typedef typename traits::vector_traits< VectorX >::value_type value_type;
    scal_impl< value_type >::invoke( a, x );
}

} // namespace blas
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
