//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_BLAS_LEVEL1_ROTMG_HPP
#define BOOST_NUMERIC_BINDINGS_BLAS_LEVEL1_ROTMG_HPP

// Include header of configured BLAS interface
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
#include <boost/numeric/bindings/blas/detail/cblas.h>
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
#include <boost/numeric/bindings/blas/detail/cublas.h>
#else
#include <boost/numeric/bindings/blas/detail/blas.h>
#endif

#include <boost/mpl/bool.hpp>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace blas {

// The detail namespace is used for overloads on value type,
// and to dispatch to the right routine

namespace detail {

inline void rotmg( float& d1, float& d2, float& x1, const float y1,
        float* sparam ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_srotmg( &d1, &d2, &x1, &y1, sparam );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    cublasSrotmg( &d1, &d2, &x1, &y1, sparam );
#else
    BLAS_SROTMG( &d1, &d2, &x1, &y1, sparam );
#endif
}

inline void rotmg( double& d1, double& d2, double& x1, const double y1,
        double* dparam ) {
#if defined BOOST_NUMERIC_BINDINGS_BLAS_CBLAS
    cblas_drotmg( &d1, &d2, &x1, &y1, dparam );
#elif defined BOOST_NUMERIC_BINDINGS_BLAS_CUBLAS
    cublasDrotmg( &d1, &d2, &x1, &y1, dparam );
#else
    BLAS_DROTMG( &d1, &d2, &x1, &y1, dparam );
#endif
}


} // namespace detail

// value-type based template
template< typename ValueType >
struct rotmg_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;
    typedef void return_type;

    // static template member function
    template< typename VectorDPARAM >
    static return_type invoke( real_type& d1, real_type& d2, real_type& x1,
            const real_type y1, VectorDPARAM& dparam ) {
        detail::rotmg( d1, d2, x1, y1, traits::vector_storage(dparam) );
    }
};

// generic template function to call rotmg
template< typename VectorDPARAM >
inline typename rotmg_impl< typename traits::vector_traits<
        VectorDPARAM >::value_type >::return_type
rotmg( typename traits::type_traits< typename traits::vector_traits<
        VectorDPARAM >::value_type >::real_type& d1,
        typename traits::type_traits< typename traits::vector_traits<
        VectorDPARAM >::value_type >::real_type& d2,
        typename traits::type_traits< typename traits::vector_traits<
        VectorDPARAM >::value_type >::real_type& x1,
        const typename traits::type_traits< typename traits::vector_traits<
        VectorDPARAM >::value_type >::real_type y1, VectorDPARAM& dparam ) {
    typedef typename traits::vector_traits<
            VectorDPARAM >::value_type value_type;
    rotmg_impl< value_type >::invoke( d1, d2, x1, y1, dparam );
}

} // namespace blas
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
