//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_GGES_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_GGES_HPP

#include <boost/assert.hpp>
#include <boost/mpl/bool.hpp>
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/traits/detail/array.hpp>
#include <boost/numeric/bindings/traits/detail/utils.hpp>
#include <boost/numeric/bindings/traits/is_complex.hpp>
#include <boost/numeric/bindings/traits/is_real.hpp>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/utility/enable_if.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//$DESCRIPTION

// overloaded functions to call lapack
namespace detail {

inline void gges( const char jobvsl, const char jobvsr, const char sort,
        logical_t* selctg, const integer_t n, float* a, const integer_t lda,
        float* b, const integer_t ldb, integer_t& sdim, float* alphar,
        float* alphai, float* beta, float* vsl, const integer_t ldvsl,
        float* vsr, const integer_t ldvsr, float* work, const integer_t lwork,
        logical_t* bwork, integer_t& info ) {
    LAPACK_SGGES( &jobvsl, &jobvsr, &sort, &selctg, &n, a, &lda, b, &ldb,
            &sdim, alphar, alphai, beta, vsl, &ldvsl, vsr, &ldvsr, work,
            &lwork, bwork, &info );
}

inline void gges( const char jobvsl, const char jobvsr, const char sort,
        logical_t* selctg, const integer_t n, double* a, const integer_t lda,
        double* b, const integer_t ldb, integer_t& sdim, double* alphar,
        double* alphai, double* beta, double* vsl, const integer_t ldvsl,
        double* vsr, const integer_t ldvsr, double* work,
        const integer_t lwork, logical_t* bwork, integer_t& info ) {
    LAPACK_DGGES( &jobvsl, &jobvsr, &sort, &selctg, &n, a, &lda, b, &ldb,
            &sdim, alphar, alphai, beta, vsl, &ldvsl, vsr, &ldvsr, work,
            &lwork, bwork, &info );
}

inline void gges( const char jobvsl, const char jobvsr, const char sort,
        logical_t* selctg, const integer_t n, traits::complex_f* a,
        const integer_t lda, traits::complex_f* b, const integer_t ldb,
        integer_t& sdim, traits::complex_f* alpha, traits::complex_f* beta,
        traits::complex_f* vsl, const integer_t ldvsl, traits::complex_f* vsr,
        const integer_t ldvsr, traits::complex_f* work, const integer_t lwork,
        float* rwork, logical_t* bwork, integer_t& info ) {
    LAPACK_CGGES( &jobvsl, &jobvsr, &sort, &selctg, &n,
            traits::complex_ptr(a), &lda, traits::complex_ptr(b), &ldb, &sdim,
            traits::complex_ptr(alpha), traits::complex_ptr(beta),
            traits::complex_ptr(vsl), &ldvsl, traits::complex_ptr(vsr),
            &ldvsr, traits::complex_ptr(work), &lwork, rwork, bwork, &info );
}

inline void gges( const char jobvsl, const char jobvsr, const char sort,
        logical_t* selctg, const integer_t n, traits::complex_d* a,
        const integer_t lda, traits::complex_d* b, const integer_t ldb,
        integer_t& sdim, traits::complex_d* alpha, traits::complex_d* beta,
        traits::complex_d* vsl, const integer_t ldvsl, traits::complex_d* vsr,
        const integer_t ldvsr, traits::complex_d* work, const integer_t lwork,
        double* rwork, logical_t* bwork, integer_t& info ) {
    LAPACK_ZGGES( &jobvsl, &jobvsr, &sort, &selctg, &n,
            traits::complex_ptr(a), &lda, traits::complex_ptr(b), &ldb, &sdim,
            traits::complex_ptr(alpha), traits::complex_ptr(beta),
            traits::complex_ptr(vsl), &ldvsl, traits::complex_ptr(vsr),
            &ldvsr, traits::complex_ptr(work), &lwork, rwork, bwork, &info );
}

} // namespace detail

// value-type based template
template< typename ValueType, typename Enable = void >
struct gges_impl{};

// real specialization
template< typename ValueType >
struct gges_impl< ValueType, typename boost::enable_if< traits::is_real<ValueType> >::type > {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // user-defined workspace specialization
    template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
            typename VectorALPHAI, typename VectorBETA, typename MatrixVSL,
            typename MatrixVSR, typename WORK, typename BWORK >
    static void invoke( const char jobvsl, const char jobvsr, const char sort,
            logical_t* selctg, MatrixA& a, MatrixB& b, integer_t& sdim,
            VectorALPHAR& alphar, VectorALPHAI& alphai, VectorBETA& beta,
            MatrixVSL& vsl, MatrixVSR& vsr, integer_t& info,
            detail::workspace2< WORK, BWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::matrix_traits<
                MatrixB >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::vector_traits<
                VectorALPHAR >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::vector_traits<
                VectorALPHAI >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::vector_traits<
                VectorBETA >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::matrix_traits<
                MatrixVSL >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::matrix_traits<
                MatrixVSR >::value_type >::value) );
        BOOST_ASSERT( jobvsl == 'N' || jobvsl == 'V' );
        BOOST_ASSERT( jobvsr == 'N' || jobvsr == 'V' );
        BOOST_ASSERT( sort == 'N' || sort == 'S' );
        BOOST_ASSERT( traits::matrix_num_columns(a) >= 0 );
        BOOST_ASSERT( traits::leading_dimension(a) >= std::max(1,
                traits::matrix_num_columns(a)) );
        BOOST_ASSERT( traits::leading_dimension(b) >= std::max(1,
                traits::matrix_num_columns(a)) );
        BOOST_ASSERT( traits::vector_size(alphar) >=
                traits::matrix_num_columns(a) );
        BOOST_ASSERT( traits::vector_size(alphai) >=
                traits::matrix_num_columns(a) );
        BOOST_ASSERT( traits::vector_size(work.select(real_type())) >=
                min_size_work( traits::matrix_num_columns(a) ));
        BOOST_ASSERT( traits::vector_size(work.select(bool())) >=
                min_size_bwork( traits::matrix_num_columns(a), sort ));
        detail::gges( jobvsl, jobvsr, sort, selctg,
                traits::matrix_num_columns(a), traits::matrix_storage(a),
                traits::leading_dimension(a), traits::matrix_storage(b),
                traits::leading_dimension(b), sdim,
                traits::vector_storage(alphar),
                traits::vector_storage(alphai), traits::vector_storage(beta),
                traits::matrix_storage(vsl), traits::leading_dimension(vsl),
                traits::matrix_storage(vsr), traits::leading_dimension(vsr),
                traits::vector_storage(work.select(real_type())),
                traits::vector_size(work.select(real_type())),
                traits::vector_storage(work.select(bool())), info );
    }

    // minimal workspace specialization
    template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
            typename VectorALPHAI, typename VectorBETA, typename MatrixVSL,
            typename MatrixVSR >
    static void invoke( const char jobvsl, const char jobvsr, const char sort,
            logical_t* selctg, MatrixA& a, MatrixB& b, integer_t& sdim,
            VectorALPHAR& alphar, VectorALPHAI& alphai, VectorBETA& beta,
            MatrixVSL& vsl, MatrixVSR& vsr, integer_t& info,
            minimal_workspace work ) {
        traits::detail::array< real_type > tmp_work( min_size_work(
                traits::matrix_num_columns(a) ) );
        traits::detail::array< bool > tmp_bwork( min_size_bwork(
                traits::matrix_num_columns(a), sort ) );
        invoke( jobvsl, jobvsr, sort, selctg, a, b, sdim, alphar, alphai,
                beta, vsl, vsr, info, workspace( tmp_work, tmp_bwork ) );
    }

    // optimal workspace specialization
    template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
            typename VectorALPHAI, typename VectorBETA, typename MatrixVSL,
            typename MatrixVSR >
    static void invoke( const char jobvsl, const char jobvsr, const char sort,
            logical_t* selctg, MatrixA& a, MatrixB& b, integer_t& sdim,
            VectorALPHAR& alphar, VectorALPHAI& alphai, VectorBETA& beta,
            MatrixVSL& vsl, MatrixVSR& vsr, integer_t& info,
            optimal_workspace work ) {
        real_type opt_size_work;
        traits::detail::array< bool > tmp_bwork( min_size_bwork(
                traits::matrix_num_columns(a), sort ) );
        detail::gges( jobvsl, jobvsr, sort, selctg,
                traits::matrix_num_columns(a), traits::matrix_storage(a),
                traits::leading_dimension(a), traits::matrix_storage(b),
                traits::leading_dimension(b), sdim,
                traits::vector_storage(alphar),
                traits::vector_storage(alphai), traits::vector_storage(beta),
                traits::matrix_storage(vsl), traits::leading_dimension(vsl),
                traits::matrix_storage(vsr), traits::leading_dimension(vsr),
                &opt_size_work, -1, traits::vector_storage(tmp_bwork), info );
        traits::detail::array< real_type > tmp_work(
                traits::detail::to_int( opt_size_work ) );
        invoke( jobvsl, jobvsr, sort, selctg, a, b, sdim, alphar, alphai,
                beta, vsl, vsr, info, workspace( tmp_work, tmp_bwork ) );
    }

    static integer_t min_size_work( const integer_t n ) {
        return std::max( 1, 8*n + 16 );
    }

    static integer_t min_size_bwork( const integer_t n, const char sort ) {
        if ( sort == 'N' )
            return 0;
        else
            return n;
    }
};

// complex specialization
template< typename ValueType >
struct gges_impl< ValueType, typename boost::enable_if< traits::is_complex<ValueType> >::type > {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // user-defined workspace specialization
    template< typename MatrixA, typename MatrixB, typename VectorALPHA,
            typename VectorBETA, typename MatrixVSL, typename MatrixVSR,
            typename WORK, typename RWORK, typename BWORK >
    static void invoke( const char jobvsl, const char jobvsr, const char sort,
            logical_t* selctg, MatrixA& a, MatrixB& b, integer_t& sdim,
            VectorALPHA& alpha, VectorBETA& beta, MatrixVSL& vsl,
            MatrixVSR& vsr, integer_t& info, detail::workspace3< WORK, RWORK,
            BWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::matrix_traits<
                MatrixB >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::vector_traits<
                VectorALPHA >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::vector_traits<
                VectorBETA >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::matrix_traits<
                MatrixVSL >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::matrix_traits<
                MatrixVSR >::value_type >::value) );
        BOOST_ASSERT( jobvsl == 'N' || jobvsl == 'V' );
        BOOST_ASSERT( jobvsr == 'N' || jobvsr == 'V' );
        BOOST_ASSERT( sort == 'N' || sort == 'S' );
        BOOST_ASSERT( traits::matrix_num_columns(a) >= 0 );
        BOOST_ASSERT( traits::leading_dimension(a) >= std::max(1,
                traits::matrix_num_columns(a)) );
        BOOST_ASSERT( traits::leading_dimension(b) >= std::max(1,
                traits::matrix_num_columns(a)) );
        BOOST_ASSERT( traits::vector_size(alpha) >=
                traits::matrix_num_columns(a) );
        BOOST_ASSERT( traits::vector_size(beta) >=
                traits::matrix_num_columns(a) );
        BOOST_ASSERT( traits::vector_size(work.select(value_type())) >=
                min_size_work( traits::matrix_num_columns(a) ));
        BOOST_ASSERT( traits::vector_size(work.select(real_type())) >=
                min_size_rwork( traits::matrix_num_columns(a) ));
        BOOST_ASSERT( traits::vector_size(work.select(bool())) >=
                min_size_bwork( traits::matrix_num_columns(a), sort ));
        detail::gges( jobvsl, jobvsr, sort, selctg,
                traits::matrix_num_columns(a), traits::matrix_storage(a),
                traits::leading_dimension(a), traits::matrix_storage(b),
                traits::leading_dimension(b), sdim,
                traits::vector_storage(alpha), traits::vector_storage(beta),
                traits::matrix_storage(vsl), traits::leading_dimension(vsl),
                traits::matrix_storage(vsr), traits::leading_dimension(vsr),
                traits::vector_storage(work.select(value_type())),
                traits::vector_size(work.select(value_type())),
                traits::vector_storage(work.select(real_type())),
                traits::vector_storage(work.select(bool())), info );
    }

    // minimal workspace specialization
    template< typename MatrixA, typename MatrixB, typename VectorALPHA,
            typename VectorBETA, typename MatrixVSL, typename MatrixVSR >
    static void invoke( const char jobvsl, const char jobvsr, const char sort,
            logical_t* selctg, MatrixA& a, MatrixB& b, integer_t& sdim,
            VectorALPHA& alpha, VectorBETA& beta, MatrixVSL& vsl,
            MatrixVSR& vsr, integer_t& info, minimal_workspace work ) {
        traits::detail::array< value_type > tmp_work( min_size_work(
                traits::matrix_num_columns(a) ) );
        traits::detail::array< real_type > tmp_rwork( min_size_rwork(
                traits::matrix_num_columns(a) ) );
        traits::detail::array< bool > tmp_bwork( min_size_bwork(
                traits::matrix_num_columns(a), sort ) );
        invoke( jobvsl, jobvsr, sort, selctg, a, b, sdim, alpha, beta, vsl,
                vsr, info, workspace( tmp_work, tmp_rwork, tmp_bwork ) );
    }

    // optimal workspace specialization
    template< typename MatrixA, typename MatrixB, typename VectorALPHA,
            typename VectorBETA, typename MatrixVSL, typename MatrixVSR >
    static void invoke( const char jobvsl, const char jobvsr, const char sort,
            logical_t* selctg, MatrixA& a, MatrixB& b, integer_t& sdim,
            VectorALPHA& alpha, VectorBETA& beta, MatrixVSL& vsl,
            MatrixVSR& vsr, integer_t& info, optimal_workspace work ) {
        value_type opt_size_work;
        traits::detail::array< real_type > tmp_rwork( min_size_rwork(
                traits::matrix_num_columns(a) ) );
        traits::detail::array< bool > tmp_bwork( min_size_bwork(
                traits::matrix_num_columns(a), sort ) );
        detail::gges( jobvsl, jobvsr, sort, selctg,
                traits::matrix_num_columns(a), traits::matrix_storage(a),
                traits::leading_dimension(a), traits::matrix_storage(b),
                traits::leading_dimension(b), sdim,
                traits::vector_storage(alpha), traits::vector_storage(beta),
                traits::matrix_storage(vsl), traits::leading_dimension(vsl),
                traits::matrix_storage(vsr), traits::leading_dimension(vsr),
                &opt_size_work, -1, traits::vector_storage(tmp_rwork),
                traits::vector_storage(tmp_bwork), info );
        traits::detail::array< value_type > tmp_work(
                traits::detail::to_int( opt_size_work ) );
        invoke( jobvsl, jobvsr, sort, selctg, a, b, sdim, alpha, beta, vsl,
                vsr, info, workspace( tmp_work, tmp_rwork, tmp_bwork ) );
    }

    static integer_t min_size_work( const integer_t n ) {
        return std::max( 1, 2*n );
    }

    static integer_t min_size_rwork( const integer_t n ) {
        return 8*n;
    }

    static integer_t min_size_bwork( const integer_t n, const char sort ) {
        if ( sort == 'N' )
            return 0;
        else
            return n;
    }
};


// template function to call gges
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVSL,
        typename MatrixVSR, typename Workspace >
inline integer_t gges( const char jobvsl, const char jobvsr,
        const char sort, logical_t* selctg, MatrixA& a, MatrixB& b,
        integer_t& sdim, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixVSL& vsl, MatrixVSR& vsr, Workspace work ) {
    typedef typename traits::matrix_traits< MatrixA >::value_type value_type;
    integer_t info(0);
    gges_impl< value_type >::invoke( jobvsl, jobvsr, sort, selctg, a, b,
            sdim, alphar, alphai, beta, vsl, vsr, info, work );
    return info;
}

// template function to call gges, default workspace type
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVSL,
        typename MatrixVSR >
inline integer_t gges( const char jobvsl, const char jobvsr,
        const char sort, logical_t* selctg, MatrixA& a, MatrixB& b,
        integer_t& sdim, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixVSL& vsl, MatrixVSR& vsr ) {
    typedef typename traits::matrix_traits< MatrixA >::value_type value_type;
    integer_t info(0);
    gges_impl< value_type >::invoke( jobvsl, jobvsr, sort, selctg, a, b,
            sdim, alphar, alphai, beta, vsl, vsr, info, optimal_workspace() );
    return info;
}
// template function to call gges
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVSL, typename MatrixVSR,
        typename Workspace >
inline integer_t gges( const char jobvsl, const char jobvsr,
        const char sort, logical_t* selctg, MatrixA& a, MatrixB& b,
        integer_t& sdim, VectorALPHA& alpha, VectorBETA& beta, MatrixVSL& vsl,
        MatrixVSR& vsr, Workspace work ) {
    typedef typename traits::matrix_traits< MatrixA >::value_type value_type;
    integer_t info(0);
    gges_impl< value_type >::invoke( jobvsl, jobvsr, sort, selctg, a, b,
            sdim, alpha, beta, vsl, vsr, info, work );
    return info;
}

// template function to call gges, default workspace type
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVSL, typename MatrixVSR >
inline integer_t gges( const char jobvsl, const char jobvsr,
        const char sort, logical_t* selctg, MatrixA& a, MatrixB& b,
        integer_t& sdim, VectorALPHA& alpha, VectorBETA& beta, MatrixVSL& vsl,
        MatrixVSR& vsr ) {
    typedef typename traits::matrix_traits< MatrixA >::value_type value_type;
    integer_t info(0);
    gges_impl< value_type >::invoke( jobvsl, jobvsr, sort, selctg, a, b,
            sdim, alpha, beta, vsl, vsr, info, optimal_workspace() );
    return info;
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
