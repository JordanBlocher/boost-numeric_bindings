//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_GEGV_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_GEGV_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_complex.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/is_real.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/traits/detail/utils.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/utility/enable_if.hpp>

//
// The LAPACK-backend for gegv is the netlib-compatible backend.
//
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * float value-type.
//
inline std::ptrdiff_t gegv( char jobvl, char jobvr, fortran_int_t n, float* a,
        fortran_int_t lda, float* b, fortran_int_t ldb, float* alphar,
        float* alphai, float* beta, float* vl, fortran_int_t ldvl, float* vr,
        fortran_int_t ldvr, float* work, fortran_int_t lwork ) {
    fortran_int_t info(0);
    LAPACK_SGEGV( &jobvl, &jobvr, &n, a, &lda, b, &ldb, alphar, alphai, beta,
            vl, &ldvl, vr, &ldvr, work, &lwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * double value-type.
//
inline std::ptrdiff_t gegv( char jobvl, char jobvr, fortran_int_t n, double* a,
        fortran_int_t lda, double* b, fortran_int_t ldb, double* alphar,
        double* alphai, double* beta, double* vl, fortran_int_t ldvl,
        double* vr, fortran_int_t ldvr, double* work, fortran_int_t lwork ) {
    fortran_int_t info(0);
    LAPACK_DGEGV( &jobvl, &jobvr, &n, a, &lda, b, &ldb, alphar, alphai, beta,
            vl, &ldvl, vr, &ldvr, work, &lwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<float> value-type.
//
inline std::ptrdiff_t gegv( char jobvl, char jobvr, fortran_int_t n,
        std::complex<float>* a, fortran_int_t lda, std::complex<float>* b,
        fortran_int_t ldb, std::complex<float>* alpha,
        std::complex<float>* beta, std::complex<float>* vl,
        fortran_int_t ldvl, std::complex<float>* vr, fortran_int_t ldvr,
        std::complex<float>* work, fortran_int_t lwork, float* rwork ) {
    fortran_int_t info(0);
    LAPACK_CGEGV( &jobvl, &jobvr, &n, a, &lda, b, &ldb, alpha, beta, vl,
            &ldvl, vr, &ldvr, work, &lwork, rwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<double> value-type.
//
inline std::ptrdiff_t gegv( char jobvl, char jobvr, fortran_int_t n,
        std::complex<double>* a, fortran_int_t lda, std::complex<double>* b,
        fortran_int_t ldb, std::complex<double>* alpha,
        std::complex<double>* beta, std::complex<double>* vl,
        fortran_int_t ldvl, std::complex<double>* vr, fortran_int_t ldvr,
        std::complex<double>* work, fortran_int_t lwork, double* rwork ) {
    fortran_int_t info(0);
    LAPACK_ZGEGV( &jobvl, &jobvr, &n, a, &lda, b, &ldb, alpha, beta, vl,
            &ldvl, vr, &ldvr, work, &lwork, rwork, &info );
    return info;
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to gegv.
//
template< typename Value, typename Enable = void >
struct gegv_impl {};

//
// This implementation is enabled if Value is a real type.
//
template< typename Value >
struct gegv_impl< Value, typename boost::enable_if< is_real< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
            typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
            typename MatrixVR, typename WORK >
    static std::ptrdiff_t invoke( const char jobvl, const char jobvr,
            MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
            VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
            MatrixVR& vr, detail::workspace1< WORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixB >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorALPHAR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorALPHAI >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorBETA >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixVL >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixVR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorALPHAR >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorALPHAI >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorBETA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixVL >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixVR >::value) );
        BOOST_ASSERT( jobvl == 'N' || jobvl == 'V' );
        BOOST_ASSERT( jobvr == 'N' || jobvr == 'V' );
        BOOST_ASSERT( size(alphar) >= size_column(a) );
        BOOST_ASSERT( size(beta) >= size_column(a) );
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work(
                size_column(a) ));
        BOOST_ASSERT( size_column(a) >= 0 );
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(b) == 1 || stride_minor(b) == 1 );
        BOOST_ASSERT( size_minor(vl) == 1 || stride_minor(vl) == 1 );
        BOOST_ASSERT( size_minor(vr) == 1 || stride_minor(vr) == 1 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,
                size_column(a)) );
        BOOST_ASSERT( stride_major(b) >= std::max< std::ptrdiff_t >(1,
                size_column(a)) );
        return detail::gegv( jobvl, jobvr, size_column(a), begin_value(a),
                stride_major(a), begin_value(b), stride_major(b),
                begin_value(alphar), begin_value(alphai), begin_value(beta),
                begin_value(vl), stride_major(vl), begin_value(vr),
                stride_major(vr), begin_value(work.select(real_type())),
                size(work.select(real_type())) );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
            typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
            typename MatrixVR >
    static std::ptrdiff_t invoke( const char jobvl, const char jobvr,
            MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
            VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
            MatrixVR& vr, minimal_workspace work ) {
        bindings::detail::array< real_type > tmp_work( min_size_work(
                size_column(a) ) );
        return invoke( jobvl, jobvr, a, b, alphar, alphai, beta, vl, vr,
                workspace( tmp_work ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
            typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
            typename MatrixVR >
    static std::ptrdiff_t invoke( const char jobvl, const char jobvr,
            MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
            VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
            MatrixVR& vr, optimal_workspace work ) {
        real_type opt_size_work;
        detail::gegv( jobvl, jobvr, size_column(a), begin_value(a),
                stride_major(a), begin_value(b), stride_major(b),
                begin_value(alphar), begin_value(alphai), begin_value(beta),
                begin_value(vl), stride_major(vl), begin_value(vr),
                stride_major(vr), &opt_size_work, -1 );
        bindings::detail::array< real_type > tmp_work(
                traits::detail::to_int( opt_size_work ) );
        invoke( jobvl, jobvr, a, b, alphar, alphai, beta, vl, vr,
                workspace( tmp_work ) );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n ) {
        return std::max< std::ptrdiff_t >( 1, 8*n );
    }
};

//
// This implementation is enabled if Value is a complex type.
//
template< typename Value >
struct gegv_impl< Value, typename boost::enable_if< is_complex< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixA, typename MatrixB, typename VectorALPHA,
            typename VectorBETA, typename MatrixVL, typename MatrixVR,
            typename WORK, typename RWORK >
    static std::ptrdiff_t invoke( const char jobvl, const char jobvr,
            MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
            MatrixVL& vl, MatrixVR& vr, detail::workspace2< WORK,
            RWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixB >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorALPHA >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorBETA >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixVL >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixVR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorALPHA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorBETA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixVL >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixVR >::value) );
        BOOST_ASSERT( jobvl == 'N' || jobvl == 'V' );
        BOOST_ASSERT( jobvr == 'N' || jobvr == 'V' );
        BOOST_ASSERT( size(alpha) >= size_column(a) );
        BOOST_ASSERT( size(beta) >= size_column(a) );
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_rwork(
                size_column(a) ));
        BOOST_ASSERT( size(work.select(value_type())) >= min_size_work(
                size_column(a) ));
        BOOST_ASSERT( size_column(a) >= 0 );
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(b) == 1 || stride_minor(b) == 1 );
        BOOST_ASSERT( size_minor(vl) == 1 || stride_minor(vl) == 1 );
        BOOST_ASSERT( size_minor(vr) == 1 || stride_minor(vr) == 1 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,
                size_column(a)) );
        BOOST_ASSERT( stride_major(b) >= std::max< std::ptrdiff_t >(1,
                size_column(a)) );
        return detail::gegv( jobvl, jobvr, size_column(a), begin_value(a),
                stride_major(a), begin_value(b), stride_major(b),
                begin_value(alpha), begin_value(beta), begin_value(vl),
                stride_major(vl), begin_value(vr), stride_major(vr),
                begin_value(work.select(value_type())),
                size(work.select(value_type())),
                begin_value(work.select(real_type())) );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixA, typename MatrixB, typename VectorALPHA,
            typename VectorBETA, typename MatrixVL, typename MatrixVR >
    static std::ptrdiff_t invoke( const char jobvl, const char jobvr,
            MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
            MatrixVL& vl, MatrixVR& vr, minimal_workspace work ) {
        bindings::detail::array< value_type > tmp_work( min_size_work(
                size_column(a) ) );
        bindings::detail::array< real_type > tmp_rwork( min_size_rwork(
                size_column(a) ) );
        return invoke( jobvl, jobvr, a, b, alpha, beta, vl, vr,
                workspace( tmp_work, tmp_rwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixA, typename MatrixB, typename VectorALPHA,
            typename VectorBETA, typename MatrixVL, typename MatrixVR >
    static std::ptrdiff_t invoke( const char jobvl, const char jobvr,
            MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
            MatrixVL& vl, MatrixVR& vr, optimal_workspace work ) {
        value_type opt_size_work;
        bindings::detail::array< real_type > tmp_rwork( min_size_rwork(
                size_column(a) ) );
        detail::gegv( jobvl, jobvr, size_column(a), begin_value(a),
                stride_major(a), begin_value(b), stride_major(b),
                begin_value(alpha), begin_value(beta), begin_value(vl),
                stride_major(vl), begin_value(vr), stride_major(vr),
                &opt_size_work, -1, begin_value(tmp_rwork) );
        bindings::detail::array< value_type > tmp_work(
                traits::detail::to_int( opt_size_work ) );
        invoke( jobvl, jobvr, a, b, alpha, beta, vl, vr, workspace( tmp_work,
                tmp_rwork ) );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n ) {
        return std::max< std::ptrdiff_t >( 1, 2*n );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array rwork.
    //
    static std::ptrdiff_t min_size_rwork( const std::ptrdiff_t n ) {
        return 8*n;
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the gegv_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixVL& vl,
        const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR, typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHAR,
        typename VectorALPHAI, typename VectorBETA, typename MatrixVL,
        typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alphar, alphai, beta, vl, vr, optimal_workspace() );
}
//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr, Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR,
        typename Workspace >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr,
        Workspace work ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, work );
}

//
// Overloaded function for gegv. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixVL&
// * const MatrixVR&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixVL, typename MatrixVR >
inline std::ptrdiff_t gegv( const char jobvl, const char jobvr,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixVL& vl, const MatrixVR& vr ) {
    return gegv_impl< typename value< MatrixA >::type >::invoke( jobvl,
            jobvr, a, b, alpha, beta, vl, vr, optimal_workspace() );
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
