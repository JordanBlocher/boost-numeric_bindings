//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_SBEV_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_SBEV_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/data_side.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>

//
// The LAPACK-backend for sbev is the netlib-compatible backend.
//
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * float value-type.
//
template< typename UpLo >
inline std::ptrdiff_t sbev( const char jobz, UpLo, const fortran_int_t n,
        const fortran_int_t kd, float* ab, const fortran_int_t ldab, float* w,
        float* z, const fortran_int_t ldz, float* work ) {
    fortran_int_t info(0);
    LAPACK_SSBEV( &jobz, &lapack_option< UpLo >::value, &n, &kd, ab, &ldab, w,
            z, &ldz, work, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * double value-type.
//
template< typename UpLo >
inline std::ptrdiff_t sbev( const char jobz, UpLo, const fortran_int_t n,
        const fortran_int_t kd, double* ab, const fortran_int_t ldab,
        double* w, double* z, const fortran_int_t ldz, double* work ) {
    fortran_int_t info(0);
    LAPACK_DSBEV( &jobz, &lapack_option< UpLo >::value, &n, &kd, ab, &ldab, w,
            z, &ldz, work, &info );
    return info;
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to sbev.
//
template< typename Value >
struct sbev_impl {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixAB, typename VectorW, typename MatrixZ,
            typename WORK >
    static std::ptrdiff_t invoke( const char jobz, const fortran_int_t n,
            MatrixAB& ab, VectorW& w, MatrixZ& z, detail::workspace1<
            WORK > work ) {
        typedef typename result_of::data_side< MatrixAB >::type uplo;
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAB >::type >::type,
                typename remove_const< typename value<
                VectorW >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAB >::type >::type,
                typename remove_const< typename value<
                MatrixZ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixAB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorW >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixZ >::value) );
        BOOST_ASSERT( bandwidth_upper(ab) >= 0 );
        BOOST_ASSERT( jobz == 'N' || jobz == 'V' );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work( n ));
        BOOST_ASSERT( size_minor(ab) == 1 || stride_minor(ab) == 1 );
        BOOST_ASSERT( size_minor(z) == 1 || stride_minor(z) == 1 );
        BOOST_ASSERT( stride_major(ab) >= bandwidth_upper(ab) );
        return detail::sbev( jobz, uplo(), n, bandwidth_upper(ab),
                begin_value(ab), stride_major(ab), begin_value(w),
                begin_value(z), stride_major(z),
                begin_value(work.select(real_type())) );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixAB, typename VectorW, typename MatrixZ >
    static std::ptrdiff_t invoke( const char jobz, const fortran_int_t n,
            MatrixAB& ab, VectorW& w, MatrixZ& z, minimal_workspace work ) {
        typedef typename result_of::data_side< MatrixAB >::type uplo;
        bindings::detail::array< real_type > tmp_work( min_size_work( n ) );
        return invoke( jobz, n, ab, w, z, workspace( tmp_work ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixAB, typename VectorW, typename MatrixZ >
    static std::ptrdiff_t invoke( const char jobz, const fortran_int_t n,
            MatrixAB& ab, VectorW& w, MatrixZ& z, optimal_workspace work ) {
        typedef typename result_of::data_side< MatrixAB >::type uplo;
        return invoke( jobz, n, ab, w, z, minimal_workspace() );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n ) {
        return std::max< std::ptrdiff_t >(1,3*n-2);
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the sbev_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for sbev. Its overload differs for
// * MatrixAB&
// * VectorW&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixAB, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        MatrixAB& ab, VectorW& w, MatrixZ& z, Workspace work ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, work );
}

//
// Overloaded function for sbev. Its overload differs for
// * MatrixAB&
// * VectorW&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        MatrixAB& ab, VectorW& w, MatrixZ& z ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, optimal_workspace() );
}

//
// Overloaded function for sbev. Its overload differs for
// * const MatrixAB&
// * VectorW&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixAB, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        const MatrixAB& ab, VectorW& w, MatrixZ& z, Workspace work ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, work );
}

//
// Overloaded function for sbev. Its overload differs for
// * const MatrixAB&
// * VectorW&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        const MatrixAB& ab, VectorW& w, MatrixZ& z ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, optimal_workspace() );
}

//
// Overloaded function for sbev. Its overload differs for
// * MatrixAB&
// * const VectorW&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixAB, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        MatrixAB& ab, const VectorW& w, MatrixZ& z, Workspace work ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, work );
}

//
// Overloaded function for sbev. Its overload differs for
// * MatrixAB&
// * const VectorW&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        MatrixAB& ab, const VectorW& w, MatrixZ& z ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, optimal_workspace() );
}

//
// Overloaded function for sbev. Its overload differs for
// * const MatrixAB&
// * const VectorW&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixAB, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        const MatrixAB& ab, const VectorW& w, MatrixZ& z, Workspace work ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, work );
}

//
// Overloaded function for sbev. Its overload differs for
// * const MatrixAB&
// * const VectorW&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        const MatrixAB& ab, const VectorW& w, MatrixZ& z ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, optimal_workspace() );
}

//
// Overloaded function for sbev. Its overload differs for
// * MatrixAB&
// * VectorW&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixAB, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        MatrixAB& ab, VectorW& w, const MatrixZ& z, Workspace work ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, work );
}

//
// Overloaded function for sbev. Its overload differs for
// * MatrixAB&
// * VectorW&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        MatrixAB& ab, VectorW& w, const MatrixZ& z ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, optimal_workspace() );
}

//
// Overloaded function for sbev. Its overload differs for
// * const MatrixAB&
// * VectorW&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixAB, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        const MatrixAB& ab, VectorW& w, const MatrixZ& z, Workspace work ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, work );
}

//
// Overloaded function for sbev. Its overload differs for
// * const MatrixAB&
// * VectorW&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        const MatrixAB& ab, VectorW& w, const MatrixZ& z ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, optimal_workspace() );
}

//
// Overloaded function for sbev. Its overload differs for
// * MatrixAB&
// * const VectorW&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixAB, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        MatrixAB& ab, const VectorW& w, const MatrixZ& z, Workspace work ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, work );
}

//
// Overloaded function for sbev. Its overload differs for
// * MatrixAB&
// * const VectorW&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        MatrixAB& ab, const VectorW& w, const MatrixZ& z ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, optimal_workspace() );
}

//
// Overloaded function for sbev. Its overload differs for
// * const MatrixAB&
// * const VectorW&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixAB, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        const MatrixAB& ab, const VectorW& w, const MatrixZ& z,
        Workspace work ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, work );
}

//
// Overloaded function for sbev. Its overload differs for
// * const MatrixAB&
// * const VectorW&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t sbev( const char jobz, const fortran_int_t n,
        const MatrixAB& ab, const VectorW& w, const MatrixZ& z ) {
    return sbev_impl< typename value< MatrixAB >::type >::invoke( jobz,
            n, ab, w, z, optimal_workspace() );
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
