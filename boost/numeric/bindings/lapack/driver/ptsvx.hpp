//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_PTSVX_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_PTSVX_HPP

#include <boost/assert.hpp>
#include <boost/mpl/bool.hpp>
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/traits/detail/array.hpp>
#include <boost/numeric/bindings/traits/is_complex.hpp>
#include <boost/numeric/bindings/traits/is_real.hpp>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/utility/enable_if.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//$DESCRIPTION

// overloaded functions to call lapack
namespace detail {

inline void ptsvx( const char fact, const integer_t n, const integer_t nrhs,
        const float* d, const float* e, float* df, float* ef, const float* b,
        const integer_t ldb, float* x, const integer_t ldx, float& rcond,
        float* ferr, float* berr, float* work, integer_t& info ) {
    LAPACK_SPTSVX( &fact, &n, &nrhs, d, e, df, ef, b, &ldb, x, &ldx, &rcond,
            ferr, berr, work, &info );
}

inline void ptsvx( const char fact, const integer_t n, const integer_t nrhs,
        const double* d, const double* e, double* df, double* ef,
        const double* b, const integer_t ldb, double* x, const integer_t ldx,
        double& rcond, double* ferr, double* berr, double* work,
        integer_t& info ) {
    LAPACK_DPTSVX( &fact, &n, &nrhs, d, e, df, ef, b, &ldb, x, &ldx, &rcond,
            ferr, berr, work, &info );
}

inline void ptsvx( const char fact, const integer_t n, const integer_t nrhs,
        const float* d, const traits::complex_f* e, float* df,
        traits::complex_f* ef, const traits::complex_f* b,
        const integer_t ldb, traits::complex_f* x, const integer_t ldx,
        float& rcond, float* ferr, float* berr, traits::complex_f* work,
        float* rwork, integer_t& info ) {
    LAPACK_CPTSVX( &fact, &n, &nrhs, d, traits::complex_ptr(e), df,
            traits::complex_ptr(ef), traits::complex_ptr(b), &ldb,
            traits::complex_ptr(x), &ldx, &rcond, ferr, berr,
            traits::complex_ptr(work), rwork, &info );
}

inline void ptsvx( const char fact, const integer_t n, const integer_t nrhs,
        const double* d, const traits::complex_d* e, double* df,
        traits::complex_d* ef, const traits::complex_d* b,
        const integer_t ldb, traits::complex_d* x, const integer_t ldx,
        double& rcond, double* ferr, double* berr, traits::complex_d* work,
        double* rwork, integer_t& info ) {
    LAPACK_ZPTSVX( &fact, &n, &nrhs, d, traits::complex_ptr(e), df,
            traits::complex_ptr(ef), traits::complex_ptr(b), &ldb,
            traits::complex_ptr(x), &ldx, &rcond, ferr, berr,
            traits::complex_ptr(work), rwork, &info );
}

} // namespace detail

// value-type based template
template< typename ValueType, typename Enable = void >
struct ptsvx_impl{};

// real specialization
template< typename ValueType >
struct ptsvx_impl< ValueType, typename boost::enable_if< traits::is_real<ValueType> >::type > {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // user-defined workspace specialization
    template< typename VectorD, typename VectorE, typename VectorDF,
            typename VectorEF, typename MatrixB, typename MatrixX,
            typename VectorFERR, typename VectorBERR, typename WORK >
    static void invoke( const char fact, const integer_t n, const VectorD& d,
            const VectorE& e, VectorDF& df, VectorEF& ef, const MatrixB& b,
            MatrixX& x, real_type& rcond, VectorFERR& ferr, VectorBERR& berr,
            integer_t& info, detail::workspace1< WORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::vector_traits<
                VectorE >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::vector_traits<
                VectorDF >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::vector_traits<
                VectorEF >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::matrix_traits<
                MatrixB >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::matrix_traits<
                MatrixX >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::vector_traits<
                VectorFERR >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::vector_traits<
                VectorBERR >::value_type >::value) );
        BOOST_ASSERT( fact == 'F' || fact == 'N' );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( traits::matrix_num_columns(x) >= 0 );
        BOOST_ASSERT( traits::vector_size(d) >= n );
        BOOST_ASSERT( traits::vector_size(e) >= n-1 );
        BOOST_ASSERT( traits::leading_dimension(b) >= std::max(1,n) );
        BOOST_ASSERT( traits::leading_dimension(x) >= std::max(1,n) );
        BOOST_ASSERT( traits::vector_size(berr) >=
                traits::matrix_num_columns(x) );
        BOOST_ASSERT( traits::vector_size(work.select(real_type())) >=
                min_size_work( n ));
        detail::ptsvx( fact, n, traits::matrix_num_columns(x),
                traits::vector_storage(d), traits::vector_storage(e),
                traits::vector_storage(df), traits::vector_storage(ef),
                traits::matrix_storage(b), traits::leading_dimension(b),
                traits::matrix_storage(x), traits::leading_dimension(x),
                rcond, traits::vector_storage(ferr),
                traits::vector_storage(berr),
                traits::vector_storage(work.select(real_type())), info );
    }

    // minimal workspace specialization
    template< typename VectorD, typename VectorE, typename VectorDF,
            typename VectorEF, typename MatrixB, typename MatrixX,
            typename VectorFERR, typename VectorBERR >
    static void invoke( const char fact, const integer_t n, const VectorD& d,
            const VectorE& e, VectorDF& df, VectorEF& ef, const MatrixB& b,
            MatrixX& x, real_type& rcond, VectorFERR& ferr, VectorBERR& berr,
            integer_t& info, minimal_workspace work ) {
        traits::detail::array< real_type > tmp_work( min_size_work( n ) );
        invoke( fact, n, d, e, df, ef, b, x, rcond, ferr, berr, info,
                workspace( tmp_work ) );
    }

    // optimal workspace specialization
    template< typename VectorD, typename VectorE, typename VectorDF,
            typename VectorEF, typename MatrixB, typename MatrixX,
            typename VectorFERR, typename VectorBERR >
    static void invoke( const char fact, const integer_t n, const VectorD& d,
            const VectorE& e, VectorDF& df, VectorEF& ef, const MatrixB& b,
            MatrixX& x, real_type& rcond, VectorFERR& ferr, VectorBERR& berr,
            integer_t& info, optimal_workspace work ) {
        invoke( fact, n, d, e, df, ef, b, x, rcond, ferr, berr, info,
                minimal_workspace() );
    }

    static integer_t min_size_work( const integer_t n ) {
        return 2*n;
    }
};

// complex specialization
template< typename ValueType >
struct ptsvx_impl< ValueType, typename boost::enable_if< traits::is_complex<ValueType> >::type > {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // user-defined workspace specialization
    template< typename VectorD, typename VectorE, typename VectorDF,
            typename VectorEF, typename MatrixB, typename MatrixX,
            typename VectorFERR, typename VectorBERR, typename WORK,
            typename RWORK >
    static void invoke( const char fact, const integer_t n, const VectorD& d,
            const VectorE& e, VectorDF& df, VectorEF& ef, const MatrixB& b,
            MatrixX& x, real_type& rcond, VectorFERR& ferr, VectorBERR& berr,
            integer_t& info, detail::workspace2< WORK, RWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::vector_traits<
                VectorDF >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::vector_traits<
                VectorFERR >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::vector_traits<
                VectorBERR >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorE >::value_type, typename traits::vector_traits<
                VectorEF >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorE >::value_type, typename traits::matrix_traits<
                MatrixB >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorE >::value_type, typename traits::matrix_traits<
                MatrixX >::value_type >::value) );
        BOOST_ASSERT( fact == 'F' || fact == 'N' );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( traits::matrix_num_columns(x) >= 0 );
        BOOST_ASSERT( traits::vector_size(d) >= n );
        BOOST_ASSERT( traits::vector_size(e) >= n-1 );
        BOOST_ASSERT( traits::leading_dimension(b) >= std::max(1,n) );
        BOOST_ASSERT( traits::leading_dimension(x) >= std::max(1,n) );
        BOOST_ASSERT( traits::vector_size(berr) >=
                traits::matrix_num_columns(x) );
        BOOST_ASSERT( traits::vector_size(work.select(value_type())) >=
                min_size_work( n ));
        BOOST_ASSERT( traits::vector_size(work.select(real_type())) >=
                min_size_rwork( n ));
        detail::ptsvx( fact, n, traits::matrix_num_columns(x),
                traits::vector_storage(d), traits::vector_storage(e),
                traits::vector_storage(df), traits::vector_storage(ef),
                traits::matrix_storage(b), traits::leading_dimension(b),
                traits::matrix_storage(x), traits::leading_dimension(x),
                rcond, traits::vector_storage(ferr),
                traits::vector_storage(berr),
                traits::vector_storage(work.select(value_type())),
                traits::vector_storage(work.select(real_type())), info );
    }

    // minimal workspace specialization
    template< typename VectorD, typename VectorE, typename VectorDF,
            typename VectorEF, typename MatrixB, typename MatrixX,
            typename VectorFERR, typename VectorBERR >
    static void invoke( const char fact, const integer_t n, const VectorD& d,
            const VectorE& e, VectorDF& df, VectorEF& ef, const MatrixB& b,
            MatrixX& x, real_type& rcond, VectorFERR& ferr, VectorBERR& berr,
            integer_t& info, minimal_workspace work ) {
        traits::detail::array< value_type > tmp_work( min_size_work( n ) );
        traits::detail::array< real_type > tmp_rwork( min_size_rwork( n ) );
        invoke( fact, n, d, e, df, ef, b, x, rcond, ferr, berr, info,
                workspace( tmp_work, tmp_rwork ) );
    }

    // optimal workspace specialization
    template< typename VectorD, typename VectorE, typename VectorDF,
            typename VectorEF, typename MatrixB, typename MatrixX,
            typename VectorFERR, typename VectorBERR >
    static void invoke( const char fact, const integer_t n, const VectorD& d,
            const VectorE& e, VectorDF& df, VectorEF& ef, const MatrixB& b,
            MatrixX& x, real_type& rcond, VectorFERR& ferr, VectorBERR& berr,
            integer_t& info, optimal_workspace work ) {
        invoke( fact, n, d, e, df, ef, b, x, rcond, ferr, berr, info,
                minimal_workspace() );
    }

    static integer_t min_size_work( const integer_t n ) {
        return n;
    }

    static integer_t min_size_rwork( const integer_t n ) {
        return n;
    }
};


// template function to call ptsvx
template< typename VectorD, typename VectorE, typename VectorDF,
        typename VectorEF, typename MatrixB, typename MatrixX,
        typename VectorFERR, typename VectorBERR, typename Workspace >
inline integer_t ptsvx( const char fact, const integer_t n,
        const VectorD& d, const VectorE& e, VectorDF& df, VectorEF& ef,
        const MatrixB& b, MatrixX& x, typename traits::type_traits<
        typename traits::vector_traits<
        VectorE >::value_type >::real_type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    typedef typename traits::vector_traits< VectorE >::value_type value_type;
    integer_t info(0);
    ptsvx_impl< value_type >::invoke( fact, n, d, e, df, ef, b, x, rcond,
            ferr, berr, info, work );
    return info;
}

// template function to call ptsvx, default workspace type
template< typename VectorD, typename VectorE, typename VectorDF,
        typename VectorEF, typename MatrixB, typename MatrixX,
        typename VectorFERR, typename VectorBERR >
inline integer_t ptsvx( const char fact, const integer_t n,
        const VectorD& d, const VectorE& e, VectorDF& df, VectorEF& ef,
        const MatrixB& b, MatrixX& x, typename traits::type_traits<
        typename traits::vector_traits<
        VectorE >::value_type >::real_type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    typedef typename traits::vector_traits< VectorE >::value_type value_type;
    integer_t info(0);
    ptsvx_impl< value_type >::invoke( fact, n, d, e, df, ef, b, x, rcond,
            ferr, berr, info, optimal_workspace() );
    return info;
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
