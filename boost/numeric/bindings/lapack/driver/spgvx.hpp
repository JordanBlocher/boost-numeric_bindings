//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_SPGVX_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_SPGVX_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/data_side.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to float value-type.
//
template< typename UpLo >
inline void spgvx( fortran_int_t itype, char jobz, char range, UpLo,
        fortran_int_t n, float* ap, float* bp, float vl, float vu,
        fortran_int_t il, fortran_int_t iu, float abstol, fortran_int_t& m,
        float* w, float* z, fortran_int_t ldz, float* work,
        fortran_int_t* iwork, fortran_int_t* ifail, fortran_int_t& info ) {
    LAPACK_SSPGVX( &itype, &jobz, &range, &lapack_option< UpLo >::value, &n,
            ap, bp, &vl, &vu, &il, &iu, &abstol, &m, w, z, &ldz, work, iwork,
            ifail, &info );
}

//
// Overloaded function for dispatching to double value-type.
//
template< typename UpLo >
inline void spgvx( fortran_int_t itype, char jobz, char range, UpLo,
        fortran_int_t n, double* ap, double* bp, double vl, double vu,
        fortran_int_t il, fortran_int_t iu, double abstol, fortran_int_t& m,
        double* w, double* z, fortran_int_t ldz, double* work,
        fortran_int_t* iwork, fortran_int_t* ifail, fortran_int_t& info ) {
    LAPACK_DSPGVX( &itype, &jobz, &range, &lapack_option< UpLo >::value, &n,
            ap, bp, &vl, &vu, &il, &iu, &abstol, &m, w, z, &ldz, work, iwork,
            ifail, &info );
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to spgvx.
//
template< typename Value >
struct spgvx_impl {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixAP, typename MatrixBP, typename VectorW,
            typename MatrixZ, typename VectorIFAIL, typename WORK,
            typename IWORK >
    static void invoke( const fortran_int_t itype, const char jobz,
            const char range, const fortran_int_t n, MatrixAP& ap,
            MatrixBP& bp, const real_type vl, const real_type vu,
            const fortran_int_t il, const fortran_int_t iu,
            const real_type abstol, fortran_int_t& m, VectorW& w,
            MatrixZ& z, VectorIFAIL& ifail, fortran_int_t& info,
            detail::workspace2< WORK, IWORK > work ) {
        typedef typename result_of::data_side< MatrixAP >::type uplo;
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAP >::type >::type,
                typename remove_const< typename value<
                MatrixBP >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAP >::type >::type,
                typename remove_const< typename value<
                VectorW >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAP >::type >::type,
                typename remove_const< typename value<
                MatrixZ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixAP >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixBP >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorW >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixZ >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorIFAIL >::value) );
        BOOST_ASSERT( jobz == 'N' || jobz == 'V' );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( range == 'A' || range == 'V' || range == 'I' );
        BOOST_ASSERT( size(w) >= n );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( n ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work( n ));
        BOOST_ASSERT( size_minor(z) == 1 || stride_minor(z) == 1 );
        detail::spgvx( itype, jobz, range, uplo(), n, begin_value(ap),
                begin_value(bp), vl, vu, il, iu, abstol, m, begin_value(w),
                begin_value(z), stride_major(z),
                begin_value(work.select(real_type())),
                begin_value(work.select(fortran_int_t())),
                begin_value(ifail), info );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixAP, typename MatrixBP, typename VectorW,
            typename MatrixZ, typename VectorIFAIL >
    static void invoke( const fortran_int_t itype, const char jobz,
            const char range, const fortran_int_t n, MatrixAP& ap,
            MatrixBP& bp, const real_type vl, const real_type vu,
            const fortran_int_t il, const fortran_int_t iu,
            const real_type abstol, fortran_int_t& m, VectorW& w,
            MatrixZ& z, VectorIFAIL& ifail, fortran_int_t& info,
            minimal_workspace work ) {
        typedef typename result_of::data_side< MatrixAP >::type uplo;
        bindings::detail::array< real_type > tmp_work( min_size_work( n ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( n ) );
        invoke( itype, jobz, range, n, ap, bp, vl, vu, il, iu, abstol, m, w,
                z, ifail, info, workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixAP, typename MatrixBP, typename VectorW,
            typename MatrixZ, typename VectorIFAIL >
    static void invoke( const fortran_int_t itype, const char jobz,
            const char range, const fortran_int_t n, MatrixAP& ap,
            MatrixBP& bp, const real_type vl, const real_type vu,
            const fortran_int_t il, const fortran_int_t iu,
            const real_type abstol, fortran_int_t& m, VectorW& w,
            MatrixZ& z, VectorIFAIL& ifail, fortran_int_t& info,
            optimal_workspace work ) {
        typedef typename result_of::data_side< MatrixAP >::type uplo;
        invoke( itype, jobz, range, n, ap, bp, vl, vu, il, iu, abstol, m, w,
                z, ifail, info, minimal_workspace() );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n ) {
        return 8*n;
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( const std::ptrdiff_t n ) {
        return 5*n;
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the spgvx_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, MatrixZ& z, VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, MatrixZ& z, VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, MatrixZ& z, VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m, VectorW& w,
        MatrixZ& z, VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m, VectorW& w,
        MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * const VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * const VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * const VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * const VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, const MatrixZ& z, VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, const MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, const MatrixZ& z, VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, const MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, const MatrixZ& z, VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, const MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m, VectorW& w,
        const MatrixZ& z, VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m, VectorW& w,
        const MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, MatrixZ& z, const VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, MatrixZ& z, const VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, MatrixZ& z, const VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m, VectorW& w,
        MatrixZ& z, const VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m, VectorW& w,
        MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * const VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, const VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * const VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * const VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, const VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * const VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, const VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, const VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m, VectorW& w,
        const MatrixZ& z, const VectorIFAIL& ifail, Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m, VectorW& w,
        const MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        MatrixAP& ap, const MatrixBP& bp, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vl,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vu, const fortran_int_t il,
        const fortran_int_t iu, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * User-defined workspace
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL, typename Workspace >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail,
        Workspace work ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            work );
    return info;
}

//
// Overloaded function for spgvx. Its overload differs for
// * const MatrixAP&
// * const MatrixBP&
// * const VectorW&
// * const MatrixZ&
// * const VectorIFAIL&
// * Default workspace-type (optimal)
//
template< typename MatrixAP, typename MatrixBP, typename VectorW,
        typename MatrixZ, typename VectorIFAIL >
inline std::ptrdiff_t spgvx( const fortran_int_t itype,
        const char jobz, const char range, const fortran_int_t n,
        const MatrixAP& ap, const MatrixBP& bp,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixAP >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixAP >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, const VectorIFAIL& ifail ) {
    fortran_int_t info(0);
    spgvx_impl< typename value< MatrixAP >::type >::invoke( itype, jobz,
            range, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ifail, info,
            optimal_workspace() );
    return info;
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
