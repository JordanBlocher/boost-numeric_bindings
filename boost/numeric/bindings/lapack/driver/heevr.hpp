//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_HEEVR_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_HEEVR_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/data_side.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/traits/detail/utils.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>

//
// The LAPACK-backend for heevr is the netlib-compatible backend.
//
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<float> value-type.
//
template< typename UpLo >
inline std::ptrdiff_t heevr( const char jobz, const char range, UpLo,
        const fortran_int_t n, std::complex<float>* a,
        const fortran_int_t lda, const float vl, const float vu,
        const fortran_int_t il, const fortran_int_t iu, const float abstol,
        fortran_int_t& m, float* w, std::complex<float>* z,
        const fortran_int_t ldz, fortran_int_t* isuppz,
        std::complex<float>* work, const fortran_int_t lwork, float* rwork,
        const fortran_int_t lrwork, fortran_int_t* iwork,
        const fortran_int_t liwork ) {
    fortran_int_t info(0);
    LAPACK_CHEEVR( &jobz, &range, &lapack_option< UpLo >::value, &n, a, &lda,
            &vl, &vu, &il, &iu, &abstol, &m, w, z, &ldz, isuppz, work, &lwork,
            rwork, &lrwork, iwork, &liwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<double> value-type.
//
template< typename UpLo >
inline std::ptrdiff_t heevr( const char jobz, const char range, UpLo,
        const fortran_int_t n, std::complex<double>* a,
        const fortran_int_t lda, const double vl, const double vu,
        const fortran_int_t il, const fortran_int_t iu, const double abstol,
        fortran_int_t& m, double* w, std::complex<double>* z,
        const fortran_int_t ldz, fortran_int_t* isuppz,
        std::complex<double>* work, const fortran_int_t lwork, double* rwork,
        const fortran_int_t lrwork, fortran_int_t* iwork,
        const fortran_int_t liwork ) {
    fortran_int_t info(0);
    LAPACK_ZHEEVR( &jobz, &range, &lapack_option< UpLo >::value, &n, a, &lda,
            &vl, &vu, &il, &iu, &abstol, &m, w, z, &ldz, isuppz, work, &lwork,
            rwork, &lrwork, iwork, &liwork, &info );
    return info;
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to heevr.
//
template< typename Value >
struct heevr_impl {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixA, typename VectorW, typename MatrixZ,
            typename VectorISUPPZ, typename WORK, typename RWORK,
            typename IWORK >
    static std::ptrdiff_t invoke( const char jobz, const char range,
            MatrixA& a, const real_type vl, const real_type vu,
            const fortran_int_t il, const fortran_int_t iu,
            const real_type abstol, fortran_int_t& m, VectorW& w,
            MatrixZ& z, VectorISUPPZ& isuppz, detail::workspace3< WORK, RWORK,
            IWORK > work ) {
        typedef typename result_of::data_side< MatrixA >::type uplo;
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixZ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorW >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixZ >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorISUPPZ >::value) );
        BOOST_ASSERT( jobz == 'N' || jobz == 'V' );
        BOOST_ASSERT( range == 'A' || range == 'V' || range == 'I' );
        BOOST_ASSERT( size(isuppz) >= 2*std::max< std::ptrdiff_t >(1,m) );
        BOOST_ASSERT( size(w) >= size_column(a) );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( size_column(a) ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_rwork(
                size_column(a) ));
        BOOST_ASSERT( size(work.select(value_type())) >= min_size_work(
                size_column(a) ));
        BOOST_ASSERT( size_column(a) >= 0 );
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(z) == 1 || stride_minor(z) == 1 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,
                size_column(a)) );
        return detail::heevr( jobz, range, uplo(), size_column(a),
                begin_value(a), stride_major(a), vl, vu, il, iu, abstol, m,
                begin_value(w), begin_value(z), stride_major(z),
                begin_value(isuppz), begin_value(work.select(value_type())),
                size(work.select(value_type())),
                begin_value(work.select(real_type())),
                size(work.select(real_type())),
                begin_value(work.select(fortran_int_t())),
                size(work.select(fortran_int_t())) );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixA, typename VectorW, typename MatrixZ,
            typename VectorISUPPZ >
    static std::ptrdiff_t invoke( const char jobz, const char range,
            MatrixA& a, const real_type vl, const real_type vu,
            const fortran_int_t il, const fortran_int_t iu,
            const real_type abstol, fortran_int_t& m, VectorW& w,
            MatrixZ& z, VectorISUPPZ& isuppz, minimal_workspace work ) {
        typedef typename result_of::data_side< MatrixA >::type uplo;
        bindings::detail::array< value_type > tmp_work( min_size_work(
                size_column(a) ) );
        bindings::detail::array< real_type > tmp_rwork( min_size_rwork(
                size_column(a) ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( size_column(a) ) );
        return invoke( jobz, range, a, vl, vu, il, iu, abstol, m, w, z,
                isuppz, workspace( tmp_work, tmp_rwork, tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixA, typename VectorW, typename MatrixZ,
            typename VectorISUPPZ >
    static std::ptrdiff_t invoke( const char jobz, const char range,
            MatrixA& a, const real_type vl, const real_type vu,
            const fortran_int_t il, const fortran_int_t iu,
            const real_type abstol, fortran_int_t& m, VectorW& w,
            MatrixZ& z, VectorISUPPZ& isuppz, optimal_workspace work ) {
        typedef typename result_of::data_side< MatrixA >::type uplo;
        value_type opt_size_work;
        real_type opt_size_rwork;
        fortran_int_t opt_size_iwork;
        detail::heevr( jobz, range, uplo(), size_column(a),
                begin_value(a), stride_major(a), vl, vu, il, iu, abstol, m,
                begin_value(w), begin_value(z), stride_major(z),
                begin_value(isuppz), &opt_size_work, -1, &opt_size_rwork, -1,
                &opt_size_iwork, -1 );
        bindings::detail::array< value_type > tmp_work(
                traits::detail::to_int( opt_size_work ) );
        bindings::detail::array< real_type > tmp_rwork(
                traits::detail::to_int( opt_size_rwork ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                opt_size_iwork );
        return invoke( jobz, range, a, vl, vu, il, iu, abstol, m, w, z,
                isuppz, workspace( tmp_work, tmp_rwork, tmp_iwork ) );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n ) {
        return std::max< std::ptrdiff_t >( 1, 2*n );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array rwork.
    //
    static std::ptrdiff_t min_size_rwork( const std::ptrdiff_t n ) {
        return std::max< std::ptrdiff_t >( 1, 24*n );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( const std::ptrdiff_t n ) {
        return std::max< std::ptrdiff_t >( 1, 10*n );
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the heevr_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        MatrixZ& z, VectorISUPPZ& isuppz, Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        MatrixZ& z, VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        MatrixZ& z, VectorISUPPZ& isuppz, Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        MatrixZ& z, VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, VectorISUPPZ& isuppz, Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, VectorISUPPZ& isuppz, Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        const MatrixZ& z, VectorISUPPZ& isuppz, Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        const MatrixZ& z, VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        const MatrixZ& z, VectorISUPPZ& isuppz, Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        const MatrixZ& z, VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, VectorISUPPZ& isuppz,
        Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, VectorISUPPZ& isuppz,
        Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        MatrixZ& z, const VectorISUPPZ& isuppz, Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        MatrixZ& z, const VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        MatrixZ& z, const VectorISUPPZ& isuppz, Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        MatrixZ& z, const VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, const VectorISUPPZ& isuppz,
        Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, const VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, const VectorISUPPZ& isuppz,
        Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, MatrixZ& z, const VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        const MatrixZ& z, const VectorISUPPZ& isuppz, Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        const MatrixZ& z, const VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        const MatrixZ& z, const VectorISUPPZ& isuppz, Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m, VectorW& w,
        const MatrixZ& z, const VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, const VectorISUPPZ& isuppz,
        Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * MatrixA&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, const VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, const VectorISUPPZ& isuppz,
        Workspace work ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz, work );
}

//
// Overloaded function for heevr. Its overload differs for
// * const MatrixA&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixZ,
        typename VectorISUPPZ >
inline std::ptrdiff_t heevr( const char jobz, const char range,
        const MatrixA& a, const typename remove_imaginary< typename value<
        MatrixA >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixA >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const typename remove_imaginary< typename value<
        MatrixA >::type >::type abstol, fortran_int_t& m,
        const VectorW& w, const MatrixZ& z, const VectorISUPPZ& isuppz ) {
    return heevr_impl< typename value< MatrixA >::type >::invoke( jobz,
            range, a, vl, vu, il, iu, abstol, m, w, z, isuppz,
            optimal_workspace() );
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
