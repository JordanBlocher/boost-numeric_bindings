//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_GGSVD_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_GGSVD_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_complex.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/is_real.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/utility/enable_if.hpp>

//
// The LAPACK-backend for ggsvd is the netlib-compatible backend.
//
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * float value-type.
//
inline std::ptrdiff_t ggsvd( char jobu, char jobv, char jobq, fortran_int_t m,
        fortran_int_t n, fortran_int_t p, fortran_int_t& k, fortran_int_t& l,
        float* a, fortran_int_t lda, float* b, fortran_int_t ldb,
        float* alpha, float* beta, float* u, fortran_int_t ldu, float* v,
        fortran_int_t ldv, float* q, fortran_int_t ldq, float* work,
        fortran_int_t* iwork ) {
    fortran_int_t info(0);
    LAPACK_SGGSVD( &jobu, &jobv, &jobq, &m, &n, &p, &k, &l, a, &lda, b, &ldb,
            alpha, beta, u, &ldu, v, &ldv, q, &ldq, work, iwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * double value-type.
//
inline std::ptrdiff_t ggsvd( char jobu, char jobv, char jobq, fortran_int_t m,
        fortran_int_t n, fortran_int_t p, fortran_int_t& k, fortran_int_t& l,
        double* a, fortran_int_t lda, double* b, fortran_int_t ldb,
        double* alpha, double* beta, double* u, fortran_int_t ldu, double* v,
        fortran_int_t ldv, double* q, fortran_int_t ldq, double* work,
        fortran_int_t* iwork ) {
    fortran_int_t info(0);
    LAPACK_DGGSVD( &jobu, &jobv, &jobq, &m, &n, &p, &k, &l, a, &lda, b, &ldb,
            alpha, beta, u, &ldu, v, &ldv, q, &ldq, work, iwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<float> value-type.
//
inline std::ptrdiff_t ggsvd( char jobu, char jobv, char jobq, fortran_int_t m,
        fortran_int_t n, fortran_int_t p, fortran_int_t& k, fortran_int_t& l,
        std::complex<float>* a, fortran_int_t lda, std::complex<float>* b,
        fortran_int_t ldb, float* alpha, float* beta, std::complex<float>* u,
        fortran_int_t ldu, std::complex<float>* v, fortran_int_t ldv,
        std::complex<float>* q, fortran_int_t ldq, std::complex<float>* work,
        float* rwork, fortran_int_t* iwork ) {
    fortran_int_t info(0);
    LAPACK_CGGSVD( &jobu, &jobv, &jobq, &m, &n, &p, &k, &l, a, &lda, b, &ldb,
            alpha, beta, u, &ldu, v, &ldv, q, &ldq, work, rwork, iwork,
            &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<double> value-type.
//
inline std::ptrdiff_t ggsvd( char jobu, char jobv, char jobq, fortran_int_t m,
        fortran_int_t n, fortran_int_t p, fortran_int_t& k, fortran_int_t& l,
        std::complex<double>* a, fortran_int_t lda, std::complex<double>* b,
        fortran_int_t ldb, double* alpha, double* beta,
        std::complex<double>* u, fortran_int_t ldu, std::complex<double>* v,
        fortran_int_t ldv, std::complex<double>* q, fortran_int_t ldq,
        std::complex<double>* work, double* rwork, fortran_int_t* iwork ) {
    fortran_int_t info(0);
    LAPACK_ZGGSVD( &jobu, &jobv, &jobq, &m, &n, &p, &k, &l, a, &lda, b, &ldb,
            alpha, beta, u, &ldu, v, &ldv, q, &ldq, work, rwork, iwork,
            &info );
    return info;
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to ggsvd.
//
template< typename Value, typename Enable = void >
struct ggsvd_impl {};

//
// This implementation is enabled if Value is a real type.
//
template< typename Value >
struct ggsvd_impl< Value, typename boost::enable_if< is_real< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixA, typename MatrixB, typename VectorALPHA,
            typename VectorBETA, typename MatrixU, typename MatrixV,
            typename MatrixQ, typename WORK, typename IWORK >
    static std::ptrdiff_t invoke( const char jobu, const char jobv,
            const char jobq, fortran_int_t& k, fortran_int_t& l,
            MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
            MatrixU& u, MatrixV& v, MatrixQ& q, detail::workspace2< WORK,
            IWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixB >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorALPHA >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorBETA >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixU >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixV >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixQ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorALPHA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorBETA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixU >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixV >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixQ >::value) );
        BOOST_ASSERT( jobq == 'Q' || jobq == 'N' );
        BOOST_ASSERT( jobu == 'U' || jobu == 'N' );
        BOOST_ASSERT( jobv == 'V' || jobv == 'N' );
        BOOST_ASSERT( size(alpha) >= size_column(b) );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( size_column(b) ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work(
                size_column(b), size_row(a), size_row(b) ));
        BOOST_ASSERT( size_column(b) >= 0 );
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(b) == 1 || stride_minor(b) == 1 );
        BOOST_ASSERT( size_minor(q) == 1 || stride_minor(q) == 1 );
        BOOST_ASSERT( size_minor(u) == 1 || stride_minor(u) == 1 );
        BOOST_ASSERT( size_minor(v) == 1 || stride_minor(v) == 1 );
        BOOST_ASSERT( size_row(a) >= 0 );
        BOOST_ASSERT( size_row(b) >= 0 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,
                size_row(a)) );
        BOOST_ASSERT( stride_major(b) >= std::max< std::ptrdiff_t >(1,
                size_row(b)) );
        return detail::ggsvd( jobu, jobv, jobq, size_row(a), size_column(b),
                size_row(b), k, l, begin_value(a), stride_major(a),
                begin_value(b), stride_major(b), begin_value(alpha),
                begin_value(beta), begin_value(u), stride_major(u),
                begin_value(v), stride_major(v), begin_value(q),
                stride_major(q), begin_value(work.select(real_type())),
                begin_value(work.select(fortran_int_t())) );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixA, typename MatrixB, typename VectorALPHA,
            typename VectorBETA, typename MatrixU, typename MatrixV,
            typename MatrixQ >
    static std::ptrdiff_t invoke( const char jobu, const char jobv,
            const char jobq, fortran_int_t& k, fortran_int_t& l,
            MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
            MatrixU& u, MatrixV& v, MatrixQ& q, minimal_workspace work ) {
        bindings::detail::array< real_type > tmp_work( min_size_work(
                size_column(b), size_row(a), size_row(b) ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( size_column(b) ) );
        return invoke( jobu, jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
                workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixA, typename MatrixB, typename VectorALPHA,
            typename VectorBETA, typename MatrixU, typename MatrixV,
            typename MatrixQ >
    static std::ptrdiff_t invoke( const char jobu, const char jobv,
            const char jobq, fortran_int_t& k, fortran_int_t& l,
            MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
            MatrixU& u, MatrixV& v, MatrixQ& q, optimal_workspace work ) {
        return invoke( jobu, jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
                minimal_workspace() );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n,
            const std::ptrdiff_t m, const std::ptrdiff_t p ) {
        return std::max< std::ptrdiff_t >(3*n,std::max< std::ptrdiff_t >(m,p))+n;
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( const std::ptrdiff_t n ) {
        return n;
    }
};

//
// This implementation is enabled if Value is a complex type.
//
template< typename Value >
struct ggsvd_impl< Value, typename boost::enable_if< is_complex< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixA, typename MatrixB, typename VectorALPHA,
            typename VectorBETA, typename MatrixU, typename MatrixV,
            typename MatrixQ, typename WORK, typename RWORK, typename IWORK >
    static std::ptrdiff_t invoke( const char jobu, const char jobv,
            const char jobq, fortran_int_t& k, fortran_int_t& l,
            MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
            MatrixU& u, MatrixV& v, MatrixQ& q, detail::workspace3< WORK,
            RWORK, IWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorALPHA >::type >::type,
                typename remove_const< typename value<
                VectorBETA >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixB >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixU >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixV >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixQ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorALPHA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorBETA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixU >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixV >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixQ >::value) );
        BOOST_ASSERT( jobq == 'Q' || jobq == 'N' );
        BOOST_ASSERT( jobu == 'U' || jobu == 'N' );
        BOOST_ASSERT( jobv == 'V' || jobv == 'N' );
        BOOST_ASSERT( size(alpha) >= size_column(b) );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( size_column(b) ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_rwork(
                size_column(b) ));
        BOOST_ASSERT( size(work.select(value_type())) >= min_size_work(
                size_column(b), size_row(a), size_row(b) ));
        BOOST_ASSERT( size_column(b) >= 0 );
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(b) == 1 || stride_minor(b) == 1 );
        BOOST_ASSERT( size_minor(q) == 1 || stride_minor(q) == 1 );
        BOOST_ASSERT( size_minor(u) == 1 || stride_minor(u) == 1 );
        BOOST_ASSERT( size_minor(v) == 1 || stride_minor(v) == 1 );
        BOOST_ASSERT( size_row(a) >= 0 );
        BOOST_ASSERT( size_row(b) >= 0 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,
                size_row(a)) );
        BOOST_ASSERT( stride_major(b) >= std::max< std::ptrdiff_t >(1,
                size_row(b)) );
        return detail::ggsvd( jobu, jobv, jobq, size_row(a), size_column(b),
                size_row(b), k, l, begin_value(a), stride_major(a),
                begin_value(b), stride_major(b), begin_value(alpha),
                begin_value(beta), begin_value(u), stride_major(u),
                begin_value(v), stride_major(v), begin_value(q),
                stride_major(q), begin_value(work.select(value_type())),
                begin_value(work.select(real_type())),
                begin_value(work.select(fortran_int_t())) );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixA, typename MatrixB, typename VectorALPHA,
            typename VectorBETA, typename MatrixU, typename MatrixV,
            typename MatrixQ >
    static std::ptrdiff_t invoke( const char jobu, const char jobv,
            const char jobq, fortran_int_t& k, fortran_int_t& l,
            MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
            MatrixU& u, MatrixV& v, MatrixQ& q, minimal_workspace work ) {
        bindings::detail::array< value_type > tmp_work( min_size_work(
                size_column(b), size_row(a), size_row(b) ) );
        bindings::detail::array< real_type > tmp_rwork( min_size_rwork(
                size_column(b) ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( size_column(b) ) );
        return invoke( jobu, jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
                workspace( tmp_work, tmp_rwork, tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixA, typename MatrixB, typename VectorALPHA,
            typename VectorBETA, typename MatrixU, typename MatrixV,
            typename MatrixQ >
    static std::ptrdiff_t invoke( const char jobu, const char jobv,
            const char jobq, fortran_int_t& k, fortran_int_t& l,
            MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
            MatrixU& u, MatrixV& v, MatrixQ& q, optimal_workspace work ) {
        return invoke( jobu, jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
                minimal_workspace() );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n,
            const std::ptrdiff_t m, const std::ptrdiff_t p ) {
        return std::max< std::ptrdiff_t >(3*n,std::max< std::ptrdiff_t >(m,p))+n;
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array rwork.
    //
    static std::ptrdiff_t min_size_rwork( const std::ptrdiff_t n ) {
        return 2*n;
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( const std::ptrdiff_t n ) {
        return n;
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the ggsvd_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixU& u, MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixU& u, MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixU& u, const MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v, MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixU& u, MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixU& u, MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixU& u, MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixU& u, const MatrixV& v, const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, const MatrixQ& q,
        Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixU& u, const MatrixV& v, const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * User-defined workspace
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ, typename Workspace >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q, Workspace work ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q, work );
}

//
// Overloaded function for ggsvd. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixU&
// * const MatrixV&
// * const MatrixQ&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename MatrixB, typename VectorALPHA,
        typename VectorBETA, typename MatrixU, typename MatrixV,
        typename MatrixQ >
inline std::ptrdiff_t ggsvd( const char jobu, const char jobv,
        const char jobq, fortran_int_t& k, fortran_int_t& l,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixU& u, const MatrixV& v,
        const MatrixQ& q ) {
    return ggsvd_impl< typename value< MatrixA >::type >::invoke( jobu,
            jobv, jobq, k, l, a, b, alpha, beta, u, v, q,
            optimal_workspace() );
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
