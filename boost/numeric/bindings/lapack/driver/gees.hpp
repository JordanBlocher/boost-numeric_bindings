//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_GEES_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_GEES_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_complex.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/is_real.hpp>
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/traits/detail/utils.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/utility/enable_if.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to float value-type.
//
inline void gees( char jobvs, char sort, logical_t* select, fortran_int_t n,
        float* a, fortran_int_t lda, fortran_int_t& sdim, float* wr,
        float* wi, float* vs, fortran_int_t ldvs, float* work,
        fortran_int_t lwork, logical_t* bwork, fortran_int_t& info ) {
    LAPACK_SGEES( &jobvs, &sort, &select, &n, a, &lda, &sdim, wr, wi, vs,
            &ldvs, work, &lwork, bwork, &info );
}

//
// Overloaded function for dispatching to double value-type.
//
inline void gees( char jobvs, char sort, logical_t* select, fortran_int_t n,
        double* a, fortran_int_t lda, fortran_int_t& sdim, double* wr,
        double* wi, double* vs, fortran_int_t ldvs, double* work,
        fortran_int_t lwork, logical_t* bwork, fortran_int_t& info ) {
    LAPACK_DGEES( &jobvs, &sort, &select, &n, a, &lda, &sdim, wr, wi, vs,
            &ldvs, work, &lwork, bwork, &info );
}

//
// Overloaded function for dispatching to complex<float> value-type.
//
inline void gees( char jobvs, char sort, logical_t* select, fortran_int_t n,
        std::complex<float>* a, fortran_int_t lda, fortran_int_t& sdim,
        std::complex<float>* w, std::complex<float>* vs, fortran_int_t ldvs,
        std::complex<float>* work, fortran_int_t lwork, float* rwork,
        logical_t* bwork, fortran_int_t& info ) {
    LAPACK_CGEES( &jobvs, &sort, &select, &n, a, &lda, &sdim, w, vs, &ldvs,
            work, &lwork, rwork, bwork, &info );
}

//
// Overloaded function for dispatching to complex<double> value-type.
//
inline void gees( char jobvs, char sort, logical_t* select, fortran_int_t n,
        std::complex<double>* a, fortran_int_t lda, fortran_int_t& sdim,
        std::complex<double>* w, std::complex<double>* vs, fortran_int_t ldvs,
        std::complex<double>* work, fortran_int_t lwork, double* rwork,
        logical_t* bwork, fortran_int_t& info ) {
    LAPACK_ZGEES( &jobvs, &sort, &select, &n, a, &lda, &sdim, w, vs, &ldvs,
            work, &lwork, rwork, bwork, &info );
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to gees.
//
template< typename Value, typename Enable = void >
struct gees_impl {};

//
// This implementation is enabled if Value is a real type.
//
template< typename Value >
struct gees_impl< Value, typename boost::enable_if< is_real< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixA, typename VectorWR, typename VectorWI,
            typename MatrixVS, typename WORK, typename BWORK >
    static void invoke( const char jobvs, const char sort, logical_t* select,
            MatrixA& a, fortran_int_t& sdim, VectorWR& wr, VectorWI& wi,
            MatrixVS& vs, fortran_int_t& info, detail::workspace2< WORK,
            BWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorWR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorWI >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixVS >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorWR >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorWI >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixVS >::value) );
        BOOST_ASSERT( jobvs == 'N' || jobvs == 'V' );
        BOOST_ASSERT( size(wi) >= size_column(a) );
        BOOST_ASSERT( size(work.select(bool())) >= min_size_bwork(
                size_column(a), sort ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work(
                size_column(a) ));
        BOOST_ASSERT( size(wr) >= size_column(a) );
        BOOST_ASSERT( size_column(a) >= 0 );
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(vs) == 1 || stride_minor(vs) == 1 );
        BOOST_ASSERT( sort == 'N' || sort == 'S' );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,
                size_column(a)) );
        detail::gees( jobvs, sort, select, size_column(a), begin_value(a),
                stride_major(a), sdim, begin_value(wr), begin_value(wi),
                begin_value(vs), stride_major(vs),
                begin_value(work.select(real_type())),
                size(work.select(real_type())),
                begin_value(work.select(bool())), info );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixA, typename VectorWR, typename VectorWI,
            typename MatrixVS >
    static void invoke( const char jobvs, const char sort, logical_t* select,
            MatrixA& a, fortran_int_t& sdim, VectorWR& wr, VectorWI& wi,
            MatrixVS& vs, fortran_int_t& info, minimal_workspace work ) {
        bindings::detail::array< real_type > tmp_work( min_size_work(
                size_column(a) ) );
        bindings::detail::array< bool > tmp_bwork( min_size_bwork(
                size_column(a), sort ) );
        invoke( jobvs, sort, select, a, sdim, wr, wi, vs, info,
                workspace( tmp_work, tmp_bwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixA, typename VectorWR, typename VectorWI,
            typename MatrixVS >
    static void invoke( const char jobvs, const char sort, logical_t* select,
            MatrixA& a, fortran_int_t& sdim, VectorWR& wr, VectorWI& wi,
            MatrixVS& vs, fortran_int_t& info, optimal_workspace work ) {
        real_type opt_size_work;
        bindings::detail::array< bool > tmp_bwork( min_size_bwork(
                size_column(a), sort ) );
        detail::gees( jobvs, sort, select, size_column(a),
                begin_value(a), stride_major(a), sdim, begin_value(wr),
                begin_value(wi), begin_value(vs), stride_major(vs),
                &opt_size_work, -1, begin_value(tmp_bwork), info );
        bindings::detail::array< real_type > tmp_work(
                traits::detail::to_int( opt_size_work ) );
        invoke( jobvs, sort, select, a, sdim, wr, wi, vs, info,
                workspace( tmp_work, tmp_bwork ) );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n ) {
        return std::max< std::ptrdiff_t >( 1, 3*n );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array bwork.
    //
    static std::ptrdiff_t min_size_bwork( const std::ptrdiff_t n,
            const char sort ) {
        if ( sort == 'N' )
            return 0;
        else
            return n;
    }
};

//
// This implementation is enabled if Value is a complex type.
//
template< typename Value >
struct gees_impl< Value, typename boost::enable_if< is_complex< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixA, typename VectorW, typename MatrixVS,
            typename WORK, typename RWORK, typename BWORK >
    static void invoke( const char jobvs, const char sort, logical_t* select,
            MatrixA& a, fortran_int_t& sdim, VectorW& w, MatrixVS& vs,
            fortran_int_t& info, detail::workspace3< WORK, RWORK,
            BWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorW >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixVS >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorW >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixVS >::value) );
        BOOST_ASSERT( jobvs == 'N' || jobvs == 'V' );
        BOOST_ASSERT( size(w) >= size_column(a) );
        BOOST_ASSERT( size(work.select(bool())) >= min_size_bwork(
                size_column(a), sort ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_rwork(
                size_column(a) ));
        BOOST_ASSERT( size(work.select(value_type())) >= min_size_work(
                size_column(a) ));
        BOOST_ASSERT( size_column(a) >= 0 );
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(vs) == 1 || stride_minor(vs) == 1 );
        BOOST_ASSERT( sort == 'N' || sort == 'S' );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,
                size_column(a)) );
        detail::gees( jobvs, sort, select, size_column(a), begin_value(a),
                stride_major(a), sdim, begin_value(w), begin_value(vs),
                stride_major(vs), begin_value(work.select(value_type())),
                size(work.select(value_type())),
                begin_value(work.select(real_type())),
                begin_value(work.select(bool())), info );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixA, typename VectorW, typename MatrixVS >
    static void invoke( const char jobvs, const char sort, logical_t* select,
            MatrixA& a, fortran_int_t& sdim, VectorW& w, MatrixVS& vs,
            fortran_int_t& info, minimal_workspace work ) {
        bindings::detail::array< value_type > tmp_work( min_size_work(
                size_column(a) ) );
        bindings::detail::array< real_type > tmp_rwork( min_size_rwork(
                size_column(a) ) );
        bindings::detail::array< bool > tmp_bwork( min_size_bwork(
                size_column(a), sort ) );
        invoke( jobvs, sort, select, a, sdim, w, vs, info,
                workspace( tmp_work, tmp_rwork, tmp_bwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixA, typename VectorW, typename MatrixVS >
    static void invoke( const char jobvs, const char sort, logical_t* select,
            MatrixA& a, fortran_int_t& sdim, VectorW& w, MatrixVS& vs,
            fortran_int_t& info, optimal_workspace work ) {
        value_type opt_size_work;
        bindings::detail::array< real_type > tmp_rwork( min_size_rwork(
                size_column(a) ) );
        bindings::detail::array< bool > tmp_bwork( min_size_bwork(
                size_column(a), sort ) );
        detail::gees( jobvs, sort, select, size_column(a),
                begin_value(a), stride_major(a), sdim, begin_value(w),
                begin_value(vs), stride_major(vs), &opt_size_work, -1,
                begin_value(tmp_rwork), begin_value(tmp_bwork), info );
        bindings::detail::array< value_type > tmp_work(
                traits::detail::to_int( opt_size_work ) );
        invoke( jobvs, sort, select, a, sdim, w, vs, info,
                workspace( tmp_work, tmp_rwork, tmp_bwork ) );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n ) {
        return std::max< std::ptrdiff_t >( 1, 2*n );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array rwork.
    //
    static std::ptrdiff_t min_size_rwork( const std::ptrdiff_t n ) {
        return n;
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array bwork.
    //
    static std::ptrdiff_t min_size_bwork( const std::ptrdiff_t n,
            const char sort ) {
        if ( sort == 'N' )
            return 0;
        else
            return n;
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the gees_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * VectorWR&
// * VectorWI&
// * MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim, VectorWR& wr,
        VectorWI& wi, MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * VectorWR&
// * VectorWI&
// * MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim, VectorWR& wr,
        VectorWI& wi, MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * VectorWR&
// * VectorWI&
// * MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        VectorWR& wr, VectorWI& wi, MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * VectorWR&
// * VectorWI&
// * MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        VectorWR& wr, VectorWI& wi, MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * const VectorWR&
// * VectorWI&
// * MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, VectorWI& wi, MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * const VectorWR&
// * VectorWI&
// * MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, VectorWI& wi, MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * const VectorWR&
// * VectorWI&
// * MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, VectorWI& wi, MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * const VectorWR&
// * VectorWI&
// * MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, VectorWI& wi, MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * VectorWR&
// * const VectorWI&
// * MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim, VectorWR& wr,
        const VectorWI& wi, MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * VectorWR&
// * const VectorWI&
// * MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim, VectorWR& wr,
        const VectorWI& wi, MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * VectorWR&
// * const VectorWI&
// * MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        VectorWR& wr, const VectorWI& wi, MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * VectorWR&
// * const VectorWI&
// * MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        VectorWR& wr, const VectorWI& wi, MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * const VectorWR&
// * const VectorWI&
// * MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, const VectorWI& wi, MatrixVS& vs,
        Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * const VectorWR&
// * const VectorWI&
// * MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, const VectorWI& wi, MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * const VectorWR&
// * const VectorWI&
// * MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, const VectorWI& wi, MatrixVS& vs,
        Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * const VectorWR&
// * const VectorWI&
// * MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, const VectorWI& wi, MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * VectorWR&
// * VectorWI&
// * const MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim, VectorWR& wr,
        VectorWI& wi, const MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * VectorWR&
// * VectorWI&
// * const MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim, VectorWR& wr,
        VectorWI& wi, const MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * VectorWR&
// * VectorWI&
// * const MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        VectorWR& wr, VectorWI& wi, const MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * VectorWR&
// * VectorWI&
// * const MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        VectorWR& wr, VectorWI& wi, const MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * const VectorWR&
// * VectorWI&
// * const MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, VectorWI& wi, const MatrixVS& vs,
        Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * const VectorWR&
// * VectorWI&
// * const MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, VectorWI& wi, const MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * const VectorWR&
// * VectorWI&
// * const MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, VectorWI& wi, const MatrixVS& vs,
        Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * const VectorWR&
// * VectorWI&
// * const MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, VectorWI& wi, const MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * VectorWR&
// * const VectorWI&
// * const MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim, VectorWR& wr,
        const VectorWI& wi, const MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * VectorWR&
// * const VectorWI&
// * const MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim, VectorWR& wr,
        const VectorWI& wi, const MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * VectorWR&
// * const VectorWI&
// * const MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        VectorWR& wr, const VectorWI& wi, const MatrixVS& vs,
        Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * VectorWR&
// * const VectorWI&
// * const MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        VectorWR& wr, const VectorWI& wi, const MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * const VectorWR&
// * const VectorWI&
// * const MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, const VectorWI& wi, const MatrixVS& vs,
        Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * const VectorWR&
// * const VectorWI&
// * const MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, const VectorWI& wi, const MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * const VectorWR&
// * const VectorWI&
// * const MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS, typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, const VectorWI& wi, const MatrixVS& vs,
        Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * const VectorWR&
// * const VectorWI&
// * const MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorWR, typename VectorWI,
        typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        const VectorWR& wr, const VectorWI& wi, const MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, wr, wi, vs, info, optimal_workspace() );
    return info;
}
//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * VectorW&
// * MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixVS,
        typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim, VectorW& w,
        MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * VectorW&
// * MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim, VectorW& w,
        MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * VectorW&
// * MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixVS,
        typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        VectorW& w, MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * VectorW&
// * MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        VectorW& w, MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * const VectorW&
// * MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixVS,
        typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim,
        const VectorW& w, MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * const VectorW&
// * MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim,
        const VectorW& w, MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * const VectorW&
// * MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixVS,
        typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        const VectorW& w, MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * const VectorW&
// * MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        const VectorW& w, MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * VectorW&
// * const MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixVS,
        typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim, VectorW& w,
        const MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * VectorW&
// * const MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim, VectorW& w,
        const MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * VectorW&
// * const MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixVS,
        typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        VectorW& w, const MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * VectorW&
// * const MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        VectorW& w, const MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * const VectorW&
// * const MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixVS,
        typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim,
        const VectorW& w, const MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * MatrixA&
// * const VectorW&
// * const MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, MatrixA& a, fortran_int_t& sdim,
        const VectorW& w, const MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * const VectorW&
// * const MatrixVS&
// * User-defined workspace
//
template< typename MatrixA, typename VectorW, typename MatrixVS,
        typename Workspace >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        const VectorW& w, const MatrixVS& vs, Workspace work ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, work );
    return info;
}

//
// Overloaded function for gees. Its overload differs for
// * const MatrixA&
// * const VectorW&
// * const MatrixVS&
// * Default workspace-type (optimal)
//
template< typename MatrixA, typename VectorW, typename MatrixVS >
inline std::ptrdiff_t gees( const char jobvs, const char sort,
        logical_t* select, const MatrixA& a, fortran_int_t& sdim,
        const VectorW& w, const MatrixVS& vs ) {
    fortran_int_t info(0);
    gees_impl< typename value< MatrixA >::type >::invoke( jobvs, sort,
            select, a, sdim, w, vs, info, optimal_workspace() );
    return info;
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
