//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_PBSVX_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_DRIVER_PBSVX_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/data_side.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_complex.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/is_real.hpp>
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/utility/enable_if.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to float value-type.
//
template< typename UpLo >
inline void pbsvx( char fact, UpLo, fortran_int_t n, fortran_int_t kd,
        fortran_int_t nrhs, float* ab, fortran_int_t ldab, float* afb,
        fortran_int_t ldafb, char& equed, float* s, float* b,
        fortran_int_t ldb, float* x, fortran_int_t ldx, float& rcond,
        float* ferr, float* berr, float* work, fortran_int_t* iwork,
        fortran_int_t& info ) {
    LAPACK_SPBSVX( &fact, &lapack_option< UpLo >::value, &n, &kd, &nrhs, ab,
            &ldab, afb, &ldafb, &equed, s, b, &ldb, x, &ldx, &rcond, ferr,
            berr, work, iwork, &info );
}

//
// Overloaded function for dispatching to double value-type.
//
template< typename UpLo >
inline void pbsvx( char fact, UpLo, fortran_int_t n, fortran_int_t kd,
        fortran_int_t nrhs, double* ab, fortran_int_t ldab, double* afb,
        fortran_int_t ldafb, char& equed, double* s, double* b,
        fortran_int_t ldb, double* x, fortran_int_t ldx, double& rcond,
        double* ferr, double* berr, double* work, fortran_int_t* iwork,
        fortran_int_t& info ) {
    LAPACK_DPBSVX( &fact, &lapack_option< UpLo >::value, &n, &kd, &nrhs, ab,
            &ldab, afb, &ldafb, &equed, s, b, &ldb, x, &ldx, &rcond, ferr,
            berr, work, iwork, &info );
}

//
// Overloaded function for dispatching to complex<float> value-type.
//
template< typename UpLo >
inline void pbsvx( char fact, UpLo, fortran_int_t n, fortran_int_t kd,
        fortran_int_t nrhs, std::complex<float>* ab, fortran_int_t ldab,
        std::complex<float>* afb, fortran_int_t ldafb, char& equed, float* s,
        std::complex<float>* b, fortran_int_t ldb, std::complex<float>* x,
        fortran_int_t ldx, float& rcond, float* ferr, float* berr,
        std::complex<float>* work, float* rwork, fortran_int_t& info ) {
    LAPACK_CPBSVX( &fact, &lapack_option< UpLo >::value, &n, &kd, &nrhs, ab,
            &ldab, afb, &ldafb, &equed, s, b, &ldb, x, &ldx, &rcond, ferr,
            berr, work, rwork, &info );
}

//
// Overloaded function for dispatching to complex<double> value-type.
//
template< typename UpLo >
inline void pbsvx( char fact, UpLo, fortran_int_t n, fortran_int_t kd,
        fortran_int_t nrhs, std::complex<double>* ab, fortran_int_t ldab,
        std::complex<double>* afb, fortran_int_t ldafb, char& equed,
        double* s, std::complex<double>* b, fortran_int_t ldb,
        std::complex<double>* x, fortran_int_t ldx, double& rcond,
        double* ferr, double* berr, std::complex<double>* work, double* rwork,
        fortran_int_t& info ) {
    LAPACK_ZPBSVX( &fact, &lapack_option< UpLo >::value, &n, &kd, &nrhs, ab,
            &ldab, afb, &ldafb, &equed, s, b, &ldb, x, &ldx, &rcond, ferr,
            berr, work, rwork, &info );
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to pbsvx.
//
template< typename Value, typename Enable = void >
struct pbsvx_impl {};

//
// This implementation is enabled if Value is a real type.
//
template< typename Value >
struct pbsvx_impl< Value, typename boost::enable_if< is_real< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixAB, typename MatrixAFB, typename VectorS,
            typename MatrixB, typename MatrixX, typename VectorFERR,
            typename VectorBERR, typename WORK, typename IWORK >
    static void invoke( const char fact, const fortran_int_t n,
            MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
            MatrixX& x, real_type& rcond, VectorFERR& ferr, VectorBERR& berr,
            fortran_int_t& info, detail::workspace2< WORK, IWORK > work ) {
        typedef typename result_of::data_side< MatrixAB >::type uplo;
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAB >::type >::type,
                typename remove_const< typename value<
                MatrixAFB >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAB >::type >::type,
                typename remove_const< typename value<
                VectorS >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAB >::type >::type,
                typename remove_const< typename value<
                MatrixB >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAB >::type >::type,
                typename remove_const< typename value<
                MatrixX >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAB >::type >::type,
                typename remove_const< typename value<
                VectorFERR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAB >::type >::type,
                typename remove_const< typename value<
                VectorBERR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixAB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixAFB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorS >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixX >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorFERR >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorBERR >::value) );
        BOOST_ASSERT( bandwidth_upper(ab) >= 0 );
        BOOST_ASSERT( equed == 'N' || equed == 'Y' );
        BOOST_ASSERT( fact == 'F' || fact == 'Y' || fact == 'N' ||
                fact == 'E' );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( size(berr) >= size_column(x) );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( n ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work( n ));
        BOOST_ASSERT( size_column(x) >= 0 );
        BOOST_ASSERT( size_minor(ab) == 1 || stride_minor(ab) == 1 );
        BOOST_ASSERT( size_minor(afb) == 1 || stride_minor(afb) == 1 );
        BOOST_ASSERT( size_minor(b) == 1 || stride_minor(b) == 1 );
        BOOST_ASSERT( size_minor(x) == 1 || stride_minor(x) == 1 );
        BOOST_ASSERT( stride_major(ab) >= bandwidth_upper(ab)+1 );
        BOOST_ASSERT( stride_major(afb) >= bandwidth_upper(ab)+1 );
        BOOST_ASSERT( stride_major(b) >= std::max< std::ptrdiff_t >(1,n) );
        BOOST_ASSERT( stride_major(x) >= std::max< std::ptrdiff_t >(1,n) );
        detail::pbsvx( fact, uplo(), n, bandwidth_upper(ab), size_column(x),
                begin_value(ab), stride_major(ab), begin_value(afb),
                stride_major(afb), equed, begin_value(s), begin_value(b),
                stride_major(b), begin_value(x), stride_major(x), rcond,
                begin_value(ferr), begin_value(berr),
                begin_value(work.select(real_type())),
                begin_value(work.select(fortran_int_t())), info );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixAB, typename MatrixAFB, typename VectorS,
            typename MatrixB, typename MatrixX, typename VectorFERR,
            typename VectorBERR >
    static void invoke( const char fact, const fortran_int_t n,
            MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
            MatrixX& x, real_type& rcond, VectorFERR& ferr, VectorBERR& berr,
            fortran_int_t& info, minimal_workspace work ) {
        typedef typename result_of::data_side< MatrixAB >::type uplo;
        bindings::detail::array< real_type > tmp_work( min_size_work( n ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( n ) );
        invoke( fact, n, ab, afb, equed, s, b, x, rcond, ferr, berr, info,
                workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixAB, typename MatrixAFB, typename VectorS,
            typename MatrixB, typename MatrixX, typename VectorFERR,
            typename VectorBERR >
    static void invoke( const char fact, const fortran_int_t n,
            MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
            MatrixX& x, real_type& rcond, VectorFERR& ferr, VectorBERR& berr,
            fortran_int_t& info, optimal_workspace work ) {
        typedef typename result_of::data_side< MatrixAB >::type uplo;
        invoke( fact, n, ab, afb, equed, s, b, x, rcond, ferr, berr, info,
                minimal_workspace() );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n ) {
        return 3*n;
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( const std::ptrdiff_t n ) {
        return n;
    }
};

//
// This implementation is enabled if Value is a complex type.
//
template< typename Value >
struct pbsvx_impl< Value, typename boost::enable_if< is_complex< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixAB, typename MatrixAFB, typename VectorS,
            typename MatrixB, typename MatrixX, typename VectorFERR,
            typename VectorBERR, typename WORK, typename RWORK >
    static void invoke( const char fact, const fortran_int_t n,
            MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
            MatrixX& x, real_type& rcond, VectorFERR& ferr, VectorBERR& berr,
            fortran_int_t& info, detail::workspace2< WORK, RWORK > work ) {
        typedef typename result_of::data_side< MatrixAB >::type uplo;
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorS >::type >::type,
                typename remove_const< typename value<
                VectorFERR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorS >::type >::type,
                typename remove_const< typename value<
                VectorBERR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAB >::type >::type,
                typename remove_const< typename value<
                MatrixAFB >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAB >::type >::type,
                typename remove_const< typename value<
                MatrixB >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixAB >::type >::type,
                typename remove_const< typename value<
                MatrixX >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixAB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixAFB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorS >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixX >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorFERR >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorBERR >::value) );
        BOOST_ASSERT( bandwidth_upper(ab) >= 0 );
        BOOST_ASSERT( equed == 'N' || equed == 'Y' );
        BOOST_ASSERT( fact == 'F' || fact == 'Y' || fact == 'N' ||
                fact == 'E' );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( size(berr) >= size_column(x) );
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_rwork( n ));
        BOOST_ASSERT( size(work.select(value_type())) >= min_size_work( n ));
        BOOST_ASSERT( size_column(x) >= 0 );
        BOOST_ASSERT( size_minor(ab) == 1 || stride_minor(ab) == 1 );
        BOOST_ASSERT( size_minor(afb) == 1 || stride_minor(afb) == 1 );
        BOOST_ASSERT( size_minor(b) == 1 || stride_minor(b) == 1 );
        BOOST_ASSERT( size_minor(x) == 1 || stride_minor(x) == 1 );
        BOOST_ASSERT( stride_major(ab) >= bandwidth_upper(ab)+1 );
        BOOST_ASSERT( stride_major(afb) >= bandwidth_upper(ab)+1 );
        BOOST_ASSERT( stride_major(b) >= std::max< std::ptrdiff_t >(1,n) );
        BOOST_ASSERT( stride_major(x) >= std::max< std::ptrdiff_t >(1,n) );
        detail::pbsvx( fact, uplo(), n, bandwidth_upper(ab), size_column(x),
                begin_value(ab), stride_major(ab), begin_value(afb),
                stride_major(afb), equed, begin_value(s), begin_value(b),
                stride_major(b), begin_value(x), stride_major(x), rcond,
                begin_value(ferr), begin_value(berr),
                begin_value(work.select(value_type())),
                begin_value(work.select(real_type())), info );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixAB, typename MatrixAFB, typename VectorS,
            typename MatrixB, typename MatrixX, typename VectorFERR,
            typename VectorBERR >
    static void invoke( const char fact, const fortran_int_t n,
            MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
            MatrixX& x, real_type& rcond, VectorFERR& ferr, VectorBERR& berr,
            fortran_int_t& info, minimal_workspace work ) {
        typedef typename result_of::data_side< MatrixAB >::type uplo;
        bindings::detail::array< value_type > tmp_work( min_size_work( n ) );
        bindings::detail::array< real_type > tmp_rwork( min_size_rwork( n ) );
        invoke( fact, n, ab, afb, equed, s, b, x, rcond, ferr, berr, info,
                workspace( tmp_work, tmp_rwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixAB, typename MatrixAFB, typename VectorS,
            typename MatrixB, typename MatrixX, typename VectorFERR,
            typename VectorBERR >
    static void invoke( const char fact, const fortran_int_t n,
            MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
            MatrixX& x, real_type& rcond, VectorFERR& ferr, VectorBERR& berr,
            fortran_int_t& info, optimal_workspace work ) {
        typedef typename result_of::data_side< MatrixAB >::type uplo;
        invoke( fact, n, ab, afb, equed, s, b, x, rcond, ferr, berr, info,
                minimal_workspace() );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n ) {
        return 2*n;
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array rwork.
    //
    static std::ptrdiff_t min_size_rwork( const std::ptrdiff_t n ) {
        return n;
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the pbsvx_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr,
        Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr,
        Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr,
        Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr,
        Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr,
        Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr,
        Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr,
        Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr,
        Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        const MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr,
        Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        const MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr,
        Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr,
        Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        const MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        const MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        const MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        const MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        const MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s, MatrixB& b,
        const MatrixX& x, typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed, VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        MatrixAB& ab, const MatrixAFB& afb, char& equed, const VectorS& s,
        const MatrixB& b, const MatrixX& x, typename remove_imaginary<
        typename value< MatrixAB >::type >::type& rcond,
        const VectorFERR& ferr, const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * User-defined workspace
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR, typename Workspace >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr, Workspace work ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info, work );
    return info;
}

//
// Overloaded function for pbsvx. Its overload differs for
// * const MatrixAB&
// * const MatrixAFB&
// * const VectorS&
// * const MatrixB&
// * const MatrixX&
// * const VectorFERR&
// * const VectorBERR&
// * Default workspace-type (optimal)
//
template< typename MatrixAB, typename MatrixAFB, typename VectorS,
        typename MatrixB, typename MatrixX, typename VectorFERR,
        typename VectorBERR >
inline std::ptrdiff_t pbsvx( const char fact, const fortran_int_t n,
        const MatrixAB& ab, const MatrixAFB& afb, char& equed,
        const VectorS& s, const MatrixB& b, const MatrixX& x,
        typename remove_imaginary< typename value<
        MatrixAB >::type >::type& rcond, const VectorFERR& ferr,
        const VectorBERR& berr ) {
    fortran_int_t info(0);
    pbsvx_impl< typename value< MatrixAB >::type >::invoke( fact, n, ab,
            afb, equed, s, b, x, rcond, ferr, berr, info,
            optimal_workspace() );
    return info;
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
