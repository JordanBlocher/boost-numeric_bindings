//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_AUXILIARY_LARRB_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_AUXILIARY_LARRB_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>

//
// The LAPACK-backend for larrb is the netlib-compatible backend.
//
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * float value-type.
//
inline std::ptrdiff_t larrb( const fortran_int_t n, const float* d,
        const float* lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const float rtol1, const float rtol2,
        const fortran_int_t offset, float* w, float* wgap, float* werr,
        float* work, fortran_int_t* iwork, const float pivmin,
        const float spdiam, const fortran_int_t twist ) {
    fortran_int_t info(0);
    LAPACK_SLARRB( &n, d, lld, &ifirst, &ilast, &rtol1, &rtol2, &offset, w,
            wgap, werr, work, iwork, &pivmin, &spdiam, &twist, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * double value-type.
//
inline std::ptrdiff_t larrb( const fortran_int_t n, const double* d,
        const double* lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const double rtol1, const double rtol2,
        const fortran_int_t offset, double* w, double* wgap, double* werr,
        double* work, fortran_int_t* iwork, const double pivmin,
        const double spdiam, const fortran_int_t twist ) {
    fortran_int_t info(0);
    LAPACK_DLARRB( &n, d, lld, &ifirst, &ilast, &rtol1, &rtol2, &offset, w,
            wgap, werr, work, iwork, &pivmin, &spdiam, &twist, &info );
    return info;
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to larrb.
//
template< typename Value >
struct larrb_impl {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename VectorD, typename VectorLLD, typename VectorW,
            typename VectorWGAP, typename VectorWERR, typename WORK,
            typename IWORK >
    static std::ptrdiff_t invoke( const fortran_int_t n, const VectorD& d,
            const VectorLLD& lld, const fortran_int_t ifirst,
            const fortran_int_t ilast, const real_type rtol1,
            const real_type rtol2, const fortran_int_t offset, VectorW& w,
            VectorWGAP& wgap, VectorWERR& werr, const real_type pivmin,
            const real_type spdiam, const fortran_int_t twist,
            detail::workspace2< WORK, IWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                VectorLLD >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                VectorW >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                VectorWGAP >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                VectorWERR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorW >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorWGAP >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorWERR >::value) );
        BOOST_ASSERT( size(d) >= n );
        BOOST_ASSERT( size(lld) >= n-1 );
        BOOST_ASSERT( size(w) >= n );
        BOOST_ASSERT( size(werr) >= n );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( n ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work( n ));
        return detail::larrb( n, begin_value(d), begin_value(lld), ifirst,
                ilast, rtol1, rtol2, offset, begin_value(w),
                begin_value(wgap), begin_value(werr),
                begin_value(work.select(real_type())),
                begin_value(work.select(fortran_int_t())), pivmin, spdiam,
                twist );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename VectorD, typename VectorLLD, typename VectorW,
            typename VectorWGAP, typename VectorWERR >
    static std::ptrdiff_t invoke( const fortran_int_t n, const VectorD& d,
            const VectorLLD& lld, const fortran_int_t ifirst,
            const fortran_int_t ilast, const real_type rtol1,
            const real_type rtol2, const fortran_int_t offset, VectorW& w,
            VectorWGAP& wgap, VectorWERR& werr, const real_type pivmin,
            const real_type spdiam, const fortran_int_t twist,
            minimal_workspace work ) {
        bindings::detail::array< real_type > tmp_work( min_size_work( n ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( n ) );
        return invoke( n, d, lld, ifirst, ilast, rtol1, rtol2, offset, w,
                wgap, werr, pivmin, spdiam, twist, workspace( tmp_work,
                tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename VectorD, typename VectorLLD, typename VectorW,
            typename VectorWGAP, typename VectorWERR >
    static std::ptrdiff_t invoke( const fortran_int_t n, const VectorD& d,
            const VectorLLD& lld, const fortran_int_t ifirst,
            const fortran_int_t ilast, const real_type rtol1,
            const real_type rtol2, const fortran_int_t offset, VectorW& w,
            VectorWGAP& wgap, VectorWERR& werr, const real_type pivmin,
            const real_type spdiam, const fortran_int_t twist,
            optimal_workspace work ) {
        return invoke( n, d, lld, ifirst, ilast, rtol1, rtol2, offset, w,
                wgap, werr, pivmin, spdiam, twist, minimal_workspace() );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n ) {
        return 2*n;
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( const std::ptrdiff_t n ) {
        return 2*n;
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the larrb_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for larrb. Its overload differs for
// * VectorW&
// * VectorWGAP&
// * VectorWERR&
// * User-defined workspace
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR, typename Workspace >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        VectorW& w, VectorWGAP& wgap, VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist, Workspace work ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, work );
}

//
// Overloaded function for larrb. Its overload differs for
// * VectorW&
// * VectorWGAP&
// * VectorWERR&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        VectorW& w, VectorWGAP& wgap, VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, optimal_workspace() );
}

//
// Overloaded function for larrb. Its overload differs for
// * const VectorW&
// * VectorWGAP&
// * VectorWERR&
// * User-defined workspace
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR, typename Workspace >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        const VectorW& w, VectorWGAP& wgap, VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist, Workspace work ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, work );
}

//
// Overloaded function for larrb. Its overload differs for
// * const VectorW&
// * VectorWGAP&
// * VectorWERR&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        const VectorW& w, VectorWGAP& wgap, VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, optimal_workspace() );
}

//
// Overloaded function for larrb. Its overload differs for
// * VectorW&
// * const VectorWGAP&
// * VectorWERR&
// * User-defined workspace
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR, typename Workspace >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        VectorW& w, const VectorWGAP& wgap, VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist, Workspace work ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, work );
}

//
// Overloaded function for larrb. Its overload differs for
// * VectorW&
// * const VectorWGAP&
// * VectorWERR&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        VectorW& w, const VectorWGAP& wgap, VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, optimal_workspace() );
}

//
// Overloaded function for larrb. Its overload differs for
// * const VectorW&
// * const VectorWGAP&
// * VectorWERR&
// * User-defined workspace
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR, typename Workspace >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        const VectorW& w, const VectorWGAP& wgap, VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist, Workspace work ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, work );
}

//
// Overloaded function for larrb. Its overload differs for
// * const VectorW&
// * const VectorWGAP&
// * VectorWERR&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        const VectorW& w, const VectorWGAP& wgap, VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, optimal_workspace() );
}

//
// Overloaded function for larrb. Its overload differs for
// * VectorW&
// * VectorWGAP&
// * const VectorWERR&
// * User-defined workspace
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR, typename Workspace >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        VectorW& w, VectorWGAP& wgap, const VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist, Workspace work ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, work );
}

//
// Overloaded function for larrb. Its overload differs for
// * VectorW&
// * VectorWGAP&
// * const VectorWERR&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        VectorW& w, VectorWGAP& wgap, const VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, optimal_workspace() );
}

//
// Overloaded function for larrb. Its overload differs for
// * const VectorW&
// * VectorWGAP&
// * const VectorWERR&
// * User-defined workspace
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR, typename Workspace >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        const VectorW& w, VectorWGAP& wgap, const VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist, Workspace work ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, work );
}

//
// Overloaded function for larrb. Its overload differs for
// * const VectorW&
// * VectorWGAP&
// * const VectorWERR&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        const VectorW& w, VectorWGAP& wgap, const VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, optimal_workspace() );
}

//
// Overloaded function for larrb. Its overload differs for
// * VectorW&
// * const VectorWGAP&
// * const VectorWERR&
// * User-defined workspace
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR, typename Workspace >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        VectorW& w, const VectorWGAP& wgap, const VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist, Workspace work ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, work );
}

//
// Overloaded function for larrb. Its overload differs for
// * VectorW&
// * const VectorWGAP&
// * const VectorWERR&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        VectorW& w, const VectorWGAP& wgap, const VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, optimal_workspace() );
}

//
// Overloaded function for larrb. Its overload differs for
// * const VectorW&
// * const VectorWGAP&
// * const VectorWERR&
// * User-defined workspace
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR, typename Workspace >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        const VectorW& w, const VectorWGAP& wgap, const VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist, Workspace work ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, work );
}

//
// Overloaded function for larrb. Its overload differs for
// * const VectorW&
// * const VectorWGAP&
// * const VectorWERR&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorLLD, typename VectorW,
        typename VectorWGAP, typename VectorWERR >
inline std::ptrdiff_t larrb( const fortran_int_t n, const VectorD& d,
        const VectorLLD& lld, const fortran_int_t ifirst,
        const fortran_int_t ilast, const typename remove_imaginary<
        typename value< VectorD >::type >::type rtol1,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type rtol2, const fortran_int_t offset,
        const VectorW& w, const VectorWGAP& wgap, const VectorWERR& werr,
        const typename remove_imaginary< typename value<
        VectorD >::type >::type pivmin, const typename remove_imaginary<
        typename value< VectorD >::type >::type spdiam,
        const fortran_int_t twist ) {
    return larrb_impl< typename value< VectorD >::type >::invoke( n, d,
            lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin,
            spdiam, twist, optimal_workspace() );
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
