//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_LACON_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_LACON_HPP

#include <boost/numeric/bindings/lapack/lapack.h>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/traits/detail/array.hpp>
#include <boost/numeric/bindings/traits/is_complex.hpp>
#include <boost/numeric/bindings/traits/is_real.hpp>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/utility/enable_if.hpp>
#include <cassert>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//$DESCRIPTION

// overloaded functions to call lapack
namespace detail {
    inline void lacon( integer_t const n, float* v, float* x, integer_t* isgn,
            float& est, integer_t& kase ) {
        LAPACK_SLACON( &n, v, x, isgn, &est, &kase );
    }
    inline void lacon( integer_t const n, double* v, double* x,
            integer_t* isgn, double& est, integer_t& kase ) {
        LAPACK_DLACON( &n, v, x, isgn, &est, &kase );
    }
    inline void lacon( integer_t const n, traits::complex_f* v,
            traits::complex_f* x, float& est, integer_t& kase ) {
        LAPACK_CLACON( &n, traits::complex_ptr(v), traits::complex_ptr(x),
                &est, &kase );
    }
    inline void lacon( integer_t const n, traits::complex_d* v,
            traits::complex_d* x, double& est, integer_t& kase ) {
        LAPACK_ZLACON( &n, traits::complex_ptr(v), traits::complex_ptr(x),
                &est, &kase );
    }
}

// value-type based template
template< typename ValueType, typename Enable = void >
struct lacon_impl{};

// real specialization
template< typename ValueType >
struct lacon_impl< ValueType, typename boost::enable_if< traits::is_real<ValueType> >::type > {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // user-defined workspace specialization
    template< typename VectorX, typename V, typename ISGN >
    static void compute( integer_t const n, VectorX& x, real_type& est,
            integer_t& kase, detail::workspace2< V, ISGN > work ) {
        
#ifndef NDEBUG
        assert( n >= 1 );
        assert( traits::vector_size(work.select(real_type()) >=
                min_size_v( n )));
        assert( traits::vector_size(work.select(integer_t()) >=
                min_size_isgn( n )));
#endif
        detail::lacon( n, traits::vector_storage(work.select(real_type())),
                traits::vector_storage(x),
                traits::vector_storage(work.select(integer_t())), est, kase );
    }

    // minimal workspace specialization
    template< typename VectorX >
    static void compute( integer_t const n, VectorX& x, real_type& est,
            integer_t& kase, minimal_workspace work ) {
        traits::detail::array< real_type > tmp_v( min_size_v( n ) );
        traits::detail::array< integer_t > tmp_isgn( min_size_isgn( n ) );
        compute( n, x, est, kase, workspace( tmp_v, tmp_isgn ) );
    }

    // optimal workspace specialization
    template< typename VectorX >
    static void compute( integer_t const n, VectorX& x, real_type& est,
            integer_t& kase, optimal_workspace work ) {
        compute( n, x, est, kase, minimal_workspace() );
    }

    static integer_t min_size_v( integer_t const n ) {
        return n;
    }

    static integer_t min_size_isgn( integer_t const n ) {
        return n;
    }
};

// complex specialization
template< typename ValueType >
struct lacon_impl< ValueType, typename boost::enable_if< traits::is_complex<ValueType> >::type > {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // user-defined workspace specialization
    template< typename VectorX, typename V >
    static void compute( integer_t const n, VectorX& x, real_type& est,
            integer_t& kase, detail::workspace1< V > work ) {
        
#ifndef NDEBUG
        assert( n >= 1 );
        assert( traits::vector_size(work.select(value_type()) >=
                min_size_v( n )));
#endif
        detail::lacon( n, traits::vector_storage(work.select(value_type())),
                traits::vector_storage(x), est, kase );
    }

    // minimal workspace specialization
    template< typename VectorX >
    static void compute( integer_t const n, VectorX& x, real_type& est,
            integer_t& kase, minimal_workspace work ) {
        traits::detail::array< value_type > tmp_v( min_size_v( n ) );
        compute( n, x, est, kase, workspace( tmp_v ) );
    }

    // optimal workspace specialization
    template< typename VectorX >
    static void compute( integer_t const n, VectorX& x, real_type& est,
            integer_t& kase, optimal_workspace work ) {
        compute( n, x, est, kase, minimal_workspace() );
    }

    static integer_t min_size_v( integer_t const n ) {
        return n;
    }
};


// template function to call lacon
template< typename VectorX, typename Workspace >
inline integer_t lacon( integer_t const n, VectorX& x,
        typename traits::vector_traits< VectorX >::value_type& est,
        integer_t& kase, Workspace work = optimal_workspace() ) {
    typedef typename traits::vector_traits< VectorX >::value_type value_type;
    integer_t info(0);
    lacon_impl< value_type >::compute( n, x, est, kase, work );
    return info;
}

}}}} // namespace boost::numeric::bindings::lapack

#endif
