//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_LABRD_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_LABRD_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/is_complex.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/is_real.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/utility/enable_if.hpp>

//
// The LAPACK-backend for labrd is the netlib-compatible backend.
//
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * float value-type.
//
inline std::ptrdiff_t labrd( const fortran_int_t m, const fortran_int_t n,
        const fortran_int_t nb, float* a, const fortran_int_t lda, float* d,
        float* e, float* tauq, float* taup, float* x, const fortran_int_t ldx,
        float* y, const fortran_int_t ldy ) {
    fortran_int_t info(0);
    LAPACK_SLABRD( &m, &n, &nb, a, &lda, d, e, tauq, taup, x, &ldx, y, &ldy );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * double value-type.
//
inline std::ptrdiff_t labrd( const fortran_int_t m, const fortran_int_t n,
        const fortran_int_t nb, double* a, const fortran_int_t lda, double* d,
        double* e, double* tauq, double* taup, double* x,
        const fortran_int_t ldx, double* y, const fortran_int_t ldy ) {
    fortran_int_t info(0);
    LAPACK_DLABRD( &m, &n, &nb, a, &lda, d, e, tauq, taup, x, &ldx, y, &ldy );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<float> value-type.
//
inline std::ptrdiff_t labrd( const fortran_int_t m, const fortran_int_t n,
        const fortran_int_t nb, std::complex<float>* a,
        const fortran_int_t lda, float* d, float* e,
        std::complex<float>* tauq, std::complex<float>* taup,
        std::complex<float>* x, const fortran_int_t ldx,
        std::complex<float>* y, const fortran_int_t ldy ) {
    fortran_int_t info(0);
    LAPACK_CLABRD( &m, &n, &nb, a, &lda, d, e, tauq, taup, x, &ldx, y, &ldy );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<double> value-type.
//
inline std::ptrdiff_t labrd( const fortran_int_t m, const fortran_int_t n,
        const fortran_int_t nb, std::complex<double>* a,
        const fortran_int_t lda, double* d, double* e,
        std::complex<double>* tauq, std::complex<double>* taup,
        std::complex<double>* x, const fortran_int_t ldx,
        std::complex<double>* y, const fortran_int_t ldy ) {
    fortran_int_t info(0);
    LAPACK_ZLABRD( &m, &n, &nb, a, &lda, d, e, tauq, taup, x, &ldx, y, &ldy );
    return info;
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to labrd.
//
template< typename Value, typename Enable = void >
struct labrd_impl {};

//
// This implementation is enabled if Value is a real type.
//
template< typename Value >
struct labrd_impl< Value, typename boost::enable_if< is_real< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixA, typename VectorD, typename VectorE,
            typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
            typename MatrixY >
    static std::ptrdiff_t invoke( MatrixA& a, VectorD& d, VectorE& e,
            VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorD >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorE >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorTAUQ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorTAUP >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixX >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixY >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorD >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorE >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorTAUQ >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorTAUP >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixX >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixY >::value) );
        BOOST_ASSERT( size(d) >= size_column(a) );
        BOOST_ASSERT( size(e) >= size_column(a) );
        BOOST_ASSERT( size(taup) >= size_column(a) );
        BOOST_ASSERT( size(tauq) >= size_column(a) );
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(x) == 1 || stride_minor(x) == 1 );
        BOOST_ASSERT( size_minor(y) == 1 || stride_minor(y) == 1 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,
                size_row(a)) );
        BOOST_ASSERT( stride_major(x) >= size_row(a) );
        BOOST_ASSERT( stride_major(y) >= size_column(a) );
        return detail::labrd( size_row(a), size_column(a), size_column(a),
                begin_value(a), stride_major(a), begin_value(d),
                begin_value(e), begin_value(tauq), begin_value(taup),
                begin_value(x), stride_major(x), begin_value(y),
                stride_major(y) );
    }

};

//
// This implementation is enabled if Value is a complex type.
//
template< typename Value >
struct labrd_impl< Value, typename boost::enable_if< is_complex< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixA, typename VectorD, typename VectorE,
            typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
            typename MatrixY >
    static std::ptrdiff_t invoke( MatrixA& a, VectorD& d, VectorE& e,
            VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                VectorE >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorTAUQ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorTAUP >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixX >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixY >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorD >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorE >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorTAUQ >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorTAUP >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixX >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixY >::value) );
        BOOST_ASSERT( size(d) >= size_column(a) );
        BOOST_ASSERT( size(e) >= size_column(a) );
        BOOST_ASSERT( size(taup) >= size_column(a) );
        BOOST_ASSERT( size(tauq) >= size_column(a) );
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(x) == 1 || stride_minor(x) == 1 );
        BOOST_ASSERT( size_minor(y) == 1 || stride_minor(y) == 1 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,
                size_row(a)) );
        BOOST_ASSERT( stride_major(x) >= std::max< std::ptrdiff_t >(1,
                size_row(a)) );
        BOOST_ASSERT( stride_major(y) >= std::max< std::ptrdiff_t >(1,
                size_column(a)) );
        return detail::labrd( size_row(a), size_column(a), size_column(a),
                begin_value(a), stride_major(a), begin_value(d),
                begin_value(e), begin_value(tauq), begin_value(taup),
                begin_value(x), stride_major(x), begin_value(y),
                stride_major(y) );
    }

};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the labrd_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        const VectorTAUQ& tauq, VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d, VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, VectorD& d, const VectorE& e,
        const VectorTAUQ& tauq, const VectorTAUP& taup, const MatrixX& x,
        const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

//
// Overloaded function for labrd. Its overload differs for
// * const MatrixA&
// * const VectorD&
// * const VectorE&
// * const VectorTAUQ&
// * const VectorTAUP&
// * const MatrixX&
// * const MatrixY&
//
template< typename MatrixA, typename VectorD, typename VectorE,
        typename VectorTAUQ, typename VectorTAUP, typename MatrixX,
        typename MatrixY >
inline std::ptrdiff_t labrd( const MatrixA& a, const VectorD& d,
        const VectorE& e, const VectorTAUQ& tauq, const VectorTAUP& taup,
        const MatrixX& x, const MatrixY& y ) {
    return labrd_impl< typename value< MatrixA >::type >::invoke( a, d,
            e, tauq, taup, x, y );
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
