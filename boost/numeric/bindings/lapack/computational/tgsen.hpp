//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_TGSEN_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_TGSEN_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_complex.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/is_real.hpp>
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/traits/detail/utils.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/utility/enable_if.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to float value-type.
//
inline void tgsen( fortran_int_t ijob, logical_t wantq, logical_t wantz,
        const logical_t* select, fortran_int_t n, float* a, fortran_int_t lda,
        float* b, fortran_int_t ldb, float* alphar, float* alphai,
        float* beta, float* q, fortran_int_t ldq, float* z, fortran_int_t ldz,
        fortran_int_t& m, float& pl, float& pr, float* dif, float* work,
        fortran_int_t lwork, fortran_int_t* iwork, fortran_int_t liwork,
        fortran_int_t& info ) {
    LAPACK_STGSEN( &ijob, &wantq, &wantz, select, &n, a, &lda, b, &ldb,
            alphar, alphai, beta, q, &ldq, z, &ldz, &m, &pl, &pr, dif, work,
            &lwork, iwork, &liwork, &info );
}

//
// Overloaded function for dispatching to double value-type.
//
inline void tgsen( fortran_int_t ijob, logical_t wantq, logical_t wantz,
        const logical_t* select, fortran_int_t n, double* a,
        fortran_int_t lda, double* b, fortran_int_t ldb, double* alphar,
        double* alphai, double* beta, double* q, fortran_int_t ldq, double* z,
        fortran_int_t ldz, fortran_int_t& m, double& pl, double& pr,
        double* dif, double* work, fortran_int_t lwork, fortran_int_t* iwork,
        fortran_int_t liwork, fortran_int_t& info ) {
    LAPACK_DTGSEN( &ijob, &wantq, &wantz, select, &n, a, &lda, b, &ldb,
            alphar, alphai, beta, q, &ldq, z, &ldz, &m, &pl, &pr, dif, work,
            &lwork, iwork, &liwork, &info );
}

//
// Overloaded function for dispatching to complex<float> value-type.
//
inline void tgsen( fortran_int_t ijob, logical_t wantq, logical_t wantz,
        const logical_t* select, fortran_int_t n, std::complex<float>* a,
        fortran_int_t lda, std::complex<float>* b, fortran_int_t ldb,
        std::complex<float>* alpha, std::complex<float>* beta,
        std::complex<float>* q, fortran_int_t ldq, std::complex<float>* z,
        fortran_int_t ldz, fortran_int_t& m, float& pl, float& pr, float* dif,
        std::complex<float>* work, fortran_int_t lwork, fortran_int_t* iwork,
        fortran_int_t liwork, fortran_int_t& info ) {
    LAPACK_CTGSEN( &ijob, &wantq, &wantz, select, &n, a, &lda, b, &ldb, alpha,
            beta, q, &ldq, z, &ldz, &m, &pl, &pr, dif, work, &lwork, iwork,
            &liwork, &info );
}

//
// Overloaded function for dispatching to complex<double> value-type.
//
inline void tgsen( fortran_int_t ijob, logical_t wantq, logical_t wantz,
        const logical_t* select, fortran_int_t n, std::complex<double>* a,
        fortran_int_t lda, std::complex<double>* b, fortran_int_t ldb,
        std::complex<double>* alpha, std::complex<double>* beta,
        std::complex<double>* q, fortran_int_t ldq, std::complex<double>* z,
        fortran_int_t ldz, fortran_int_t& m, double& pl, double& pr,
        double* dif, std::complex<double>* work, fortran_int_t lwork,
        fortran_int_t* iwork, fortran_int_t liwork, fortran_int_t& info ) {
    LAPACK_ZTGSEN( &ijob, &wantq, &wantz, select, &n, a, &lda, b, &ldb, alpha,
            beta, q, &ldq, z, &ldz, &m, &pl, &pr, dif, work, &lwork, iwork,
            &liwork, &info );
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to tgsen.
//
template< typename Value, typename Enable = void >
struct tgsen_impl {};

//
// This implementation is enabled if Value is a real type.
//
template< typename Value >
struct tgsen_impl< Value, typename boost::enable_if< is_real< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename VectorSELECT, typename MatrixA, typename MatrixB,
            typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
            typename MatrixQ, typename MatrixZ, typename VectorDIF,
            typename WORK, typename IWORK >
    static void invoke( const fortran_int_t ijob, const logical_t wantq,
            const logical_t wantz, const VectorSELECT& select,
            const fortran_int_t n, MatrixA& a, MatrixB& b,
            VectorALPHAR& alphar, VectorALPHAI& alphai, VectorBETA& beta,
            MatrixQ& q, MatrixZ& z, fortran_int_t& m, real_type& pl,
            real_type& pr, VectorDIF& dif, fortran_int_t& info,
            detail::workspace2< WORK, IWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixB >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorALPHAR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorALPHAI >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorBETA >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixQ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixZ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorDIF >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorALPHAR >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorALPHAI >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorBETA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixQ >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixZ >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorDIF >::value) );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( size(alphai) >= n );
        BOOST_ASSERT( size(alphar) >= n );
        BOOST_ASSERT( size(select) >= n );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( $CALL_MIN_SIZE ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work(
                $CALL_MIN_SIZE ));
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(b) == 1 || stride_minor(b) == 1 );
        BOOST_ASSERT( size_minor(q) == 1 || stride_minor(q) == 1 );
        BOOST_ASSERT( size_minor(z) == 1 || stride_minor(z) == 1 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,n) );
        BOOST_ASSERT( stride_major(b) >= std::max< std::ptrdiff_t >(1,n) );
        detail::tgsen( ijob, wantq, wantz, begin_value(select), n,
                begin_value(a), stride_major(a), begin_value(b),
                stride_major(b), begin_value(alphar), begin_value(alphai),
                begin_value(beta), begin_value(q), stride_major(q),
                begin_value(z), stride_major(z), m, pl, pr, begin_value(dif),
                begin_value(work.select(real_type())),
                size(work.select(real_type())),
                begin_value(work.select(fortran_int_t())),
                size(work.select(fortran_int_t())), info );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename VectorSELECT, typename MatrixA, typename MatrixB,
            typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
            typename MatrixQ, typename MatrixZ, typename VectorDIF >
    static void invoke( const fortran_int_t ijob, const logical_t wantq,
            const logical_t wantz, const VectorSELECT& select,
            const fortran_int_t n, MatrixA& a, MatrixB& b,
            VectorALPHAR& alphar, VectorALPHAI& alphai, VectorBETA& beta,
            MatrixQ& q, MatrixZ& z, fortran_int_t& m, real_type& pl,
            real_type& pr, VectorDIF& dif, fortran_int_t& info,
            minimal_workspace work ) {
        bindings::detail::array< real_type > tmp_work( min_size_work(
                $CALL_MIN_SIZE ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( $CALL_MIN_SIZE ) );
        invoke( ijob, wantq, wantz, select, n, a, b, alphar, alphai, beta, q,
                z, m, pl, pr, dif, info, workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename VectorSELECT, typename MatrixA, typename MatrixB,
            typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
            typename MatrixQ, typename MatrixZ, typename VectorDIF >
    static void invoke( const fortran_int_t ijob, const logical_t wantq,
            const logical_t wantz, const VectorSELECT& select,
            const fortran_int_t n, MatrixA& a, MatrixB& b,
            VectorALPHAR& alphar, VectorALPHAI& alphai, VectorBETA& beta,
            MatrixQ& q, MatrixZ& z, fortran_int_t& m, real_type& pl,
            real_type& pr, VectorDIF& dif, fortran_int_t& info,
            optimal_workspace work ) {
        real_type opt_size_work;
        fortran_int_t opt_size_iwork;
        detail::tgsen( ijob, wantq, wantz, begin_value(select), n,
                begin_value(a), stride_major(a), begin_value(b),
                stride_major(b), begin_value(alphar), begin_value(alphai),
                begin_value(beta), begin_value(q), stride_major(q),
                begin_value(z), stride_major(z), m, pl, pr, begin_value(dif),
                &opt_size_work, -1, &opt_size_iwork, -1, info );
        bindings::detail::array< real_type > tmp_work(
                traits::detail::to_int( opt_size_work ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                opt_size_iwork );
        invoke( ijob, wantq, wantz, select, n, a, b, alphar, alphai, beta, q,
                z, m, pl, pr, dif, info, workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( $ARGUMENTS ) {
        $MIN_SIZE
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( $ARGUMENTS ) {
        $MIN_SIZE
    }
};

//
// This implementation is enabled if Value is a complex type.
//
template< typename Value >
struct tgsen_impl< Value, typename boost::enable_if< is_complex< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename VectorSELECT, typename MatrixA, typename MatrixB,
            typename VectorALPHA, typename VectorBETA, typename MatrixQ,
            typename MatrixZ, typename VectorDIF, typename WORK,
            typename IWORK >
    static void invoke( const fortran_int_t ijob, const logical_t wantq,
            const logical_t wantz, const VectorSELECT& select,
            const fortran_int_t n, MatrixA& a, MatrixB& b,
            VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
            fortran_int_t& m, real_type& pl, real_type& pr,
            VectorDIF& dif, fortran_int_t& info, detail::workspace2< WORK,
            IWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixB >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorALPHA >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorBETA >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixQ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixZ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixB >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorALPHA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorBETA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixQ >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixZ >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorDIF >::value) );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( size(alpha) >= n );
        BOOST_ASSERT( size(select) >= n );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( $CALL_MIN_SIZE ));
        BOOST_ASSERT( size(work.select(value_type())) >= min_size_work(
                $CALL_MIN_SIZE ));
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(b) == 1 || stride_minor(b) == 1 );
        BOOST_ASSERT( size_minor(q) == 1 || stride_minor(q) == 1 );
        BOOST_ASSERT( size_minor(z) == 1 || stride_minor(z) == 1 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,n) );
        BOOST_ASSERT( stride_major(b) >= std::max< std::ptrdiff_t >(1,n) );
        detail::tgsen( ijob, wantq, wantz, begin_value(select), n,
                begin_value(a), stride_major(a), begin_value(b),
                stride_major(b), begin_value(alpha), begin_value(beta),
                begin_value(q), stride_major(q), begin_value(z),
                stride_major(z), m, pl, pr, begin_value(dif),
                begin_value(work.select(value_type())),
                size(work.select(value_type())),
                begin_value(work.select(fortran_int_t())),
                size(work.select(fortran_int_t())), info );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename VectorSELECT, typename MatrixA, typename MatrixB,
            typename VectorALPHA, typename VectorBETA, typename MatrixQ,
            typename MatrixZ, typename VectorDIF >
    static void invoke( const fortran_int_t ijob, const logical_t wantq,
            const logical_t wantz, const VectorSELECT& select,
            const fortran_int_t n, MatrixA& a, MatrixB& b,
            VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
            fortran_int_t& m, real_type& pl, real_type& pr,
            VectorDIF& dif, fortran_int_t& info, minimal_workspace work ) {
        bindings::detail::array< value_type > tmp_work( min_size_work(
                $CALL_MIN_SIZE ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( $CALL_MIN_SIZE ) );
        invoke( ijob, wantq, wantz, select, n, a, b, alpha, beta, q, z, m, pl,
                pr, dif, info, workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename VectorSELECT, typename MatrixA, typename MatrixB,
            typename VectorALPHA, typename VectorBETA, typename MatrixQ,
            typename MatrixZ, typename VectorDIF >
    static void invoke( const fortran_int_t ijob, const logical_t wantq,
            const logical_t wantz, const VectorSELECT& select,
            const fortran_int_t n, MatrixA& a, MatrixB& b,
            VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
            fortran_int_t& m, real_type& pl, real_type& pr,
            VectorDIF& dif, fortran_int_t& info, optimal_workspace work ) {
        value_type opt_size_work;
        fortran_int_t opt_size_iwork;
        detail::tgsen( ijob, wantq, wantz, begin_value(select), n,
                begin_value(a), stride_major(a), begin_value(b),
                stride_major(b), begin_value(alpha), begin_value(beta),
                begin_value(q), stride_major(q), begin_value(z),
                stride_major(z), m, pl, pr, begin_value(dif), &opt_size_work,
                -1, &opt_size_iwork, -1, info );
        bindings::detail::array< value_type > tmp_work(
                traits::detail::to_int( opt_size_work ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                opt_size_iwork );
        invoke( ijob, wantq, wantz, select, n, a, b, alpha, beta, q, z, m, pl,
                pr, dif, info, workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( $ARGUMENTS ) {
        $MIN_SIZE
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( $ARGUMENTS ) {
        $MIN_SIZE
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the tgsen_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar, VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHAR& alphar, const VectorALPHAI& alphai,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF,
        typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHAR&
// * const VectorALPHAI&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHAR, typename VectorALPHAI, typename VectorBETA,
        typename MatrixQ, typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHAR& alphar,
        const VectorALPHAI& alphai, const VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alphar, alphai, beta, q, z, m, pl, pr,
            dif, info, optimal_workspace() );
    return info;
}
//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif, Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        MatrixZ& z, const fortran_int_t& m, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pl,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta, MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, VectorBETA& beta, const MatrixQ& q,
        const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n, MatrixA& a,
        const MatrixB& b, const VectorALPHA& alpha, const VectorBETA& beta,
        const MatrixQ& q, const MatrixZ& z, const fortran_int_t& m,
        typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif,
        Workspace work ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            work );
    return info;
}

//
// Overloaded function for tgsen. Its overload differs for
// * const MatrixA&
// * const MatrixB&
// * const VectorALPHA&
// * const VectorBETA&
// * const MatrixQ&
// * const MatrixZ&
// * const fortran_int_t&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename VectorALPHA, typename VectorBETA, typename MatrixQ,
        typename MatrixZ, typename VectorDIF >
inline std::ptrdiff_t tgsen( const fortran_int_t ijob,
        const logical_t wantq, const logical_t wantz,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const VectorALPHA& alpha,
        const VectorBETA& beta, const MatrixQ& q, const MatrixZ& z,
        const fortran_int_t& m, typename remove_imaginary< typename value<
        MatrixA >::type >::type& pl, typename remove_imaginary<
        typename value< MatrixA >::type >::type& pr, const VectorDIF& dif ) {
    fortran_int_t info(0);
    tgsen_impl< typename value< MatrixA >::type >::invoke( ijob, wantq,
            wantz, select, n, a, b, alpha, beta, q, z, m, pl, pr, dif, info,
            optimal_workspace() );
    return info;
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
