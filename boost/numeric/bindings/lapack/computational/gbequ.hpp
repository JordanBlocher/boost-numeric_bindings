//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_GBEQU_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_GBEQU_HPP

#include <boost/numeric/bindings/lapack/lapack.h>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <cassert>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//$DESCRIPTION

// overloaded functions to call lapack
namespace detail {
    inline void gbequ( integer_t const m, integer_t const n,
            integer_t const kl, integer_t const ku, float* ab,
            integer_t const ldab, float* r, float* c, float& rowcnd,
            float& colcnd, float& amax, integer_t& info ) {
        LAPACK_SGBEQU( &m, &n, &kl, &ku, ab, &ldab, r, c, &rowcnd, &colcnd,
                &amax, &info );
    }
    inline void gbequ( integer_t const m, integer_t const n,
            integer_t const kl, integer_t const ku, double* ab,
            integer_t const ldab, double* r, double* c, double& rowcnd,
            double& colcnd, double& amax, integer_t& info ) {
        LAPACK_DGBEQU( &m, &n, &kl, &ku, ab, &ldab, r, c, &rowcnd, &colcnd,
                &amax, &info );
    }
    inline void gbequ( integer_t const m, integer_t const n,
            integer_t const kl, integer_t const ku, traits::complex_f* ab,
            integer_t const ldab, float* r, float* c, float& rowcnd,
            float& colcnd, float& amax, integer_t& info ) {
        LAPACK_CGBEQU( &m, &n, &kl, &ku, traits::complex_ptr(ab), &ldab, r, c,
                &rowcnd, &colcnd, &amax, &info );
    }
    inline void gbequ( integer_t const m, integer_t const n,
            integer_t const kl, integer_t const ku, traits::complex_d* ab,
            integer_t const ldab, double* r, double* c, double& rowcnd,
            double& colcnd, double& amax, integer_t& info ) {
        LAPACK_ZGBEQU( &m, &n, &kl, &ku, traits::complex_ptr(ab), &ldab, r, c,
                &rowcnd, &colcnd, &amax, &info );
    }
}

// value-type based template
template< typename ValueType >
struct gbequ_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // templated specialization
    template< typename MatrixAB, typename VectorR, typename VectorC >
    static void compute( integer_t const m, integer_t const n,
            integer_t const kl, integer_t const ku, MatrixAB& ab, VectorR& r,
            VectorC& c, real_type& rowcnd, real_type& colcnd, real_type& amax,
            integer_t& info ) {
#ifndef NDEBUG
        assert( m >= 0 );
        assert( n >= 0 );
        assert( kl >= 0 );
        assert( ku >= 0 );
        assert( traits::leading_dimension(ab) >= kl+ku+1 );
#endif
        detail::gbequ( m, n, kl, ku, traits::matrix_storage(ab),
                traits::leading_dimension(ab), traits::vector_storage(r),
                traits::vector_storage(c), rowcnd, colcnd, amax, info );
    }
};


// template function to call gbequ
template< typename MatrixAB, typename VectorR, typename VectorC >
inline integer_t gbequ( integer_t const m, integer_t const n,
        integer_t const kl, integer_t const ku, MatrixAB& ab, VectorR& r,
        VectorC& c,
        typename traits::matrix_traits< MatrixAB >::value_type& rowcnd,
        typename traits::matrix_traits< MatrixAB >::value_type& colcnd,
        typename traits::matrix_traits< MatrixAB >::value_type& amax ) {
    typedef typename traits::matrix_traits< MatrixAB >::value_type value_type;
    integer_t info(0);
    gbequ_impl< value_type >::compute( m, n, kl, ku, ab, r, c, rowcnd,
            colcnd, amax, info );
    return info;
}


}}}} // namespace boost::numeric::bindings::lapack

#endif
