//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_LATRZ_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_LATRZ_HPP

#include <boost/numeric/bindings/lapack/lapack.h>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/traits/detail/array.hpp>
#include <boost/numeric/bindings/traits/is_complex.hpp>
#include <boost/numeric/bindings/traits/is_real.hpp>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/utility/enable_if.hpp>
#include <cassert>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//$DESCRIPTION

// overloaded functions to call lapack
namespace detail {
    inline void latrz( integer_t const m, integer_t const n,
            integer_t const l, float* a, integer_t const lda, float* tau,
            float* work ) {
        LAPACK_SLATRZ( &m, &n, &l, a, &lda, tau, work );
    }
    inline void latrz( integer_t const m, integer_t const n,
            integer_t const l, double* a, integer_t const lda, double* tau,
            double* work ) {
        LAPACK_DLATRZ( &m, &n, &l, a, &lda, tau, work );
    }
    inline void latrz( integer_t const m, integer_t const n,
            integer_t const l, traits::complex_f* a, integer_t const lda,
            traits::complex_f* tau, traits::complex_f* work ) {
        LAPACK_CLATRZ( &m, &n, &l, traits::complex_ptr(a), &lda,
                traits::complex_ptr(tau), traits::complex_ptr(work) );
    }
    inline void latrz( integer_t const m, integer_t const n,
            integer_t const l, traits::complex_d* a, integer_t const lda,
            traits::complex_d* tau, traits::complex_d* work ) {
        LAPACK_ZLATRZ( &m, &n, &l, traits::complex_ptr(a), &lda,
                traits::complex_ptr(tau), traits::complex_ptr(work) );
    }
}

// value-type based template
template< typename ValueType, typename Enable = void >
struct latrz_impl{};

// real specialization
template< typename ValueType >
struct latrz_impl< ValueType, typename boost::enable_if< traits::is_real<ValueType> >::type > {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // user-defined workspace specialization
    template< typename MatrixA, typename VectorTAU, typename WORK >
    static void compute( MatrixA& a, VectorTAU& tau, detail::workspace1<
            WORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::vector_traits<
                VectorTAU >::value_type >::value) );
#ifndef NDEBUG
        assert( traits::matrix_num_rows(a) >= 0 );
        assert( traits::matrix_num_columns(a) >= 0 );
        assert( traits::matrix_num_columns(a) >= 0 );
        assert( traits::leading_dimension(a) >= std::max(1,
                traits::matrix_num_rows(a)) );
        assert( traits::vector_size(tau) >= traits::matrix_num_rows(a) );
        assert( traits::vector_size(work.select(real_type()) >= min_size_work(
                traits::matrix_num_rows(a) )));
#endif
        detail::latrz( traits::matrix_num_rows(a),
                traits::matrix_num_columns(a), traits::matrix_num_columns(a),
                traits::matrix_storage(a), traits::leading_dimension(a),
                traits::vector_storage(tau),
                traits::vector_storage(work.select(real_type())) );
    }

    // minimal workspace specialization
    template< typename MatrixA, typename VectorTAU >
    static void compute( MatrixA& a, VectorTAU& tau, minimal_workspace work ) {
        traits::detail::array< real_type > tmp_work( min_size_work(
                traits::matrix_num_rows(a) ) );
        compute( a, tau, workspace( tmp_work ) );
    }

    // optimal workspace specialization
    template< typename MatrixA, typename VectorTAU >
    static void compute( MatrixA& a, VectorTAU& tau, optimal_workspace work ) {
        compute( a, tau, minimal_workspace() );
    }

    static integer_t min_size_work( integer_t const m ) {
        return m;
    }
};

// complex specialization
template< typename ValueType >
struct latrz_impl< ValueType, typename boost::enable_if< traits::is_complex<ValueType> >::type > {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // user-defined workspace specialization
    template< typename MatrixA, typename VectorTAU, typename WORK >
    static void compute( MatrixA& a, VectorTAU& tau, detail::workspace1<
            WORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixA >::value_type, typename traits::vector_traits<
                VectorTAU >::value_type >::value) );
#ifndef NDEBUG
        assert( traits::matrix_num_rows(a) >= 0 );
        assert( traits::matrix_num_columns(a) >= 0 );
        assert( traits::matrix_num_columns(a) >= 0 );
        assert( traits::leading_dimension(a) >= std::max(1,
                traits::matrix_num_rows(a)) );
        assert( traits::vector_size(tau) >= traits::matrix_num_rows(a) );
        assert( traits::vector_size(work.select(value_type()) >=
                min_size_work( traits::matrix_num_rows(a) )));
#endif
        detail::latrz( traits::matrix_num_rows(a),
                traits::matrix_num_columns(a), traits::matrix_num_columns(a),
                traits::matrix_storage(a), traits::leading_dimension(a),
                traits::vector_storage(tau),
                traits::vector_storage(work.select(value_type())) );
    }

    // minimal workspace specialization
    template< typename MatrixA, typename VectorTAU >
    static void compute( MatrixA& a, VectorTAU& tau, minimal_workspace work ) {
        traits::detail::array< value_type > tmp_work( min_size_work(
                traits::matrix_num_rows(a) ) );
        compute( a, tau, workspace( tmp_work ) );
    }

    // optimal workspace specialization
    template< typename MatrixA, typename VectorTAU >
    static void compute( MatrixA& a, VectorTAU& tau, optimal_workspace work ) {
        compute( a, tau, minimal_workspace() );
    }

    static integer_t min_size_work( integer_t const m ) {
        return m;
    }
};


// template function to call latrz
template< typename MatrixA, typename VectorTAU, typename Workspace >
inline integer_t latrz( MatrixA& a, VectorTAU& tau,
        Workspace work = optimal_workspace() ) {
    typedef typename traits::matrix_traits< MatrixA >::value_type value_type;
    integer_t info(0);
    latrz_impl< value_type >::compute( a, tau, work );
    return info;
}

}}}} // namespace boost::numeric::bindings::lapack

#endif
