//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_BDSDC_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_BDSDC_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/data_side.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>

//
// The LAPACK-backend for bdsdc is the netlib-compatible backend.
//
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * float value-type.
//
inline std::ptrdiff_t bdsdc( char uplo, char compq, fortran_int_t n, float* d,
        float* e, float* u, fortran_int_t ldu, float* vt, fortran_int_t ldvt,
        float* q, fortran_int_t* iq, float* work, fortran_int_t* iwork ) {
    fortran_int_t info(0);
    LAPACK_SBDSDC( &uplo, &compq, &n, d, e, u, &ldu, vt, &ldvt, q, iq, work,
            iwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * double value-type.
//
inline std::ptrdiff_t bdsdc( char uplo, char compq, fortran_int_t n, double* d,
        double* e, double* u, fortran_int_t ldu, double* vt,
        fortran_int_t ldvt, double* q, fortran_int_t* iq, double* work,
        fortran_int_t* iwork ) {
    fortran_int_t info(0);
    LAPACK_DBDSDC( &uplo, &compq, &n, d, e, u, &ldu, vt, &ldvt, q, iq, work,
            iwork, &info );
    return info;
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to bdsdc.
//
template< typename Value >
struct bdsdc_impl {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename VectorD, typename VectorE, typename MatrixU,
            typename MatrixVT, typename VectorQ, typename VectorIQ,
            typename WORK, typename IWORK >
    static std::ptrdiff_t invoke( const char uplo, const char compq,
            const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
            MatrixVT& vt, VectorQ& q, VectorIQ& iq, detail::workspace2< WORK,
            IWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                VectorE >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                MatrixU >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                MatrixVT >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                VectorQ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorD >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorE >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixU >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixVT >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorQ >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorIQ >::value) );
        BOOST_ASSERT( compq == 'N' || compq == 'P' || compq == 'I' );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( size(e) >= n-1 );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( n ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work( compq,
                n ));
        BOOST_ASSERT( size_minor(u) == 1 || stride_minor(u) == 1 );
        BOOST_ASSERT( size_minor(vt) == 1 || stride_minor(vt) == 1 );
        return detail::bdsdc( uplo, compq, n, begin_value(d), begin_value(e),
                begin_value(u), stride_major(u), begin_value(vt),
                stride_major(vt), begin_value(q), begin_value(iq),
                begin_value(work.select(real_type())),
                begin_value(work.select(fortran_int_t())) );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename VectorD, typename VectorE, typename MatrixU,
            typename MatrixVT, typename VectorQ, typename VectorIQ >
    static std::ptrdiff_t invoke( const char uplo, const char compq,
            const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
            MatrixVT& vt, VectorQ& q, VectorIQ& iq, minimal_workspace work ) {
        bindings::detail::array< real_type > tmp_work( min_size_work( compq,
                n ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( n ) );
        return invoke( uplo, compq, n, d, e, u, vt, q, iq,
                workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename VectorD, typename VectorE, typename MatrixU,
            typename MatrixVT, typename VectorQ, typename VectorIQ >
    static std::ptrdiff_t invoke( const char uplo, const char compq,
            const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
            MatrixVT& vt, VectorQ& q, VectorIQ& iq, optimal_workspace work ) {
        return invoke( uplo, compq, n, d, e, u, vt, q, iq,
                minimal_workspace() );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const char compq,
            const std::ptrdiff_t n ) {
        switch ( compq ) {
            case 'N': return 4*n;
            case 'P': return 6*n;
            case 'I': return 3*n*n + 4*n;
        }
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( const std::ptrdiff_t n ) {
        return 8*n;
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the bdsdc_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        MatrixVT& vt, VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, MatrixVT& vt, VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        MatrixVT& vt, VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, MatrixVT& vt, VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        const MatrixVT& vt, VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        const MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, const MatrixVT& vt, VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, const MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        const MatrixVT& vt, VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        const MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, const MatrixVT& vt, VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, const MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, const VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, const VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        MatrixVT& vt, const VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, MatrixVT& vt, const VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        MatrixVT& vt, const VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, MatrixVT& vt, const VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, const VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, const VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, const MatrixVT& vt, const VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, const MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, const MatrixVT& vt, const VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, const MatrixVT& vt, const VectorQ& q,
        VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, const VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, const VectorQ& q,
        VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, const VectorQ& q, VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, const VectorQ& q,
        VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, VectorQ& q, const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, VectorQ& q, const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        MatrixVT& vt, VectorQ& q, const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, MatrixVT& vt, VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        MatrixVT& vt, VectorQ& q, const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, MatrixVT& vt, VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, VectorQ& q, const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, VectorQ& q, const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        const MatrixVT& vt, VectorQ& q, const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        const MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, const MatrixVT& vt, VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, const MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        const MatrixVT& vt, VectorQ& q, const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        const MatrixVT& vt, VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, const MatrixVT& vt, VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, const MatrixVT& vt, VectorQ& q,
        const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, VectorQ& q,
        const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, VectorQ& q,
        const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, const VectorQ& q, const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, const VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, const VectorQ& q, const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        MatrixVT& vt, const VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        MatrixVT& vt, const VectorQ& q, const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        MatrixVT& vt, const VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, MatrixVT& vt, const VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, MatrixVT& vt, const VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        MatrixVT& vt, const VectorQ& q, const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        MatrixVT& vt, const VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, MatrixVT& vt, const VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, MatrixVT& vt, const VectorQ& q,
        const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, const VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, const VectorQ& q,
        const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, const VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, MatrixVT& vt, const VectorQ& q,
        const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e, MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e, MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, const MatrixVT& vt, const VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        MatrixU& u, const MatrixVT& vt, const VectorQ& q,
        const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, const VectorIQ& iq,
        Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, VectorE& e, const MatrixU& u,
        const MatrixVT& vt, const VectorQ& q, const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, const MatrixVT& vt, const VectorQ& q,
        const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const MatrixU& u, const MatrixVT& vt, const VectorQ& q,
        const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, const VectorQ& q,
        const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, const VectorQ& q,
        const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ,
        typename Workspace >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, const VectorQ& q,
        const VectorIQ& iq, Workspace work ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, work );
}

//
// Overloaded function for bdsdc. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const MatrixU&
// * const MatrixVT&
// * const VectorQ&
// * const VectorIQ&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename MatrixU,
        typename MatrixVT, typename VectorQ, typename VectorIQ >
inline std::ptrdiff_t bdsdc( const char uplo, const char compq,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const MatrixU& u, const MatrixVT& vt, const VectorQ& q,
        const VectorIQ& iq ) {
    return bdsdc_impl< typename value< VectorD >::type >::invoke( uplo,
            compq, n, d, e, u, vt, q, iq, optimal_workspace() );
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
