//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_GBBRD_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_GBBRD_HPP

#include <boost/numeric/bindings/lapack/lapack.h>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/traits/detail/array.hpp>
#include <boost/numeric/bindings/traits/is_complex.hpp>
#include <boost/numeric/bindings/traits/is_real.hpp>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/utility/enable_if.hpp>
#include <cassert>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//$DESCRIPTION

// overloaded functions to call lapack
namespace detail {
    inline void gbbrd( char const vect, integer_t const m, integer_t const n,
            integer_t const ncc, integer_t const kl, integer_t const ku,
            float* ab, integer_t const ldab, float* d, float* e, float* q,
            integer_t const ldq, float* pt, integer_t const ldpt, float* c,
            integer_t const ldc, float* work, integer_t& info ) {
        LAPACK_SGBBRD( &vect, &m, &n, &ncc, &kl, &ku, ab, &ldab, d, e, q,
                &ldq, pt, &ldpt, c, &ldc, work, &info );
    }
    inline void gbbrd( char const vect, integer_t const m, integer_t const n,
            integer_t const ncc, integer_t const kl, integer_t const ku,
            double* ab, integer_t const ldab, double* d, double* e, double* q,
            integer_t const ldq, double* pt, integer_t const ldpt, double* c,
            integer_t const ldc, double* work, integer_t& info ) {
        LAPACK_DGBBRD( &vect, &m, &n, &ncc, &kl, &ku, ab, &ldab, d, e, q,
                &ldq, pt, &ldpt, c, &ldc, work, &info );
    }
    inline void gbbrd( char const vect, integer_t const m, integer_t const n,
            integer_t const ncc, integer_t const kl, integer_t const ku,
            traits::complex_f* ab, integer_t const ldab, float* d, float* e,
            traits::complex_f* q, integer_t const ldq, traits::complex_f* pt,
            integer_t const ldpt, traits::complex_f* c, integer_t const ldc,
            traits::complex_f* work, float* rwork, integer_t& info ) {
        LAPACK_CGBBRD( &vect, &m, &n, &ncc, &kl, &ku, traits::complex_ptr(ab),
                &ldab, d, e, traits::complex_ptr(q), &ldq,
                traits::complex_ptr(pt), &ldpt, traits::complex_ptr(c), &ldc,
                traits::complex_ptr(work), rwork, &info );
    }
    inline void gbbrd( char const vect, integer_t const m, integer_t const n,
            integer_t const ncc, integer_t const kl, integer_t const ku,
            traits::complex_d* ab, integer_t const ldab, double* d, double* e,
            traits::complex_d* q, integer_t const ldq, traits::complex_d* pt,
            integer_t const ldpt, traits::complex_d* c, integer_t const ldc,
            traits::complex_d* work, double* rwork, integer_t& info ) {
        LAPACK_ZGBBRD( &vect, &m, &n, &ncc, &kl, &ku, traits::complex_ptr(ab),
                &ldab, d, e, traits::complex_ptr(q), &ldq,
                traits::complex_ptr(pt), &ldpt, traits::complex_ptr(c), &ldc,
                traits::complex_ptr(work), rwork, &info );
    }
}

// value-type based template
template< typename ValueType, typename Enable = void >
struct gbbrd_impl{};

// real specialization
template< typename ValueType >
struct gbbrd_impl< ValueType, typename boost::enable_if< traits::is_real<ValueType> >::type > {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // user-defined workspace specialization
    template< typename MatrixAB, typename VectorD, typename VectorE,
            typename MatrixQ, typename MatrixPT, typename MatrixC,
            typename WORK >
    static void compute( char const vect, integer_t const m,
            integer_t const n, integer_t const kl, integer_t const ku,
            MatrixAB& ab, VectorD& d, VectorE& e, MatrixQ& q, MatrixPT& pt,
            MatrixC& c, integer_t& info, detail::workspace1< WORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixAB >::value_type, typename traits::vector_traits<
                VectorD >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixAB >::value_type, typename traits::vector_traits<
                VectorE >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixAB >::value_type, typename traits::matrix_traits<
                MatrixQ >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixAB >::value_type, typename traits::matrix_traits<
                MatrixPT >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixAB >::value_type, typename traits::matrix_traits<
                MatrixC >::value_type >::value) );
#ifndef NDEBUG
        assert( vect == 'N' || vect == 'Q' || vect == 'P' || vect == 'B' );
        assert( m >= 0 );
        assert( n >= 0 );
        assert( traits::matrix_num_columns(c) >= 0 );
        assert( kl >= 0 );
        assert( ku >= 0 );
        assert( traits::leading_dimension(ab) >= kl+ku+1 );
        assert( traits::vector_size(d) >= std::min(m,n) );
        assert( traits::vector_size(e) >= std::min(m,n)-1 );
        assert( traits::vector_size(work.select(real_type())) >=
                min_size_work( m, n ));
#endif
        detail::gbbrd( vect, m, n, traits::matrix_num_columns(c), kl, ku,
                traits::matrix_storage(ab), traits::leading_dimension(ab),
                traits::vector_storage(d), traits::vector_storage(e),
                traits::matrix_storage(q), traits::leading_dimension(q),
                traits::matrix_storage(pt), traits::leading_dimension(pt),
                traits::matrix_storage(c), traits::leading_dimension(c),
                traits::vector_storage(work.select(real_type())), info );
    }

    // minimal workspace specialization
    template< typename MatrixAB, typename VectorD, typename VectorE,
            typename MatrixQ, typename MatrixPT, typename MatrixC >
    static void compute( char const vect, integer_t const m,
            integer_t const n, integer_t const kl, integer_t const ku,
            MatrixAB& ab, VectorD& d, VectorE& e, MatrixQ& q, MatrixPT& pt,
            MatrixC& c, integer_t& info, minimal_workspace work ) {
        traits::detail::array< real_type > tmp_work( min_size_work( m, n ) );
        compute( vect, m, n, kl, ku, ab, d, e, q, pt, c, info,
                workspace( tmp_work ) );
    }

    // optimal workspace specialization
    template< typename MatrixAB, typename VectorD, typename VectorE,
            typename MatrixQ, typename MatrixPT, typename MatrixC >
    static void compute( char const vect, integer_t const m,
            integer_t const n, integer_t const kl, integer_t const ku,
            MatrixAB& ab, VectorD& d, VectorE& e, MatrixQ& q, MatrixPT& pt,
            MatrixC& c, integer_t& info, optimal_workspace work ) {
        compute( vect, m, n, kl, ku, ab, d, e, q, pt, c, info,
                minimal_workspace() );
    }

    static integer_t min_size_work( integer_t const m, integer_t const n ) {
        return 2*std::max(m,n);
    }
};

// complex specialization
template< typename ValueType >
struct gbbrd_impl< ValueType, typename boost::enable_if< traits::is_complex<ValueType> >::type > {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // user-defined workspace specialization
    template< typename MatrixAB, typename VectorD, typename VectorE,
            typename MatrixQ, typename MatrixPT, typename MatrixC,
            typename WORK, typename RWORK >
    static void compute( char const vect, integer_t const m,
            integer_t const n, integer_t const kl, integer_t const ku,
            MatrixAB& ab, VectorD& d, VectorE& e, MatrixQ& q, MatrixPT& pt,
            MatrixC& c, integer_t& info, detail::workspace2< WORK,
            RWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::vector_traits<
                VectorE >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixAB >::value_type, typename traits::matrix_traits<
                MatrixQ >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixAB >::value_type, typename traits::matrix_traits<
                MatrixPT >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::matrix_traits<
                MatrixAB >::value_type, typename traits::matrix_traits<
                MatrixC >::value_type >::value) );
#ifndef NDEBUG
        assert( vect == 'N' || vect == 'Q' || vect == 'P' || vect == 'B' );
        assert( m >= 0 );
        assert( n >= 0 );
        assert( traits::matrix_num_columns(c) >= 0 );
        assert( kl >= 0 );
        assert( ku >= 0 );
        assert( traits::leading_dimension(ab) >= kl+ku+1 );
        assert( traits::vector_size(d) >= std::min(m,n) );
        assert( traits::vector_size(e) >= std::min(m,n)-1 );
        assert( traits::vector_size(work.select(value_type())) >=
                min_size_work( m, n ));
        assert( traits::vector_size(work.select(real_type())) >=
                min_size_rwork( m, n ));
#endif
        detail::gbbrd( vect, m, n, traits::matrix_num_columns(c), kl, ku,
                traits::matrix_storage(ab), traits::leading_dimension(ab),
                traits::vector_storage(d), traits::vector_storage(e),
                traits::matrix_storage(q), traits::leading_dimension(q),
                traits::matrix_storage(pt), traits::leading_dimension(pt),
                traits::matrix_storage(c), traits::leading_dimension(c),
                traits::vector_storage(work.select(value_type())),
                traits::vector_storage(work.select(real_type())), info );
    }

    // minimal workspace specialization
    template< typename MatrixAB, typename VectorD, typename VectorE,
            typename MatrixQ, typename MatrixPT, typename MatrixC >
    static void compute( char const vect, integer_t const m,
            integer_t const n, integer_t const kl, integer_t const ku,
            MatrixAB& ab, VectorD& d, VectorE& e, MatrixQ& q, MatrixPT& pt,
            MatrixC& c, integer_t& info, minimal_workspace work ) {
        traits::detail::array< value_type > tmp_work( min_size_work( m, n ) );
        traits::detail::array< real_type > tmp_rwork( min_size_rwork( m, n ) );
        compute( vect, m, n, kl, ku, ab, d, e, q, pt, c, info,
                workspace( tmp_work, tmp_rwork ) );
    }

    // optimal workspace specialization
    template< typename MatrixAB, typename VectorD, typename VectorE,
            typename MatrixQ, typename MatrixPT, typename MatrixC >
    static void compute( char const vect, integer_t const m,
            integer_t const n, integer_t const kl, integer_t const ku,
            MatrixAB& ab, VectorD& d, VectorE& e, MatrixQ& q, MatrixPT& pt,
            MatrixC& c, integer_t& info, optimal_workspace work ) {
        compute( vect, m, n, kl, ku, ab, d, e, q, pt, c, info,
                minimal_workspace() );
    }

    static integer_t min_size_work( integer_t const m, integer_t const n ) {
        return std::max(m,n);
    }

    static integer_t min_size_rwork( integer_t const m, integer_t const n ) {
        return std::max(m,n);
    }
};


// template function to call gbbrd
template< typename MatrixAB, typename VectorD, typename VectorE,
        typename MatrixQ, typename MatrixPT, typename MatrixC,
        typename Workspace >
inline integer_t gbbrd( char const vect, integer_t const m,
        integer_t const n, integer_t const kl, integer_t const ku,
        MatrixAB& ab, VectorD& d, VectorE& e, MatrixQ& q, MatrixPT& pt,
        MatrixC& c, Workspace work = optimal_workspace() ) {
    typedef typename traits::matrix_traits< MatrixAB >::value_type value_type;
    integer_t info(0);
    gbbrd_impl< value_type >::compute( vect, m, n, kl, ku, ab, d, e, q,
            pt, c, info, work );
    return info;
}

}}}} // namespace boost::numeric::bindings::lapack

#endif
