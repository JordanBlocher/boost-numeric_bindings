//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_GEBAL_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_GEBAL_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/is_complex.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/is_real.hpp>
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/utility/enable_if.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to float value-type.
//
inline void gebal( char job, fortran_int_t n, float* a, fortran_int_t lda,
        fortran_int_t& ilo, fortran_int_t& ihi, float* scale,
        fortran_int_t& info ) {
    LAPACK_SGEBAL( &job, &n, a, &lda, &ilo, &ihi, scale, &info );
}

//
// Overloaded function for dispatching to double value-type.
//
inline void gebal( char job, fortran_int_t n, double* a, fortran_int_t lda,
        fortran_int_t& ilo, fortran_int_t& ihi, double* scale,
        fortran_int_t& info ) {
    LAPACK_DGEBAL( &job, &n, a, &lda, &ilo, &ihi, scale, &info );
}

//
// Overloaded function for dispatching to complex<float> value-type.
//
inline void gebal( char job, fortran_int_t n, std::complex<float>* a,
        fortran_int_t lda, fortran_int_t& ilo, fortran_int_t& ihi,
        float* scale, fortran_int_t& info ) {
    LAPACK_CGEBAL( &job, &n, a, &lda, &ilo, &ihi, scale, &info );
}

//
// Overloaded function for dispatching to complex<double> value-type.
//
inline void gebal( char job, fortran_int_t n, std::complex<double>* a,
        fortran_int_t lda, fortran_int_t& ilo, fortran_int_t& ihi,
        double* scale, fortran_int_t& info ) {
    LAPACK_ZGEBAL( &job, &n, a, &lda, &ilo, &ihi, scale, &info );
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to gebal.
//
template< typename Value, typename Enable = void >
struct gebal_impl {};

//
// This implementation is enabled if Value is a real type.
//
template< typename Value >
struct gebal_impl< Value, typename boost::enable_if< is_real< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixA, typename VectorSCALE >
    static void invoke( const char job, MatrixA& a, fortran_int_t& ilo,
            fortran_int_t& ihi, VectorSCALE& scale,
            fortran_int_t& info ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorSCALE >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorSCALE >::value) );
        BOOST_ASSERT( job == 'N' || job == 'P' || job == 'S' || job == 'B' );
        BOOST_ASSERT( size_column(a) >= 0 );
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,
                size_column(a)) );
        detail::gebal( job, size_column(a), begin_value(a), stride_major(a),
                ilo, ihi, begin_value(scale), info );
    }

};

//
// This implementation is enabled if Value is a complex type.
//
template< typename Value >
struct gebal_impl< Value, typename boost::enable_if< is_complex< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixA, typename VectorSCALE >
    static void invoke( const char job, MatrixA& a, fortran_int_t& ilo,
            fortran_int_t& ihi, VectorSCALE& scale,
            fortran_int_t& info ) {
        BOOST_STATIC_ASSERT( (is_mutable< MatrixA >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorSCALE >::value) );
        BOOST_ASSERT( job == 'N' || job == 'P' || job == 'S' || job == 'B' );
        BOOST_ASSERT( size_column(a) >= 0 );
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,
                size_column(a)) );
        detail::gebal( job, size_column(a), begin_value(a), stride_major(a),
                ilo, ihi, begin_value(scale), info );
    }

};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the gebal_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for gebal. Its overload differs for
// * MatrixA&
// * fortran_int_t&
// * fortran_int_t&
// * VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, MatrixA& a,
        fortran_int_t& ilo, fortran_int_t& ihi, VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * const MatrixA&
// * fortran_int_t&
// * fortran_int_t&
// * VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, const MatrixA& a,
        fortran_int_t& ilo, fortran_int_t& ihi, VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * MatrixA&
// * const fortran_int_t&
// * fortran_int_t&
// * VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, MatrixA& a,
        const fortran_int_t& ilo, fortran_int_t& ihi,
        VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * const MatrixA&
// * const fortran_int_t&
// * fortran_int_t&
// * VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, const MatrixA& a,
        const fortran_int_t& ilo, fortran_int_t& ihi,
        VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * MatrixA&
// * fortran_int_t&
// * const fortran_int_t&
// * VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, MatrixA& a,
        fortran_int_t& ilo, const fortran_int_t& ihi,
        VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * const MatrixA&
// * fortran_int_t&
// * const fortran_int_t&
// * VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, const MatrixA& a,
        fortran_int_t& ilo, const fortran_int_t& ihi,
        VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * MatrixA&
// * const fortran_int_t&
// * const fortran_int_t&
// * VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, MatrixA& a,
        const fortran_int_t& ilo, const fortran_int_t& ihi,
        VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * const MatrixA&
// * const fortran_int_t&
// * const fortran_int_t&
// * VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, const MatrixA& a,
        const fortran_int_t& ilo, const fortran_int_t& ihi,
        VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * MatrixA&
// * fortran_int_t&
// * fortran_int_t&
// * const VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, MatrixA& a,
        fortran_int_t& ilo, fortran_int_t& ihi,
        const VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * const MatrixA&
// * fortran_int_t&
// * fortran_int_t&
// * const VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, const MatrixA& a,
        fortran_int_t& ilo, fortran_int_t& ihi,
        const VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * MatrixA&
// * const fortran_int_t&
// * fortran_int_t&
// * const VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, MatrixA& a,
        const fortran_int_t& ilo, fortran_int_t& ihi,
        const VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * const MatrixA&
// * const fortran_int_t&
// * fortran_int_t&
// * const VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, const MatrixA& a,
        const fortran_int_t& ilo, fortran_int_t& ihi,
        const VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * MatrixA&
// * fortran_int_t&
// * const fortran_int_t&
// * const VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, MatrixA& a,
        fortran_int_t& ilo, const fortran_int_t& ihi,
        const VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * const MatrixA&
// * fortran_int_t&
// * const fortran_int_t&
// * const VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, const MatrixA& a,
        fortran_int_t& ilo, const fortran_int_t& ihi,
        const VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * MatrixA&
// * const fortran_int_t&
// * const fortran_int_t&
// * const VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, MatrixA& a,
        const fortran_int_t& ilo, const fortran_int_t& ihi,
        const VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

//
// Overloaded function for gebal. Its overload differs for
// * const MatrixA&
// * const fortran_int_t&
// * const fortran_int_t&
// * const VectorSCALE&
//
template< typename MatrixA, typename VectorSCALE >
inline std::ptrdiff_t gebal( const char job, const MatrixA& a,
        const fortran_int_t& ilo, const fortran_int_t& ihi,
        const VectorSCALE& scale ) {
    fortran_int_t info(0);
    gebal_impl< typename value< MatrixA >::type >::invoke( job, a, ilo,
            ihi, scale, info );
    return info;
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
