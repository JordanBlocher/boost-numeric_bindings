//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_LATRS_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_LATRS_HPP

#include <boost/numeric/bindings/lapack/lapack.h>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <cassert>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//$DESCRIPTION

// overloaded functions to call lapack
namespace detail {
    inline void latrs( char const uplo, char const trans, char const diag,
            char const normin, integer_t const n, float* a,
            integer_t const lda, float* x, float& scale, float* cnorm,
            integer_t& info ) {
        LAPACK_SLATRS( &uplo, &trans, &diag, &normin, &n, a, &lda, x, &scale,
                cnorm, &info );
    }
    inline void latrs( char const uplo, char const trans, char const diag,
            char const normin, integer_t const n, double* a,
            integer_t const lda, double* x, double& scale, double* cnorm,
            integer_t& info ) {
        LAPACK_DLATRS( &uplo, &trans, &diag, &normin, &n, a, &lda, x, &scale,
                cnorm, &info );
    }
    inline void latrs( char const uplo, char const trans, char const diag,
            char const normin, integer_t const n, traits::complex_f* a,
            integer_t const lda, traits::complex_f* x, float& scale,
            float* cnorm, integer_t& info ) {
        LAPACK_CLATRS( &uplo, &trans, &diag, &normin, &n,
                traits::complex_ptr(a), &lda, traits::complex_ptr(x), &scale,
                cnorm, &info );
    }
    inline void latrs( char const uplo, char const trans, char const diag,
            char const normin, integer_t const n, traits::complex_d* a,
            integer_t const lda, traits::complex_d* x, double& scale,
            double* cnorm, integer_t& info ) {
        LAPACK_ZLATRS( &uplo, &trans, &diag, &normin, &n,
                traits::complex_ptr(a), &lda, traits::complex_ptr(x), &scale,
                cnorm, &info );
    }
}

// value-type based template
template< typename ValueType >
struct latrs_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // templated specialization
    template< typename MatrixA, typename VectorX, typename VectorCNORM >
    static void compute( char const uplo, char const trans, char const diag,
            char const normin, MatrixA& a, VectorX& x, real_type& scale,
            VectorCNORM& cnorm, integer_t& info ) {
#ifndef NDEBUG
        assert( uplo == 'U' || uplo == 'L' );
        assert( trans == 'N' || trans == 'T' || trans == 'C' );
        assert( diag == 'N' || diag == 'U' );
        assert( normin == 'Y' || normin == 'N' );
        assert( traits::matrix_size2(a) >= 0 );
        assert( traits::leading_dimension(a) >= ?MAX );
        assert( traits::vector_size(x) >= traits::matrix_size2(a) );
#endif
        detail::latrs( uplo, trans, diag, normin, traits::matrix_size2(a),
                traits::matrix_storage(a), traits::leading_dimension(a),
                traits::vector_storage(x), scale,
                traits::vector_storage(cnorm), info );
    }
};


// template function to call latrs
template< typename MatrixA, typename VectorX, typename VectorCNORM >
inline integer_t latrs( char const uplo, char const trans,
        char const diag, char const normin, MatrixA& a, VectorX& x,
        typename traits::matrix_traits< MatrixA >::value_type& scale,
        VectorCNORM& cnorm ) {
    typedef typename traits::matrix_traits< MatrixA >::value_type value_type;
    integer_t info(0);
    latrs_impl< value_type >::compute( uplo, trans, diag, normin, a, x,
            scale, cnorm, info );
    return info;
}


}}}} // namespace boost::numeric::bindings::lapack

#endif
