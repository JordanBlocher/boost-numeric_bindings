//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_STEBZ_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_STEBZ_HPP

#include <boost/assert.hpp>
#include <boost/mpl/bool.hpp>
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/traits/detail/array.hpp>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//$DESCRIPTION

// overloaded functions to call lapack
namespace detail {
    inline void stebz( const char range, const char order, const integer_t n,
            const float vl, const float vu, const integer_t il,
            const integer_t iu, const float abstol, const float* d,
            const float* e, integer_t& m, integer_t& nsplit, float* w,
            integer_t* iblock, integer_t* isplit, float* work,
            integer_t* iwork, integer_t& info ) {
        LAPACK_SSTEBZ( &range, &order, &n, &vl, &vu, &il, &iu, &abstol, d, e,
                &m, &nsplit, w, iblock, isplit, work, iwork, &info );
    }
    inline void stebz( const char range, const char order, const integer_t n,
            const double vl, const double vu, const integer_t il,
            const integer_t iu, const double abstol, const double* d,
            const double* e, integer_t& m, integer_t& nsplit, double* w,
            integer_t* iblock, integer_t* isplit, double* work,
            integer_t* iwork, integer_t& info ) {
        LAPACK_DSTEBZ( &range, &order, &n, &vl, &vu, &il, &iu, &abstol, d, e,
                &m, &nsplit, w, iblock, isplit, work, iwork, &info );
    }
}

// value-type based template
template< typename ValueType >
struct stebz_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // user-defined workspace specialization
    template< typename VectorD, typename VectorE, typename VectorW,
            typename VectorIBLOCK, typename VectorISPLIT, typename WORK,
            typename IWORK >
    static void invoke( const char range, const char order, const integer_t n,
            const real_type vl, const real_type vu, const integer_t il,
            const integer_t iu, const real_type abstol, const VectorD& d,
            const VectorE& e, integer_t& m, integer_t& nsplit, VectorW& w,
            VectorIBLOCK& iblock, VectorISPLIT& isplit, integer_t& info,
            detail::workspace2< WORK, IWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::vector_traits<
                VectorE >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorD >::value_type, typename traits::vector_traits<
                VectorW >::value_type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename traits::vector_traits<
                VectorIBLOCK >::value_type, typename traits::vector_traits<
                VectorISPLIT >::value_type >::value) );
        BOOST_ASSERT( range == 'A' || range == 'V' || range == 'I' );
        BOOST_ASSERT( order == 'B' || order == 'E' );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( traits::vector_size(d) >= n );
        BOOST_ASSERT( traits::vector_size(e) >= n-1 );
        BOOST_ASSERT( traits::vector_size(w) >= n );
        BOOST_ASSERT( traits::vector_size(isplit) >= n );
        BOOST_ASSERT( traits::vector_size(work.select(real_type())) >=
                min_size_work( n ));
        BOOST_ASSERT( traits::vector_size(work.select(integer_t())) >=
                min_size_iwork( n ));
        detail::stebz( range, order, n, vl, vu, il, iu, abstol,
                traits::vector_storage(d), traits::vector_storage(e), m,
                nsplit, traits::vector_storage(w),
                traits::vector_storage(iblock),
                traits::vector_storage(isplit),
                traits::vector_storage(work.select(real_type())),
                traits::vector_storage(work.select(integer_t())), info );
    }

    // minimal workspace specialization
    template< typename VectorD, typename VectorE, typename VectorW,
            typename VectorIBLOCK, typename VectorISPLIT >
    static void invoke( const char range, const char order, const integer_t n,
            const real_type vl, const real_type vu, const integer_t il,
            const integer_t iu, const real_type abstol, const VectorD& d,
            const VectorE& e, integer_t& m, integer_t& nsplit, VectorW& w,
            VectorIBLOCK& iblock, VectorISPLIT& isplit, integer_t& info,
            minimal_workspace work ) {
        traits::detail::array< real_type > tmp_work( min_size_work( n ) );
        traits::detail::array< integer_t > tmp_iwork( min_size_iwork( n ) );
        invoke( range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w,
                iblock, isplit, info, workspace( tmp_work, tmp_iwork ) );
    }

    // optimal workspace specialization
    template< typename VectorD, typename VectorE, typename VectorW,
            typename VectorIBLOCK, typename VectorISPLIT >
    static void invoke( const char range, const char order, const integer_t n,
            const real_type vl, const real_type vu, const integer_t il,
            const integer_t iu, const real_type abstol, const VectorD& d,
            const VectorE& e, integer_t& m, integer_t& nsplit, VectorW& w,
            VectorIBLOCK& iblock, VectorISPLIT& isplit, integer_t& info,
            optimal_workspace work ) {
        invoke( range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w,
                iblock, isplit, info, minimal_workspace() );
    }

    static integer_t min_size_work( const integer_t n ) {
        return 4*n;
    }

    static integer_t min_size_iwork( const integer_t n ) {
        return 3*n;
    }
};


// template function to call stebz
template< typename VectorD, typename VectorE, typename VectorW,
        typename VectorIBLOCK, typename VectorISPLIT, typename Workspace >
inline integer_t stebz( const char range, const char order,
        const integer_t n, const typename traits::type_traits<
        typename traits::vector_traits< VectorD >::value_type >::real_type vl,
        const typename traits::type_traits< typename traits::vector_traits<
        VectorD >::value_type >::real_type vu, const integer_t il,
        const integer_t iu, const typename traits::type_traits<
        typename traits::vector_traits<
        VectorD >::value_type >::real_type abstol, const VectorD& d,
        const VectorE& e, integer_t& m, integer_t& nsplit, VectorW& w,
        VectorIBLOCK& iblock, VectorISPLIT& isplit, Workspace work ) {
    typedef typename traits::vector_traits< VectorD >::value_type value_type;
    integer_t info(0);
    stebz_impl< value_type >::invoke( range, order, n, vl, vu, il, iu,
            abstol, d, e, m, nsplit, w, iblock, isplit, info, work );
    return info;
}

// template function to call stebz, default workspace type
template< typename VectorD, typename VectorE, typename VectorW,
        typename VectorIBLOCK, typename VectorISPLIT >
inline integer_t stebz( const char range, const char order,
        const integer_t n, const typename traits::type_traits<
        typename traits::vector_traits< VectorD >::value_type >::real_type vl,
        const typename traits::type_traits< typename traits::vector_traits<
        VectorD >::value_type >::real_type vu, const integer_t il,
        const integer_t iu, const typename traits::type_traits<
        typename traits::vector_traits<
        VectorD >::value_type >::real_type abstol, const VectorD& d,
        const VectorE& e, integer_t& m, integer_t& nsplit, VectorW& w,
        VectorIBLOCK& iblock, VectorISPLIT& isplit ) {
    typedef typename traits::vector_traits< VectorD >::value_type value_type;
    integer_t info(0);
    stebz_impl< value_type >::invoke( range, order, n, vl, vu, il, iu,
            abstol, d, e, m, nsplit, w, iblock, isplit, info,
            optimal_workspace() );
    return info;
}

}}}} // namespace boost::numeric::bindings::lapack

#endif
