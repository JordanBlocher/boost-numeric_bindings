//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_HSEQR_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_HSEQR_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_complex.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/is_real.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/utility/enable_if.hpp>

//
// The LAPACK-backend for hseqr is the netlib-compatible backend.
//
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * float value-type.
//
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t n, const fortran_int_t ilo,
        const fortran_int_t ihi, float* h, const fortran_int_t ldh, float* wr,
        float* wi, float* z, const fortran_int_t ldz, float* work,
        const fortran_int_t lwork ) {
    fortran_int_t info(0);
    LAPACK_SHSEQR( &job, &compz, &n, &ilo, &ihi, h, &ldh, wr, wi, z, &ldz,
            work, &lwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * double value-type.
//
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t n, const fortran_int_t ilo,
        const fortran_int_t ihi, double* h, const fortran_int_t ldh,
        double* wr, double* wi, double* z, const fortran_int_t ldz,
        double* work, const fortran_int_t lwork ) {
    fortran_int_t info(0);
    LAPACK_DHSEQR( &job, &compz, &n, &ilo, &ihi, h, &ldh, wr, wi, z, &ldz,
            work, &lwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<float> value-type.
//
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t n, const fortran_int_t ilo,
        const fortran_int_t ihi, std::complex<float>* h,
        const fortran_int_t ldh, std::complex<float>* w,
        std::complex<float>* z, const fortran_int_t ldz,
        std::complex<float>* work, const fortran_int_t lwork ) {
    fortran_int_t info(0);
    LAPACK_CHSEQR( &job, &compz, &n, &ilo, &ihi, h, &ldh, w, z, &ldz, work,
            &lwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<double> value-type.
//
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t n, const fortran_int_t ilo,
        const fortran_int_t ihi, std::complex<double>* h,
        const fortran_int_t ldh, std::complex<double>* w,
        std::complex<double>* z, const fortran_int_t ldz,
        std::complex<double>* work, const fortran_int_t lwork ) {
    fortran_int_t info(0);
    LAPACK_ZHSEQR( &job, &compz, &n, &ilo, &ihi, h, &ldh, w, z, &ldz, work,
            &lwork, &info );
    return info;
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to hseqr.
//
template< typename Value, typename Enable = void >
struct hseqr_impl {};

//
// This implementation is enabled if Value is a real type.
//
template< typename Value >
struct hseqr_impl< Value, typename boost::enable_if< is_real< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixH, typename VectorWR, typename VectorWI,
            typename MatrixZ, typename WORK >
    static std::ptrdiff_t invoke( const char job, const char compz,
            const fortran_int_t ilo, const fortran_int_t ihi,
            MatrixH& h, VectorWR& wr, VectorWI& wi, MatrixZ& z,
            detail::workspace1< WORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixH >::type >::type,
                typename remove_const< typename value<
                VectorWR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixH >::type >::type,
                typename remove_const< typename value<
                VectorWI >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixH >::type >::type,
                typename remove_const< typename value<
                MatrixZ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixH >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorWR >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorWI >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixZ >::value) );
        BOOST_ASSERT( compz == 'N' || compz == 'I' || compz == 'V' );
        BOOST_ASSERT( job == 'E' || job == 'S' );
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work(
                size_column(h) ));
        BOOST_ASSERT( size(wr) >= size_column(h) );
        BOOST_ASSERT( size_minor(h) == 1 || stride_minor(h) == 1 );
        BOOST_ASSERT( size_minor(z) == 1 || stride_minor(z) == 1 );
        return detail::hseqr( job, compz, size_column(h), ilo, ihi,
                begin_value(h), stride_major(h), begin_value(wr),
                begin_value(wi), begin_value(z), stride_major(z),
                begin_value(work.select(real_type())),
                size(work.select(real_type())) );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixH, typename VectorWR, typename VectorWI,
            typename MatrixZ >
    static std::ptrdiff_t invoke( const char job, const char compz,
            const fortran_int_t ilo, const fortran_int_t ihi,
            MatrixH& h, VectorWR& wr, VectorWI& wi, MatrixZ& z,
            minimal_workspace work ) {
        bindings::detail::array< real_type > tmp_work( min_size_work(
                size_column(h) ) );
        return invoke( job, compz, ilo, ihi, h, wr, wi, z,
                workspace( tmp_work ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixH, typename VectorWR, typename VectorWI,
            typename MatrixZ >
    static std::ptrdiff_t invoke( const char job, const char compz,
            const fortran_int_t ilo, const fortran_int_t ihi,
            MatrixH& h, VectorWR& wr, VectorWI& wi, MatrixZ& z,
            optimal_workspace work ) {
        return invoke( job, compz, ilo, ihi, h, wr, wi, z,
                minimal_workspace() );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n ) {
        return std::max< std::ptrdiff_t >( 1, n );
    }
};

//
// This implementation is enabled if Value is a complex type.
//
template< typename Value >
struct hseqr_impl< Value, typename boost::enable_if< is_complex< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixH, typename VectorW, typename MatrixZ,
            typename WORK >
    static std::ptrdiff_t invoke( const char job, const char compz,
            const fortran_int_t ilo, const fortran_int_t ihi,
            MatrixH& h, VectorW& w, MatrixZ& z, detail::workspace1<
            WORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixH >::type >::type,
                typename remove_const< typename value<
                VectorW >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixH >::type >::type,
                typename remove_const< typename value<
                MatrixZ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixH >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorW >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixZ >::value) );
        BOOST_ASSERT( compz == 'N' || compz == 'I' || compz == 'V' );
        BOOST_ASSERT( job == 'E' || job == 'S' );
        BOOST_ASSERT( size(work.select(value_type())) >= min_size_work(
                size_column(h) ));
        BOOST_ASSERT( size_minor(h) == 1 || stride_minor(h) == 1 );
        BOOST_ASSERT( size_minor(z) == 1 || stride_minor(z) == 1 );
        return detail::hseqr( job, compz, size_column(h), ilo, ihi,
                begin_value(h), stride_major(h), begin_value(w),
                begin_value(z), stride_major(z),
                begin_value(work.select(value_type())),
                size(work.select(value_type())) );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename MatrixH, typename VectorW, typename MatrixZ >
    static std::ptrdiff_t invoke( const char job, const char compz,
            const fortran_int_t ilo, const fortran_int_t ihi,
            MatrixH& h, VectorW& w, MatrixZ& z, minimal_workspace work ) {
        bindings::detail::array< value_type > tmp_work( min_size_work(
                size_column(h) ) );
        return invoke( job, compz, ilo, ihi, h, w, z, workspace( tmp_work ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename MatrixH, typename VectorW, typename MatrixZ >
    static std::ptrdiff_t invoke( const char job, const char compz,
            const fortran_int_t ilo, const fortran_int_t ihi,
            MatrixH& h, VectorW& w, MatrixZ& z, optimal_workspace work ) {
        return invoke( job, compz, ilo, ihi, h, w, z, minimal_workspace() );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n ) {
        return std::max< std::ptrdiff_t >( 1, n );
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the hseqr_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * VectorWR&
// * VectorWI&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        VectorWR& wr, VectorWI& wi, MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * VectorWR&
// * VectorWI&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        VectorWR& wr, VectorWI& wi, MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * VectorWR&
// * VectorWI&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, VectorWR& wr, VectorWI& wi, MatrixZ& z,
        Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * VectorWR&
// * VectorWI&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, VectorWR& wr, VectorWI& wi, MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * const VectorWR&
// * VectorWI&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        const VectorWR& wr, VectorWI& wi, MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * const VectorWR&
// * VectorWI&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        const VectorWR& wr, VectorWI& wi, MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * const VectorWR&
// * VectorWI&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, const VectorWR& wr, VectorWI& wi, MatrixZ& z,
        Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * const VectorWR&
// * VectorWI&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, const VectorWR& wr, VectorWI& wi, MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * VectorWR&
// * const VectorWI&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        VectorWR& wr, const VectorWI& wi, MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * VectorWR&
// * const VectorWI&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        VectorWR& wr, const VectorWI& wi, MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * VectorWR&
// * const VectorWI&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, VectorWR& wr, const VectorWI& wi, MatrixZ& z,
        Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * VectorWR&
// * const VectorWI&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, VectorWR& wr, const VectorWI& wi, MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * const VectorWR&
// * const VectorWI&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        const VectorWR& wr, const VectorWI& wi, MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * const VectorWR&
// * const VectorWI&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        const VectorWR& wr, const VectorWI& wi, MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * const VectorWR&
// * const VectorWI&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, const VectorWR& wr, const VectorWI& wi, MatrixZ& z,
        Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * const VectorWR&
// * const VectorWI&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, const VectorWR& wr, const VectorWI& wi,
        MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * VectorWR&
// * VectorWI&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        VectorWR& wr, VectorWI& wi, const MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * VectorWR&
// * VectorWI&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        VectorWR& wr, VectorWI& wi, const MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * VectorWR&
// * VectorWI&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, VectorWR& wr, VectorWI& wi, const MatrixZ& z,
        Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * VectorWR&
// * VectorWI&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, VectorWR& wr, VectorWI& wi, const MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * const VectorWR&
// * VectorWI&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        const VectorWR& wr, VectorWI& wi, const MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * const VectorWR&
// * VectorWI&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        const VectorWR& wr, VectorWI& wi, const MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * const VectorWR&
// * VectorWI&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, const VectorWR& wr, VectorWI& wi, const MatrixZ& z,
        Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * const VectorWR&
// * VectorWI&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, const VectorWR& wr, VectorWI& wi,
        const MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * VectorWR&
// * const VectorWI&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        VectorWR& wr, const VectorWI& wi, const MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * VectorWR&
// * const VectorWI&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        VectorWR& wr, const VectorWI& wi, const MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * VectorWR&
// * const VectorWI&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, VectorWR& wr, const VectorWI& wi, const MatrixZ& z,
        Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * VectorWR&
// * const VectorWI&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, VectorWR& wr, const VectorWI& wi,
        const MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * const VectorWR&
// * const VectorWI&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        const VectorWR& wr, const VectorWI& wi, const MatrixZ& z,
        Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * const VectorWR&
// * const VectorWI&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        const VectorWR& wr, const VectorWI& wi, const MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * const VectorWR&
// * const VectorWI&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ, typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, const VectorWR& wr, const VectorWI& wi,
        const MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * const VectorWR&
// * const VectorWI&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorWR, typename VectorWI,
        typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, const VectorWR& wr, const VectorWI& wi,
        const MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, wr, wi, z, optimal_workspace() );
}
//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * VectorW&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        VectorW& w, MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * VectorW&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        VectorW& w, MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * VectorW&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, VectorW& w, MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * VectorW&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, VectorW& w, MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * const VectorW&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        const VectorW& w, MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * const VectorW&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        const VectorW& w, MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * const VectorW&
// * MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, const VectorW& w, MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * const VectorW&
// * MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, const VectorW& w, MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * VectorW&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        VectorW& w, const MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * VectorW&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        VectorW& w, const MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * VectorW&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, VectorW& w, const MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * VectorW&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, VectorW& w, const MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * const VectorW&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        const VectorW& w, const MatrixZ& z, Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * MatrixH&
// * const VectorW&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi, MatrixH& h,
        const VectorW& w, const MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, optimal_workspace() );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * const VectorW&
// * const MatrixZ&
// * User-defined workspace
//
template< typename MatrixH, typename VectorW, typename MatrixZ,
        typename Workspace >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, const VectorW& w, const MatrixZ& z,
        Workspace work ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, work );
}

//
// Overloaded function for hseqr. Its overload differs for
// * const MatrixH&
// * const VectorW&
// * const MatrixZ&
// * Default workspace-type (optimal)
//
template< typename MatrixH, typename VectorW, typename MatrixZ >
inline std::ptrdiff_t hseqr( const char job, const char compz,
        const fortran_int_t ilo, const fortran_int_t ihi,
        const MatrixH& h, const VectorW& w, const MatrixZ& z ) {
    return hseqr_impl< typename value< MatrixH >::type >::invoke( job,
            compz, ilo, ihi, h, w, z, optimal_workspace() );
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
