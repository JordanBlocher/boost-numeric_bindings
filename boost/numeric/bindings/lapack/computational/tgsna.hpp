//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_TGSNA_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_TGSNA_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_complex.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/is_real.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/traits/detail/utils.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/utility/enable_if.hpp>

//
// The LAPACK-backend for tgsna is the netlib-compatible backend.
//
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * float value-type.
//
inline std::ptrdiff_t tgsna( char job, char howmny, const logical_t* select,
        fortran_int_t n, const float* a, fortran_int_t lda, const float* b,
        fortran_int_t ldb, const float* vl, fortran_int_t ldvl,
        const float* vr, fortran_int_t ldvr, float* s, float* dif,
        fortran_int_t mm, fortran_int_t& m, float* work, fortran_int_t lwork,
        fortran_int_t* iwork ) {
    fortran_int_t info(0);
    LAPACK_STGSNA( &job, &howmny, select, &n, a, &lda, b, &ldb, vl, &ldvl, vr,
            &ldvr, s, dif, &mm, &m, work, &lwork, iwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * double value-type.
//
inline std::ptrdiff_t tgsna( char job, char howmny, const logical_t* select,
        fortran_int_t n, const double* a, fortran_int_t lda, const double* b,
        fortran_int_t ldb, const double* vl, fortran_int_t ldvl,
        const double* vr, fortran_int_t ldvr, double* s, double* dif,
        fortran_int_t mm, fortran_int_t& m, double* work, fortran_int_t lwork,
        fortran_int_t* iwork ) {
    fortran_int_t info(0);
    LAPACK_DTGSNA( &job, &howmny, select, &n, a, &lda, b, &ldb, vl, &ldvl, vr,
            &ldvr, s, dif, &mm, &m, work, &lwork, iwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<float> value-type.
//
inline std::ptrdiff_t tgsna( char job, char howmny, const logical_t* select,
        fortran_int_t n, const std::complex<float>* a, fortran_int_t lda,
        const std::complex<float>* b, fortran_int_t ldb,
        const std::complex<float>* vl, fortran_int_t ldvl,
        const std::complex<float>* vr, fortran_int_t ldvr, float* s,
        float* dif, fortran_int_t mm, fortran_int_t& m,
        std::complex<float>* work, fortran_int_t lwork,
        fortran_int_t* iwork ) {
    fortran_int_t info(0);
    LAPACK_CTGSNA( &job, &howmny, select, &n, a, &lda, b, &ldb, vl, &ldvl, vr,
            &ldvr, s, dif, &mm, &m, work, &lwork, iwork, &info );
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<double> value-type.
//
inline std::ptrdiff_t tgsna( char job, char howmny, const logical_t* select,
        fortran_int_t n, const std::complex<double>* a, fortran_int_t lda,
        const std::complex<double>* b, fortran_int_t ldb,
        const std::complex<double>* vl, fortran_int_t ldvl,
        const std::complex<double>* vr, fortran_int_t ldvr, double* s,
        double* dif, fortran_int_t mm, fortran_int_t& m,
        std::complex<double>* work, fortran_int_t lwork,
        fortran_int_t* iwork ) {
    fortran_int_t info(0);
    LAPACK_ZTGSNA( &job, &howmny, select, &n, a, &lda, b, &ldb, vl, &ldvl, vr,
            &ldvr, s, dif, &mm, &m, work, &lwork, iwork, &info );
    return info;
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to tgsna.
//
template< typename Value, typename Enable = void >
struct tgsna_impl {};

//
// This implementation is enabled if Value is a real type.
//
template< typename Value >
struct tgsna_impl< Value, typename boost::enable_if< is_real< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename VectorSELECT, typename MatrixA, typename MatrixB,
            typename MatrixVL, typename MatrixVR, typename VectorS,
            typename VectorDIF, typename WORK, typename IWORK >
    static std::ptrdiff_t invoke( const char job, const char howmny,
            const VectorSELECT& select, const fortran_int_t n,
            const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
            const MatrixVR& vr, VectorS& s, VectorDIF& dif,
            const fortran_int_t mm, fortran_int_t& m,
            detail::workspace2< WORK, IWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixB >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixVL >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixVR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorS >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                VectorDIF >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorS >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorDIF >::value) );
        BOOST_ASSERT( howmny == 'A' || howmny == 'S' );
        BOOST_ASSERT( job == 'E' || job == 'V' || job == 'B' );
        BOOST_ASSERT( mm >= m );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( $CALL_MIN_SIZE ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work(
                $CALL_MIN_SIZE ));
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(b) == 1 || stride_minor(b) == 1 );
        BOOST_ASSERT( size_minor(vl) == 1 || stride_minor(vl) == 1 );
        BOOST_ASSERT( size_minor(vr) == 1 || stride_minor(vr) == 1 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,n) );
        BOOST_ASSERT( stride_major(b) >= std::max< std::ptrdiff_t >(1,n) );
        return detail::tgsna( job, howmny, begin_value(select), n,
                begin_value(a), stride_major(a), begin_value(b),
                stride_major(b), begin_value(vl), stride_major(vl),
                begin_value(vr), stride_major(vr), begin_value(s),
                begin_value(dif), mm, m,
                begin_value(work.select(real_type())),
                size(work.select(real_type())),
                begin_value(work.select(fortran_int_t())) );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename VectorSELECT, typename MatrixA, typename MatrixB,
            typename MatrixVL, typename MatrixVR, typename VectorS,
            typename VectorDIF >
    static std::ptrdiff_t invoke( const char job, const char howmny,
            const VectorSELECT& select, const fortran_int_t n,
            const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
            const MatrixVR& vr, VectorS& s, VectorDIF& dif,
            const fortran_int_t mm, fortran_int_t& m,
            minimal_workspace work ) {
        bindings::detail::array< real_type > tmp_work( min_size_work(
                $CALL_MIN_SIZE ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( $CALL_MIN_SIZE ) );
        return invoke( job, howmny, select, n, a, b, vl, vr, s, dif, mm, m,
                workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename VectorSELECT, typename MatrixA, typename MatrixB,
            typename MatrixVL, typename MatrixVR, typename VectorS,
            typename VectorDIF >
    static std::ptrdiff_t invoke( const char job, const char howmny,
            const VectorSELECT& select, const fortran_int_t n,
            const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
            const MatrixVR& vr, VectorS& s, VectorDIF& dif,
            const fortran_int_t mm, fortran_int_t& m,
            optimal_workspace work ) {
        real_type opt_size_work;
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( $CALL_MIN_SIZE ) );
        detail::tgsna( job, howmny, begin_value(select), n,
                begin_value(a), stride_major(a), begin_value(b),
                stride_major(b), begin_value(vl), stride_major(vl),
                begin_value(vr), stride_major(vr), begin_value(s),
                begin_value(dif), mm, m, &opt_size_work, -1,
                begin_value(tmp_iwork) );
        bindings::detail::array< real_type > tmp_work(
                traits::detail::to_int( opt_size_work ) );
        return invoke( job, howmny, select, n, a, b, vl, vr, s, dif, mm, m,
                workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( $ARGUMENTS ) {
        $MIN_SIZE
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( $ARGUMENTS ) {
        $MIN_SIZE
    }
};

//
// This implementation is enabled if Value is a complex type.
//
template< typename Value >
struct tgsna_impl< Value, typename boost::enable_if< is_complex< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename VectorSELECT, typename MatrixA, typename MatrixB,
            typename MatrixVL, typename MatrixVR, typename VectorS,
            typename VectorDIF, typename WORK, typename IWORK >
    static std::ptrdiff_t invoke( const char job, const char howmny,
            const VectorSELECT& select, const fortran_int_t n,
            const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
            const MatrixVR& vr, VectorS& s, VectorDIF& dif,
            const fortran_int_t mm, fortran_int_t& m,
            detail::workspace2< WORK, IWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorS >::type >::type,
                typename remove_const< typename value<
                VectorDIF >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixB >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixVL >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< MatrixA >::type >::type,
                typename remove_const< typename value<
                MatrixVR >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorS >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorDIF >::value) );
        BOOST_ASSERT( howmny == 'A' || howmny == 'S' );
        BOOST_ASSERT( job == 'E' || job == 'V' || job == 'B' );
        BOOST_ASSERT( mm >= m );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( $CALL_MIN_SIZE ));
        BOOST_ASSERT( size(work.select(value_type())) >= min_size_work(
                $CALL_MIN_SIZE ));
        BOOST_ASSERT( size_minor(a) == 1 || stride_minor(a) == 1 );
        BOOST_ASSERT( size_minor(b) == 1 || stride_minor(b) == 1 );
        BOOST_ASSERT( size_minor(vl) == 1 || stride_minor(vl) == 1 );
        BOOST_ASSERT( size_minor(vr) == 1 || stride_minor(vr) == 1 );
        BOOST_ASSERT( stride_major(a) >= std::max< std::ptrdiff_t >(1,n) );
        BOOST_ASSERT( stride_major(b) >= std::max< std::ptrdiff_t >(1,n) );
        return detail::tgsna( job, howmny, begin_value(select), n,
                begin_value(a), stride_major(a), begin_value(b),
                stride_major(b), begin_value(vl), stride_major(vl),
                begin_value(vr), stride_major(vr), begin_value(s),
                begin_value(dif), mm, m,
                begin_value(work.select(value_type())),
                size(work.select(value_type())),
                begin_value(work.select(fortran_int_t())) );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename VectorSELECT, typename MatrixA, typename MatrixB,
            typename MatrixVL, typename MatrixVR, typename VectorS,
            typename VectorDIF >
    static std::ptrdiff_t invoke( const char job, const char howmny,
            const VectorSELECT& select, const fortran_int_t n,
            const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
            const MatrixVR& vr, VectorS& s, VectorDIF& dif,
            const fortran_int_t mm, fortran_int_t& m,
            minimal_workspace work ) {
        bindings::detail::array< value_type > tmp_work( min_size_work(
                $CALL_MIN_SIZE ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( $CALL_MIN_SIZE ) );
        return invoke( job, howmny, select, n, a, b, vl, vr, s, dif, mm, m,
                workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename VectorSELECT, typename MatrixA, typename MatrixB,
            typename MatrixVL, typename MatrixVR, typename VectorS,
            typename VectorDIF >
    static std::ptrdiff_t invoke( const char job, const char howmny,
            const VectorSELECT& select, const fortran_int_t n,
            const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
            const MatrixVR& vr, VectorS& s, VectorDIF& dif,
            const fortran_int_t mm, fortran_int_t& m,
            optimal_workspace work ) {
        return invoke( job, howmny, select, n, a, b, vl, vr, s, dif, mm, m,
                minimal_workspace() );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( $ARGUMENTS ) {
        $MIN_SIZE
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( $ARGUMENTS ) {
        $MIN_SIZE
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the tgsna_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for tgsna. Its overload differs for
// * VectorS&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename MatrixVL, typename MatrixVR, typename VectorS,
        typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsna( const char job, const char howmny,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
        const MatrixVR& vr, VectorS& s, VectorDIF& dif,
        const fortran_int_t mm, fortran_int_t& m, Workspace work ) {
    return tgsna_impl< typename value< MatrixA >::type >::invoke( job,
            howmny, select, n, a, b, vl, vr, s, dif, mm, m, work );
}

//
// Overloaded function for tgsna. Its overload differs for
// * VectorS&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename MatrixVL, typename MatrixVR, typename VectorS,
        typename VectorDIF >
inline std::ptrdiff_t tgsna( const char job, const char howmny,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
        const MatrixVR& vr, VectorS& s, VectorDIF& dif,
        const fortran_int_t mm, fortran_int_t& m ) {
    return tgsna_impl< typename value< MatrixA >::type >::invoke( job,
            howmny, select, n, a, b, vl, vr, s, dif, mm, m,
            optimal_workspace() );
}

//
// Overloaded function for tgsna. Its overload differs for
// * const VectorS&
// * VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename MatrixVL, typename MatrixVR, typename VectorS,
        typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsna( const char job, const char howmny,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
        const MatrixVR& vr, const VectorS& s, VectorDIF& dif,
        const fortran_int_t mm, fortran_int_t& m, Workspace work ) {
    return tgsna_impl< typename value< MatrixA >::type >::invoke( job,
            howmny, select, n, a, b, vl, vr, s, dif, mm, m, work );
}

//
// Overloaded function for tgsna. Its overload differs for
// * const VectorS&
// * VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename MatrixVL, typename MatrixVR, typename VectorS,
        typename VectorDIF >
inline std::ptrdiff_t tgsna( const char job, const char howmny,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
        const MatrixVR& vr, const VectorS& s, VectorDIF& dif,
        const fortran_int_t mm, fortran_int_t& m ) {
    return tgsna_impl< typename value< MatrixA >::type >::invoke( job,
            howmny, select, n, a, b, vl, vr, s, dif, mm, m,
            optimal_workspace() );
}

//
// Overloaded function for tgsna. Its overload differs for
// * VectorS&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename MatrixVL, typename MatrixVR, typename VectorS,
        typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsna( const char job, const char howmny,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
        const MatrixVR& vr, VectorS& s, const VectorDIF& dif,
        const fortran_int_t mm, fortran_int_t& m, Workspace work ) {
    return tgsna_impl< typename value< MatrixA >::type >::invoke( job,
            howmny, select, n, a, b, vl, vr, s, dif, mm, m, work );
}

//
// Overloaded function for tgsna. Its overload differs for
// * VectorS&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename MatrixVL, typename MatrixVR, typename VectorS,
        typename VectorDIF >
inline std::ptrdiff_t tgsna( const char job, const char howmny,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
        const MatrixVR& vr, VectorS& s, const VectorDIF& dif,
        const fortran_int_t mm, fortran_int_t& m ) {
    return tgsna_impl< typename value< MatrixA >::type >::invoke( job,
            howmny, select, n, a, b, vl, vr, s, dif, mm, m,
            optimal_workspace() );
}

//
// Overloaded function for tgsna. Its overload differs for
// * const VectorS&
// * const VectorDIF&
// * User-defined workspace
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename MatrixVL, typename MatrixVR, typename VectorS,
        typename VectorDIF, typename Workspace >
inline std::ptrdiff_t tgsna( const char job, const char howmny,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
        const MatrixVR& vr, const VectorS& s, const VectorDIF& dif,
        const fortran_int_t mm, fortran_int_t& m, Workspace work ) {
    return tgsna_impl< typename value< MatrixA >::type >::invoke( job,
            howmny, select, n, a, b, vl, vr, s, dif, mm, m, work );
}

//
// Overloaded function for tgsna. Its overload differs for
// * const VectorS&
// * const VectorDIF&
// * Default workspace-type (optimal)
//
template< typename VectorSELECT, typename MatrixA, typename MatrixB,
        typename MatrixVL, typename MatrixVR, typename VectorS,
        typename VectorDIF >
inline std::ptrdiff_t tgsna( const char job, const char howmny,
        const VectorSELECT& select, const fortran_int_t n,
        const MatrixA& a, const MatrixB& b, const MatrixVL& vl,
        const MatrixVR& vr, const VectorS& s, const VectorDIF& dif,
        const fortran_int_t mm, fortran_int_t& m ) {
    return tgsna_impl< typename value< MatrixA >::type >::invoke( job,
            howmny, select, n, a, b, vl, vr, s, dif, mm, m,
            optimal_workspace() );
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
