//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_STEMR_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_STEMR_HPP

#include <boost/assert.hpp>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/detail/array.hpp>
#include <boost/numeric/bindings/is_complex.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/is_real.hpp>
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/traits/detail/utils.hpp>
#include <boost/numeric/bindings/value.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/utility/enable_if.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to float value-type.
//
inline void stemr( char jobz, char range, fortran_int_t n, float* d, float* e,
        float vl, float vu, fortran_int_t il, fortran_int_t iu,
        fortran_int_t& m, float* w, float* z, fortran_int_t ldz,
        fortran_int_t nzc, fortran_int_t* isuppz, logical_t& tryrac,
        float* work, fortran_int_t lwork, fortran_int_t* iwork,
        fortran_int_t liwork, fortran_int_t& info ) {
    LAPACK_SSTEMR( &jobz, &range, &n, d, e, &vl, &vu, &il, &iu, &m, w, z,
            &ldz, &nzc, isuppz, &tryrac, work, &lwork, iwork, &liwork, &info );
}

//
// Overloaded function for dispatching to double value-type.
//
inline void stemr( char jobz, char range, fortran_int_t n, double* d,
        double* e, double vl, double vu, fortran_int_t il, fortran_int_t iu,
        fortran_int_t& m, double* w, double* z, fortran_int_t ldz,
        fortran_int_t nzc, fortran_int_t* isuppz, logical_t& tryrac,
        double* work, fortran_int_t lwork, fortran_int_t* iwork,
        fortran_int_t liwork, fortran_int_t& info ) {
    LAPACK_DSTEMR( &jobz, &range, &n, d, e, &vl, &vu, &il, &iu, &m, w, z,
            &ldz, &nzc, isuppz, &tryrac, work, &lwork, iwork, &liwork, &info );
}

//
// Overloaded function for dispatching to complex<float> value-type.
//
inline void stemr( char jobz, char range, fortran_int_t n, float* d, float* e,
        float vl, float vu, fortran_int_t il, fortran_int_t iu,
        fortran_int_t& m, float* w, std::complex<float>* z, fortran_int_t ldz,
        fortran_int_t nzc, fortran_int_t* isuppz, logical_t& tryrac,
        float* work, fortran_int_t lwork, fortran_int_t* iwork,
        fortran_int_t liwork, fortran_int_t& info ) {
    LAPACK_CSTEMR( &jobz, &range, &n, d, e, &vl, &vu, &il, &iu, &m, w, z,
            &ldz, &nzc, isuppz, &tryrac, work, &lwork, iwork, &liwork, &info );
}

//
// Overloaded function for dispatching to complex<double> value-type.
//
inline void stemr( char jobz, char range, fortran_int_t n, double* d,
        double* e, double vl, double vu, fortran_int_t il, fortran_int_t iu,
        fortran_int_t& m, double* w, std::complex<double>* z,
        fortran_int_t ldz, fortran_int_t nzc, fortran_int_t* isuppz,
        logical_t& tryrac, double* work, fortran_int_t lwork,
        fortran_int_t* iwork, fortran_int_t liwork, fortran_int_t& info ) {
    LAPACK_ZSTEMR( &jobz, &range, &n, d, e, &vl, &vu, &il, &iu, &m, w, z,
            &ldz, &nzc, isuppz, &tryrac, work, &lwork, iwork, &liwork, &info );
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to stemr.
//
template< typename Value, typename Enable = void >
struct stemr_impl {};

//
// This implementation is enabled if Value is a real type.
//
template< typename Value >
struct stemr_impl< Value, typename boost::enable_if< is_real< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename VectorD, typename VectorE, typename VectorW,
            typename MatrixZ, typename VectorISUPPZ, typename WORK,
            typename IWORK >
    static void invoke( const char jobz, const char range,
            const fortran_int_t n, VectorD& d, VectorE& e,
            const real_type vl, const real_type vu,
            const fortran_int_t il, const fortran_int_t iu,
            fortran_int_t& m, VectorW& w, MatrixZ& z,
            const fortran_int_t nzc, VectorISUPPZ& isuppz,
            logical_t& tryrac, fortran_int_t& info, detail::workspace2<
            WORK, IWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                VectorE >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                VectorW >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                MatrixZ >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorD >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorE >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorW >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixZ >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorISUPPZ >::value) );
        BOOST_ASSERT( jobz == 'N' || jobz == 'V' );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( range == 'A' || range == 'V' || range == 'I' );
        BOOST_ASSERT( size(d) >= n );
        BOOST_ASSERT( size(e) >= n );
        BOOST_ASSERT( size(w) >= n );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( n, jobz ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work( n,
                jobz ));
        BOOST_ASSERT( size_minor(z) == 1 || stride_minor(z) == 1 );
        detail::stemr( jobz, range, n, begin_value(d), begin_value(e), vl, vu,
                il, iu, m, begin_value(w), begin_value(z), stride_major(z),
                nzc, begin_value(isuppz), tryrac,
                begin_value(work.select(real_type())),
                size(work.select(real_type())),
                begin_value(work.select(fortran_int_t())),
                size(work.select(fortran_int_t())), info );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename VectorD, typename VectorE, typename VectorW,
            typename MatrixZ, typename VectorISUPPZ >
    static void invoke( const char jobz, const char range,
            const fortran_int_t n, VectorD& d, VectorE& e,
            const real_type vl, const real_type vu,
            const fortran_int_t il, const fortran_int_t iu,
            fortran_int_t& m, VectorW& w, MatrixZ& z,
            const fortran_int_t nzc, VectorISUPPZ& isuppz,
            logical_t& tryrac, fortran_int_t& info,
            minimal_workspace work ) {
        bindings::detail::array< real_type > tmp_work( min_size_work( n,
                jobz ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( n, jobz ) );
        invoke( jobz, range, n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz,
                tryrac, info, workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename VectorD, typename VectorE, typename VectorW,
            typename MatrixZ, typename VectorISUPPZ >
    static void invoke( const char jobz, const char range,
            const fortran_int_t n, VectorD& d, VectorE& e,
            const real_type vl, const real_type vu,
            const fortran_int_t il, const fortran_int_t iu,
            fortran_int_t& m, VectorW& w, MatrixZ& z,
            const fortran_int_t nzc, VectorISUPPZ& isuppz,
            logical_t& tryrac, fortran_int_t& info,
            optimal_workspace work ) {
        real_type opt_size_work;
        fortran_int_t opt_size_iwork;
        detail::stemr( jobz, range, n, begin_value(d), begin_value(e),
                vl, vu, il, iu, m, begin_value(w), begin_value(z),
                stride_major(z), nzc, begin_value(isuppz), tryrac,
                &opt_size_work, -1, &opt_size_iwork, -1, info );
        bindings::detail::array< real_type > tmp_work(
                traits::detail::to_int( opt_size_work ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                opt_size_iwork );
        invoke( jobz, range, n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz,
                tryrac, info, workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n,
            const char jobz ) {
        if ( jobz == 'V' ) {
            return std::max< std::ptrdiff_t >( 1, 18*n );
        } else {
            return std::max< std::ptrdiff_t >( 1, 12*n );
        }
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( const std::ptrdiff_t n,
            const char jobz ) {
        if ( jobz == 'V' ) {
            return std::max< std::ptrdiff_t >( 1, 10*n );
        } else {
            return std::max< std::ptrdiff_t >( 1, 8*n );
        }
    }
};

//
// This implementation is enabled if Value is a complex type.
//
template< typename Value >
struct stemr_impl< Value, typename boost::enable_if< is_complex< Value > >::type > {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;
    typedef tag::column_major order;

    //
    // Static member function for user-defined workspaces, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename VectorD, typename VectorE, typename VectorW,
            typename MatrixZ, typename VectorISUPPZ, typename WORK,
            typename IWORK >
    static void invoke( const char jobz, const char range,
            const fortran_int_t n, VectorD& d, VectorE& e,
            const real_type vl, const real_type vu,
            const fortran_int_t il, const fortran_int_t iu,
            fortran_int_t& m, VectorW& w, MatrixZ& z,
            const fortran_int_t nzc, VectorISUPPZ& isuppz,
            logical_t& tryrac, fortran_int_t& info, detail::workspace2<
            WORK, IWORK > work ) {
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                VectorE >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (boost::is_same< typename remove_const<
                typename value< VectorD >::type >::type,
                typename remove_const< typename value<
                VectorW >::type >::type >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorD >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorE >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorW >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< MatrixZ >::value) );
        BOOST_STATIC_ASSERT( (is_mutable< VectorISUPPZ >::value) );
        BOOST_ASSERT( jobz == 'N' || jobz == 'V' );
        BOOST_ASSERT( n >= 0 );
        BOOST_ASSERT( range == 'A' || range == 'V' || range == 'I' );
        BOOST_ASSERT( size(d) >= n );
        BOOST_ASSERT( size(e) >= n );
        BOOST_ASSERT( size(w) >= n );
        BOOST_ASSERT( size(work.select(fortran_int_t())) >=
                min_size_iwork( n, jobz ));
        BOOST_ASSERT( size(work.select(real_type())) >= min_size_work( n,
                jobz ));
        BOOST_ASSERT( size_minor(z) == 1 || stride_minor(z) == 1 );
        detail::stemr( jobz, range, n, begin_value(d), begin_value(e), vl, vu,
                il, iu, m, begin_value(w), begin_value(z), stride_major(z),
                nzc, begin_value(isuppz), tryrac,
                begin_value(work.select(real_type())),
                size(work.select(real_type())),
                begin_value(work.select(fortran_int_t())),
                size(work.select(fortran_int_t())), info );
    }

    //
    // Static member function that
    // * Figures out the minimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member function
    // * Enables the unblocked algorithm (BLAS level 2)
    //
    template< typename VectorD, typename VectorE, typename VectorW,
            typename MatrixZ, typename VectorISUPPZ >
    static void invoke( const char jobz, const char range,
            const fortran_int_t n, VectorD& d, VectorE& e,
            const real_type vl, const real_type vu,
            const fortran_int_t il, const fortran_int_t iu,
            fortran_int_t& m, VectorW& w, MatrixZ& z,
            const fortran_int_t nzc, VectorISUPPZ& isuppz,
            logical_t& tryrac, fortran_int_t& info,
            minimal_workspace work ) {
        bindings::detail::array< real_type > tmp_work( min_size_work( n,
                jobz ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                min_size_iwork( n, jobz ) );
        invoke( jobz, range, n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz,
                tryrac, info, workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that
    // * Figures out the optimal workspace requirements, and passes
    //   the results to the user-defined workspace overload of the 
    //   invoke static member
    // * Enables the blocked algorithm (BLAS level 3)
    //
    template< typename VectorD, typename VectorE, typename VectorW,
            typename MatrixZ, typename VectorISUPPZ >
    static void invoke( const char jobz, const char range,
            const fortran_int_t n, VectorD& d, VectorE& e,
            const real_type vl, const real_type vu,
            const fortran_int_t il, const fortran_int_t iu,
            fortran_int_t& m, VectorW& w, MatrixZ& z,
            const fortran_int_t nzc, VectorISUPPZ& isuppz,
            logical_t& tryrac, fortran_int_t& info,
            optimal_workspace work ) {
        real_type opt_size_work;
        fortran_int_t opt_size_iwork;
        detail::stemr( jobz, range, n, begin_value(d), begin_value(e),
                vl, vu, il, iu, m, begin_value(w), begin_value(z),
                stride_major(z), nzc, begin_value(isuppz), tryrac,
                &opt_size_work, -1, &opt_size_iwork, -1, info );
        bindings::detail::array< real_type > tmp_work(
                traits::detail::to_int( opt_size_work ) );
        bindings::detail::array< fortran_int_t > tmp_iwork(
                opt_size_iwork );
        invoke( jobz, range, n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz,
                tryrac, info, workspace( tmp_work, tmp_iwork ) );
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array work.
    //
    static std::ptrdiff_t min_size_work( const std::ptrdiff_t n,
            const char jobz ) {
        if ( jobz == 'V' ) {
            return std::max< std::ptrdiff_t >( 1, 18*n );
        } else {
            return std::max< std::ptrdiff_t >( 1, 12*n );
        }
    }

    //
    // Static member function that returns the minimum size of
    // workspace-array iwork.
    //
    static std::ptrdiff_t min_size_iwork( const std::ptrdiff_t n,
            const char jobz ) {
        if ( jobz == 'V' ) {
            return std::max< std::ptrdiff_t >( 1, 10*n );
        } else {
            return std::max< std::ptrdiff_t >( 1, 8*n );
        }
    }
};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the stemr_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz, logical_t& tryrac,
        Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * User-defined workspace
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ, typename Workspace >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac, Workspace work ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            work );
    return info;
}

//
// Overloaded function for stemr. Its overload differs for
// * const VectorD&
// * const VectorE&
// * const fortran_int_t&
// * const VectorW&
// * const MatrixZ&
// * const VectorISUPPZ&
// * const logical_t&
// * Default workspace-type (optimal)
//
template< typename VectorD, typename VectorE, typename VectorW,
        typename MatrixZ, typename VectorISUPPZ >
inline std::ptrdiff_t stemr( const char jobz, const char range,
        const fortran_int_t n, const VectorD& d, const VectorE& e,
        const typename remove_imaginary< typename value<
        MatrixZ >::type >::type vl, const typename remove_imaginary<
        typename value< MatrixZ >::type >::type vu,
        const fortran_int_t il, const fortran_int_t iu,
        const fortran_int_t& m, const VectorW& w, const MatrixZ& z,
        const fortran_int_t nzc, const VectorISUPPZ& isuppz,
        const logical_t& tryrac ) {
    fortran_int_t info(0);
    stemr_impl< typename value< MatrixZ >::type >::invoke( jobz, range,
            n, d, e, vl, vu, il, iu, m, w, z, nzc, isuppz, tryrac, info,
            optimal_workspace() );
    return info;
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
