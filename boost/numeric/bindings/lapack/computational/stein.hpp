//
// Copyright (c) 2003--2009
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_STEIN_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_STEIN_HPP

#include <boost/numeric/bindings/lapack/lapack.h>
#include <boost/numeric/bindings/lapack/workspace.hpp>
#include <boost/numeric/bindings/traits/detail/array.hpp>
#include <boost/numeric/bindings/traits/traits.hpp>
#include <boost/numeric/bindings/traits/type_traits.hpp>
#include <cassert>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//$DESCRIPTION

// overloaded functions to call lapack
namespace detail {
    inline void stein( integer_t const n, float* d, float* e,
            integer_t const m, float* w, integer_t* iblock, integer_t* isplit,
            float* z, integer_t const ldz, float* work, integer_t* iwork,
            integer_t* ifail, integer_t& info ) {
        LAPACK_SSTEIN( &n, d, e, &m, w, iblock, isplit, z, &ldz, work, iwork,
                ifail, &info );
    }
    inline void stein( integer_t const n, double* d, double* e,
            integer_t const m, double* w, integer_t* iblock,
            integer_t* isplit, double* z, integer_t const ldz, double* work,
            integer_t* iwork, integer_t* ifail, integer_t& info ) {
        LAPACK_DSTEIN( &n, d, e, &m, w, iblock, isplit, z, &ldz, work, iwork,
                ifail, &info );
    }
    inline void stein( integer_t const n, float* d, float* e,
            integer_t const m, float* w, integer_t* iblock, integer_t* isplit,
            traits::complex_f* z, integer_t const ldz, float* work,
            integer_t* iwork, integer_t* ifail, integer_t& info ) {
        LAPACK_CSTEIN( &n, d, e, &m, w, iblock, isplit,
                traits::complex_ptr(z), &ldz, work, iwork, ifail, &info );
    }
    inline void stein( integer_t const n, double* d, double* e,
            integer_t const m, double* w, integer_t* iblock,
            integer_t* isplit, traits::complex_d* z, integer_t const ldz,
            double* work, integer_t* iwork, integer_t* ifail,
            integer_t& info ) {
        LAPACK_ZSTEIN( &n, d, e, &m, w, iblock, isplit,
                traits::complex_ptr(z), &ldz, work, iwork, ifail, &info );
    }
}

// value-type based template
template< typename ValueType >
struct stein_impl {

    typedef ValueType value_type;
    typedef typename traits::type_traits<ValueType>::real_type real_type;

    // user-defined workspace specialization
    template< typename VectorD, typename VectorE, typename VectorW,
            typename VectorIBLOCK, typename VectorISPLIT, typename MatrixZ,
            typename VectorIFAIL, typename WORK, typename IWORK >
    static void compute( integer_t const n, VectorD& d, VectorE& e,
            integer_t const m, VectorW& w, VectorIBLOCK& iblock,
            VectorISPLIT& isplit, MatrixZ& z, VectorIFAIL& ifail,
            integer_t& info, detail::workspace2< WORK, IWORK > work ) {
#ifndef NDEBUG
        assert( n >= 0 );
        assert( traits::vector_size(d) >= n );
        assert( traits::vector_size(e) >= n-1 );
        assert( traits::vector_size(w) >= n );
        assert( traits::vector_size(isplit) >= n );
        assert( traits::leading_dimension(z) >= std::max(1,n) );
        assert( traits::vector_size(work.select(real_type()) >= min_size_work(
                n )));
        assert( traits::vector_size(work.select(integer_t()) >=
                min_size_iwork( n )));
#endif
        detail::stein( n, traits::vector_storage(d),
                traits::vector_storage(e), m, traits::vector_storage(w),
                traits::vector_storage(iblock),
                traits::vector_storage(isplit), traits::matrix_storage(z),
                traits::leading_dimension(z),
                traits::vector_storage(work.select(real_type())),
                traits::vector_storage(work.select(integer_t())),
                traits::vector_storage(ifail), info );
    }

    // minimal workspace specialization
    template< typename VectorD, typename VectorE, typename VectorW,
            typename VectorIBLOCK, typename VectorISPLIT, typename MatrixZ,
            typename VectorIFAIL >
    static void compute( integer_t const n, VectorD& d, VectorE& e,
            integer_t const m, VectorW& w, VectorIBLOCK& iblock,
            VectorISPLIT& isplit, MatrixZ& z, VectorIFAIL& ifail,
            integer_t& info, minimal_workspace work ) {
        traits::detail::array< real_type > tmp_work( min_size_work( n ) );
        traits::detail::array< integer_t > tmp_iwork( min_size_iwork( n ) );
        compute( n, d, e, m, w, iblock, isplit, z, ifail, info,
                workspace( tmp_work, tmp_iwork ) );
    }

    // optimal workspace specialization
    template< typename VectorD, typename VectorE, typename VectorW,
            typename VectorIBLOCK, typename VectorISPLIT, typename MatrixZ,
            typename VectorIFAIL >
    static void compute( integer_t const n, VectorD& d, VectorE& e,
            integer_t const m, VectorW& w, VectorIBLOCK& iblock,
            VectorISPLIT& isplit, MatrixZ& z, VectorIFAIL& ifail,
            integer_t& info, optimal_workspace work ) {
        compute( n, d, e, m, w, iblock, isplit, z, ifail, info,
                minimal_workspace() );
    }

    static integer_t min_size_work( integer_t const n ) {
        return 5*n;
    }

    static integer_t min_size_iwork( integer_t const n ) {
        return n;
    }
};


// template function to call stein
template< typename VectorD, typename VectorE, typename VectorW,
        typename VectorIBLOCK, typename VectorISPLIT, typename MatrixZ,
        typename VectorIFAIL, typename Workspace >
inline integer_t stein( integer_t const n, VectorD& d, VectorE& e,
        integer_t const m, VectorW& w, VectorIBLOCK& iblock,
        VectorISPLIT& isplit, MatrixZ& z, VectorIFAIL& ifail,
        Workspace work = optimal_workspace() ) {
    typedef typename traits::vector_traits< VectorD >::value_type value_type;
    integer_t info(0);
    stein_impl< value_type >::compute( n, d, e, m, w, iblock, isplit, z,
            ifail, info, work );
    return info;
}


}}}} // namespace boost::numeric::bindings::lapack

#endif
